
MC2_Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002056  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002056  000020ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800176  00800176  00002200  2**0
                  ALLOC
  3 .stab         00002130  00000000  00000000  00002200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011a7  00000000  00000000  00004330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000054d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00005677  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  00005867  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00007c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00008fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a1c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000a384  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000a677  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 95 0d 	jmp	0x1b2a	; 0x1b2a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e5       	ldi	r30, 0x56	; 86
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 08 07 	call	0xe10	; 0xe10 <main>
      8a:	0c 94 29 10 	jmp	0x2052	; 0x2052 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 10 	jmp	0x201c	; 0x201c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fa 0f 	jmp	0x1ff4	; 0x1ff4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 16 10 	jmp	0x202c	; 0x202c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1a 10 	jmp	0x2034	; 0x2034 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 17 10 	jmp	0x202e	; 0x202e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 1e 10 	jmp	0x203c	; 0x203c <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <delay_3SEC>:

static volatile uint8 g_tick=0; /* global variable to increment with every 3 sec by timer1 interrupt*/

/*function called by timer1*/
void delay_3SEC(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     e00:	80 91 76 01 	lds	r24, 0x0176
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 76 01 	sts	0x0176, r24
}
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <main>:

int main(void)
{
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	cd b7       	in	r28, 0x3d	; 61
     e16:	de b7       	in	r29, 0x3e	; 62
     e18:	ad 97       	sbiw	r28, 0x2d	; 45
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /* enable Global interrupt*/
     e24:	af e5       	ldi	r26, 0x5F	; 95
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	ef e5       	ldi	r30, 0x5F	; 95
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	8c 93       	st	X, r24
	uint8 i,menu,j=0;
     e32:	18 8a       	std	Y+16, r1	; 0x10
	uint8 pass_matching_state = MATCHED;
     e34:	8f e0       	ldi	r24, 0x0F	; 15
     e36:	8f 87       	std	Y+15, r24	; 0x0f
	uint8 arr1[7];/* array to store the pass sent by UART*/
	uint8 arr2[7];/* array to store the pass sent by UART*/

	TWI_ConfigType twi_config = {0x01,0x02}; /* create a structure to configure TWI*/
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	89 a3       	std	Y+33, r24	; 0x21
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	8a a3       	std	Y+34, r24	; 0x22
		 * 0 initial value
		 * compare value =23437
		 * CPU frequency divided by 1024 prescale
		 * timer compare mode
		 */
	Timer1_ConfigType Timer_Conf={0,23437,CLOCK_BY_1024,COMPARE_MODE,};
     e40:	ce 01       	movw	r24, r28
     e42:	83 96       	adiw	r24, 0x23	; 35
     e44:	9a a7       	std	Y+42, r25	; 0x2a
     e46:	89 a7       	std	Y+41, r24	; 0x29
     e48:	ef e6       	ldi	r30, 0x6F	; 111
     e4a:	f1 e0       	ldi	r31, 0x01	; 1
     e4c:	fc a7       	std	Y+44, r31	; 0x2c
     e4e:	eb a7       	std	Y+43, r30	; 0x2b
     e50:	f6 e0       	ldi	r31, 0x06	; 6
     e52:	fd a7       	std	Y+45, r31	; 0x2d
     e54:	eb a5       	ldd	r30, Y+43	; 0x2b
     e56:	fc a5       	ldd	r31, Y+44	; 0x2c
     e58:	00 80       	ld	r0, Z
     e5a:	8b a5       	ldd	r24, Y+43	; 0x2b
     e5c:	9c a5       	ldd	r25, Y+44	; 0x2c
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	9c a7       	std	Y+44, r25	; 0x2c
     e62:	8b a7       	std	Y+43, r24	; 0x2b
     e64:	e9 a5       	ldd	r30, Y+41	; 0x29
     e66:	fa a5       	ldd	r31, Y+42	; 0x2a
     e68:	00 82       	st	Z, r0
     e6a:	89 a5       	ldd	r24, Y+41	; 0x29
     e6c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	9a a7       	std	Y+42, r25	; 0x2a
     e72:	89 a7       	std	Y+41, r24	; 0x29
     e74:	9d a5       	ldd	r25, Y+45	; 0x2d
     e76:	91 50       	subi	r25, 0x01	; 1
     e78:	9d a7       	std	Y+45, r25	; 0x2d
     e7a:	ed a5       	ldd	r30, Y+45	; 0x2d
     e7c:	ee 23       	and	r30, r30
     e7e:	51 f7       	brne	.-44     	; 0xe54 <main+0x44>


	/* Set the Call back function pointer in the timer driver */
	Timer1_setCallBack(delay_3SEC);
     e80:	8c ef       	ldi	r24, 0xFC	; 252
     e82:	96 e0       	ldi	r25, 0x06	; 6
     e84:	0e 94 33 0e 	call	0x1c66	; 0x1c66 <Timer1_setCallBack>

	/* Initialize UART,TWI,DCMotor and Buzzer drivers */
	UART_init(&g_uartConfiguration);
     e88:	88 e6       	ldi	r24, 0x68	; 104
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <UART_init>
	TWI_init(&twi_config);
     e90:	ce 01       	movw	r24, r28
     e92:	81 96       	adiw	r24, 0x21	; 33
     e94:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <TWI_init>
	DcMotor_Init();
     e98:	0e 94 de 08 	call	0x11bc	; 0x11bc <DcMotor_Init>
	Buzzer_init();
     e9c:	0e 94 b5 08 	call	0x116a	; 0x116a <Buzzer_init>

	while(1)
	{
		pass_matching_state=MATCHED;
     ea0:	8f e0       	ldi	r24, 0x0F	; 15
     ea2:	8f 87       	std	Y+15, r24	; 0x0f
		/* wait until the MC1 finished its operations and it is start sending*/
		while(UART_recieveByte() != MC1_READY){}
     ea4:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <UART_recieveByte>
     ea8:	80 31       	cpi	r24, 0x10	; 16
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <main+0x94>
		UART_receiveString(arr1);/* Receive first pass and store it in array1*/
     eac:	ce 01       	movw	r24, r28
     eae:	43 96       	adiw	r24, 0x13	; 19
     eb0:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveString>
		UART_receiveString(arr2);/* Receive second pass and store it in array2*/
     eb4:	ce 01       	movw	r24, r28
     eb6:	4a 96       	adiw	r24, 0x1a	; 26
     eb8:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveString>

		for(i=0;i<7;i++)
     ebc:	1a 8a       	std	Y+18, r1	; 0x12
     ebe:	1a c0       	rjmp	.+52     	; 0xef4 <main+0xe4>
		{
			if(arr1[i] != arr2[i]) /* if any elements in the passes is not matched*/
     ec0:	8a 89       	ldd	r24, Y+18	; 0x12
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	ce 01       	movw	r24, r28
     ec8:	43 96       	adiw	r24, 0x13	; 19
     eca:	fc 01       	movw	r30, r24
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	40 81       	ld	r20, Z
     ed2:	8a 89       	ldd	r24, Y+18	; 0x12
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	ce 01       	movw	r24, r28
     eda:	4a 96       	adiw	r24, 0x1a	; 26
     edc:	fc 01       	movw	r30, r24
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	80 81       	ld	r24, Z
     ee4:	48 17       	cp	r20, r24
     ee6:	19 f0       	breq	.+6      	; 0xeee <main+0xde>
			{
				pass_matching_state = UNMATCHED; /* save unmatched in pass_matching_state*/
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	8f 87       	std	Y+15, r24	; 0x0f
     eec:	06 c0       	rjmp	.+12     	; 0xefa <main+0xea>
		/* wait until the MC1 finished its operations and it is start sending*/
		while(UART_recieveByte() != MC1_READY){}
		UART_receiveString(arr1);/* Receive first pass and store it in array1*/
		UART_receiveString(arr2);/* Receive second pass and store it in array2*/

		for(i=0;i<7;i++)
     eee:	8a 89       	ldd	r24, Y+18	; 0x12
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	8a 8b       	std	Y+18, r24	; 0x12
     ef4:	8a 89       	ldd	r24, Y+18	; 0x12
     ef6:	87 30       	cpi	r24, 0x07	; 7
     ef8:	18 f3       	brcs	.-58     	; 0xec0 <main+0xb0>
				pass_matching_state = UNMATCHED; /* save unmatched in pass_matching_state*/
				break; /* break the current loop*/
			}
		}

		UART_sendByte(MC1_READY);/* send MC1_READY to the HMI ECU to notice him i'm start sending*/
     efa:	80 e1       	ldi	r24, 0x10	; 16
     efc:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
		UART_sendByte(pass_matching_state); /* send the matching state*/
     f00:	8f 85       	ldd	r24, Y+15	; 0x0f
     f02:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>

		if(pass_matching_state == MATCHED)
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	8f 30       	cpi	r24, 0x0F	; 15
     f0a:	51 f6       	brne	.-108    	; 0xea0 <main+0x90>
		{
			/* save the matched pass in the EEPROM*/
			for(i=0;i<5;i++)
     f0c:	1a 8a       	std	Y+18, r1	; 0x12
     f0e:	88 c0       	rjmp	.+272    	; 0x1020 <main+0x210>
			{
				EEPROM_writeByte((0x0310+i), arr1[i]);
     f10:	8a 89       	ldd	r24, Y+18	; 0x12
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	80 5f       	subi	r24, 0xF0	; 240
     f18:	9c 4f       	sbci	r25, 0xFC	; 252
     f1a:	ac 01       	movw	r20, r24
     f1c:	8a 89       	ldd	r24, Y+18	; 0x12
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	ce 01       	movw	r24, r28
     f24:	43 96       	adiw	r24, 0x13	; 19
     f26:	fc 01       	movw	r30, r24
     f28:	e2 0f       	add	r30, r18
     f2a:	f3 1f       	adc	r31, r19
     f2c:	20 81       	ld	r18, Z
     f2e:	ca 01       	movw	r24, r20
     f30:	62 2f       	mov	r22, r18
     f32:	0e 94 3e 09 	call	0x127c	; 0x127c <EEPROM_writeByte>
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e2       	ldi	r26, 0x20	; 32
     f3c:	b1 e4       	ldi	r27, 0x41	; 65
     f3e:	8b 87       	std	Y+11, r24	; 0x0b
     f40:	9c 87       	std	Y+12, r25	; 0x0c
     f42:	ad 87       	std	Y+13, r26	; 0x0d
     f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f46:	6b 85       	ldd	r22, Y+11	; 0x0b
     f48:	7c 85       	ldd	r23, Y+12	; 0x0c
     f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a ef       	ldi	r20, 0xFA	; 250
     f54:	54 e4       	ldi	r21, 0x44	; 68
     f56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	8f 83       	std	Y+7, r24	; 0x07
     f60:	98 87       	std	Y+8, r25	; 0x08
     f62:	a9 87       	std	Y+9, r26	; 0x09
     f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f66:	6f 81       	ldd	r22, Y+7	; 0x07
     f68:	78 85       	ldd	r23, Y+8	; 0x08
     f6a:	89 85       	ldd	r24, Y+9	; 0x09
     f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	2c f4       	brge	.+10     	; 0xf88 <main+0x178>
		__ticks = 1;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	3f c0       	rjmp	.+126    	; 0x1006 <main+0x1f6>
	else if (__tmp > 65535)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	3f ef       	ldi	r19, 0xFF	; 255
     f94:	4f e7       	ldi	r20, 0x7F	; 127
     f96:	57 e4       	ldi	r21, 0x47	; 71
     f98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f9c:	18 16       	cp	r1, r24
     f9e:	4c f5       	brge	.+82     	; 0xff2 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
     fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	40 e2       	ldi	r20, 0x20	; 32
     fae:	51 e4       	ldi	r21, 0x41	; 65
     fb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	0f c0       	rjmp	.+30     	; 0xfe8 <main+0x1d8>
     fca:	88 ec       	ldi	r24, 0xC8	; 200
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9c 83       	std	Y+4, r25	; 0x04
     fd0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	9c 81       	ldd	r25, Y+4	; 0x04
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <main+0x1c6>
     fda:	9c 83       	std	Y+4, r25	; 0x04
     fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	00 97       	sbiw	r24, 0x00	; 0
     fee:	69 f7       	brne	.-38     	; 0xfca <main+0x1ba>
     ff0:	14 c0       	rjmp	.+40     	; 0x101a <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ff2:	6f 81       	ldd	r22, Y+7	; 0x07
     ff4:	78 85       	ldd	r23, Y+8	; 0x08
     ff6:	89 85       	ldd	r24, Y+9	; 0x09
     ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
     ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	8d 83       	std	Y+5, r24	; 0x05
    1006:	8d 81       	ldd	r24, Y+5	; 0x05
    1008:	9e 81       	ldd	r25, Y+6	; 0x06
    100a:	9a 83       	std	Y+2, r25	; 0x02
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	89 81       	ldd	r24, Y+1	; 0x01
    1010:	9a 81       	ldd	r25, Y+2	; 0x02
    1012:	01 97       	sbiw	r24, 0x01	; 1
    1014:	f1 f7       	brne	.-4      	; 0x1012 <main+0x202>
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(pass_matching_state); /* send the matching state*/

		if(pass_matching_state == MATCHED)
		{
			/* save the matched pass in the EEPROM*/
			for(i=0;i<5;i++)
    101a:	8a 89       	ldd	r24, Y+18	; 0x12
    101c:	8f 5f       	subi	r24, 0xFF	; 255
    101e:	8a 8b       	std	Y+18, r24	; 0x12
    1020:	8a 89       	ldd	r24, Y+18	; 0x12
    1022:	85 30       	cpi	r24, 0x05	; 5
    1024:	08 f4       	brcc	.+2      	; 0x1028 <main+0x218>
    1026:	74 cf       	rjmp	.-280    	; 0xf10 <main+0x100>
			{
				EEPROM_writeByte((0x0310+i), arr1[i]);
				_delay_ms(10);
			}
			/* loop to repeat receiving the pass 3 times*/
			j=0;
    1028:	18 8a       	std	Y+16, r1	; 0x10
    102a:	7f c0       	rjmp	.+254    	; 0x112a <main+0x31a>
			while(j<3)
			{
				pass_matching_state=MATCHED;
    102c:	8f e0       	ldi	r24, 0x0F	; 15
    102e:	8f 87       	std	Y+15, r24	; 0x0f
				while(UART_recieveByte() != MC1_READY){}
    1030:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <UART_recieveByte>
    1034:	80 31       	cpi	r24, 0x10	; 16
    1036:	e1 f7       	brne	.-8      	; 0x1030 <main+0x220>
				UART_receiveString(arr1); /* receive the menu pass*/
    1038:	ce 01       	movw	r24, r28
    103a:	43 96       	adiw	r24, 0x13	; 19
    103c:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <UART_receiveString>
				menu=UART_recieveByte();/* receive the running operation symbol*/
    1040:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <UART_recieveByte>
    1044:	89 8b       	std	Y+17, r24	; 0x11
				/* check if the sent pass matched with saved pass in the EEPROM */
				for(i=0;i<5;i++)
    1046:	1a 8a       	std	Y+18, r1	; 0x12
    1048:	2c c0       	rjmp	.+88     	; 0x10a2 <main+0x292>
				{
					EEPROM_readByte((0x0310+i), &arr2[i]); /* store the saved pass in EEPROM in arra2*/
    104a:	8a 89       	ldd	r24, Y+18	; 0x12
    104c:	88 2f       	mov	r24, r24
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	80 5f       	subi	r24, 0xF0	; 240
    1052:	9c 4f       	sbci	r25, 0xFC	; 252
    1054:	ac 01       	movw	r20, r24
    1056:	8a 89       	ldd	r24, Y+18	; 0x12
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	9e 01       	movw	r18, r28
    105e:	26 5e       	subi	r18, 0xE6	; 230
    1060:	3f 4f       	sbci	r19, 0xFF	; 255
    1062:	28 0f       	add	r18, r24
    1064:	39 1f       	adc	r19, r25
    1066:	ca 01       	movw	r24, r20
    1068:	b9 01       	movw	r22, r18
    106a:	0e 94 7f 09 	call	0x12fe	; 0x12fe <EEPROM_readByte>
					if(arr1[i] !=arr2[i] )/* if the passes is not matched*/
    106e:	8a 89       	ldd	r24, Y+18	; 0x12
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	ce 01       	movw	r24, r28
    1076:	43 96       	adiw	r24, 0x13	; 19
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	40 81       	ld	r20, Z
    1080:	8a 89       	ldd	r24, Y+18	; 0x12
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	4a 96       	adiw	r24, 0x1a	; 26
    108a:	fc 01       	movw	r30, r24
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	80 81       	ld	r24, Z
    1092:	48 17       	cp	r20, r24
    1094:	19 f0       	breq	.+6      	; 0x109c <main+0x28c>
					{
						pass_matching_state = UNMATCHED;
    1096:	8f ef       	ldi	r24, 0xFF	; 255
    1098:	8f 87       	std	Y+15, r24	; 0x0f
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <main+0x298>
				pass_matching_state=MATCHED;
				while(UART_recieveByte() != MC1_READY){}
				UART_receiveString(arr1); /* receive the menu pass*/
				menu=UART_recieveByte();/* receive the running operation symbol*/
				/* check if the sent pass matched with saved pass in the EEPROM */
				for(i=0;i<5;i++)
    109c:	8a 89       	ldd	r24, Y+18	; 0x12
    109e:	8f 5f       	subi	r24, 0xFF	; 255
    10a0:	8a 8b       	std	Y+18, r24	; 0x12
    10a2:	8a 89       	ldd	r24, Y+18	; 0x12
    10a4:	85 30       	cpi	r24, 0x05	; 5
    10a6:	88 f2       	brcs	.-94     	; 0x104a <main+0x23a>
						pass_matching_state = UNMATCHED;
						break;/* break the current loop*/
					}
				}

				UART_sendByte(MC1_READY);
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
				UART_sendByte(pass_matching_state);
    10ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b0:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
				if((pass_matching_state == MATCHED)&& (menu=='+'))
    10b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b6:	8f 30       	cpi	r24, 0x0F	; 15
    10b8:	61 f5       	brne	.+88     	; 0x1112 <main+0x302>
    10ba:	89 89       	ldd	r24, Y+17	; 0x11
    10bc:	8b 32       	cpi	r24, 0x2B	; 43
    10be:	49 f5       	brne	.+82     	; 0x1112 <main+0x302>
				{

					/*turn on the motor CW with 100% of its maximum speed.*/
					DcMotor_Rotate(CLOCK_WISE,100);
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	64 e6       	ldi	r22, 0x64	; 100
    10c4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DcMotor_Rotate>
					Timer1_init(&Timer_Conf); /* Initialize timer 1*/
    10c8:	ce 01       	movw	r24, r28
    10ca:	83 96       	adiw	r24, 0x23	; 35
    10cc:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <Timer1_init>
					while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
    10d0:	80 91 76 01 	lds	r24, 0x0176
    10d4:	85 30       	cpi	r24, 0x05	; 5
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <main+0x2c0>
					g_tick=0;/* clear the g_tick for next time*/
    10d8:	10 92 76 01 	sts	0x0176, r1
					/*turn off the motor*/
					DcMotor_Rotate(STOP,0);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	60 e0       	ldi	r22, 0x00	; 0
    10e0:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DcMotor_Rotate>
					while(g_tick!=1){}/* wait until the g_tick increment to 1 (1*3=3SEC)*/
    10e4:	80 91 76 01 	lds	r24, 0x0176
    10e8:	81 30       	cpi	r24, 0x01	; 1
    10ea:	e1 f7       	brne	.-8      	; 0x10e4 <main+0x2d4>
					g_tick=0;/* clear the g_tick for next time*/
    10ec:	10 92 76 01 	sts	0x0176, r1
					/*turn on the motor CW with 100% of its maximum speed.*/
					DcMotor_Rotate(ANTI_CLOCK_WISE,100);
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	64 e6       	ldi	r22, 0x64	; 100
    10f4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DcMotor_Rotate>
					while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
    10f8:	80 91 76 01 	lds	r24, 0x0176
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <main+0x2e8>
					g_tick=0;/* clear the g_tick for next time*/
    1100:	10 92 76 01 	sts	0x0176, r1
					Timer1_deInit();/* deinit timer 1*/
    1104:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Timer1_deInit>
					/*stop the motor*/
					DcMotor_Rotate(STOP,0);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	60 e0       	ldi	r22, 0x00	; 0
    110c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <DcMotor_Rotate>
    1110:	10 c0       	rjmp	.+32     	; 0x1132 <main+0x322>
					break;/* break the current loop*/

				}
				else if((pass_matching_state == MATCHED)&& (menu=='-'))
    1112:	8f 85       	ldd	r24, Y+15	; 0x0f
    1114:	8f 30       	cpi	r24, 0x0F	; 15
    1116:	19 f4       	brne	.+6      	; 0x111e <main+0x30e>
    1118:	89 89       	ldd	r24, Y+17	; 0x11
    111a:	8d 32       	cpi	r24, 0x2D	; 45
    111c:	51 f0       	breq	.+20     	; 0x1132 <main+0x322>
				{
					break;/* break the current loop*/

				}
				else if((pass_matching_state == UNMATCHED))
    111e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1120:	8f 3f       	cpi	r24, 0xFF	; 255
    1122:	19 f4       	brne	.+6      	; 0x112a <main+0x31a>
				{
					j++;/* increment the loop index*/
    1124:	88 89       	ldd	r24, Y+16	; 0x10
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	88 8b       	std	Y+16, r24	; 0x10
				EEPROM_writeByte((0x0310+i), arr1[i]);
				_delay_ms(10);
			}
			/* loop to repeat receiving the pass 3 times*/
			j=0;
			while(j<3)
    112a:	88 89       	ldd	r24, Y+16	; 0x10
    112c:	83 30       	cpi	r24, 0x03	; 3
    112e:	08 f4       	brcc	.+2      	; 0x1132 <main+0x322>
    1130:	7d cf       	rjmp	.-262    	; 0x102c <main+0x21c>
					j++;/* increment the loop index*/
					continue; /* skip this iteration*/
				}
			}
			/* if the pass unmatched 3 times do the following code*/
			if(j==3)
    1132:	88 89       	ldd	r24, Y+16	; 0x10
    1134:	83 30       	cpi	r24, 0x03	; 3
    1136:	09 f0       	breq	.+2      	; 0x113a <main+0x32a>
    1138:	b3 ce       	rjmp	.-666    	; 0xea0 <main+0x90>
			{
				UART_sendByte(MC1_READY);
    113a:	80 e1       	ldi	r24, 0x10	; 16
    113c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
				UART_sendByte(UNMATCHED);
    1140:	8f ef       	ldi	r24, 0xFF	; 255
    1142:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
				Buzzer_on(); /* turn on the buzzer*/
    1146:	0e 94 c6 08 	call	0x118c	; 0x118c <Buzzer_on>
				Timer1_init(&Timer_Conf);/* Initialize timer 1*/
    114a:	ce 01       	movw	r24, r28
    114c:	83 96       	adiw	r24, 0x23	; 35
    114e:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <Timer1_init>
				while(g_tick!=20){}/* wait until the g_tick increment to 20 (20*3=60SEC=1minute)*/
    1152:	80 91 76 01 	lds	r24, 0x0176
    1156:	84 31       	cpi	r24, 0x14	; 20
    1158:	e1 f7       	brne	.-8      	; 0x1152 <main+0x342>
				g_tick=0;/* clear the g_tick for next time*/
    115a:	10 92 76 01 	sts	0x0176, r1
				Timer1_deInit();/* deinit timer 1*/
    115e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <Timer1_deInit>
				Buzzer_off();/* turn off the buzzer*/
    1162:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <Buzzer_off>
				j=0;
    1166:	18 8a       	std	Y+16, r1	; 0x10
    1168:	9b ce       	rjmp	.-714    	; 0xea0 <main+0x90>

0000116a <Buzzer_init>:
 *******************************************************************************/
/* Description:
 * Setup the direction for the buzzer pin as output pin through the GPIO driver.
 * Turn off the buzzer through the GPIO. */
void Buzzer_init(void)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
	/* set PA0 as output pin*/
	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	41 e0       	ldi	r20, 0x01	; 1
    1178:	0e 94 df 09 	call	0x13be	; 0x13be <GPIO_setupPinDirection>
	/* write LOGIC_LOW(0) on PA0*/
	GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	60 e0       	ldi	r22, 0x00	; 0
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <Buzzer_on>:

/* Description:
 * Function to enable the Buzzer through the GPIO.*/
void Buzzer_on(void)
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	/* write LOGIC_HIGH(1) on PA0*/
	GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_HIGH);
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>

}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <Buzzer_off>:

/* Description:
 * Function to disable the Buzzer through the GPIO.*/
void Buzzer_off(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	/* write LOGIC_LOW(0) on PA0*/
	GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
}
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <DcMotor_Init>:
 * The Function responsible for setup the direction for the two
   motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT1_ID, PIN_OUTPUT);
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	41 e0       	ldi	r20, 0x01	; 1
    11ca:	0e 94 df 09 	call	0x13be	; 0x13be <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT2_ID, PIN_OUTPUT);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	41 e0       	ldi	r20, 0x01	; 1
    11d4:	0e 94 df 09 	call	0x13be	; 0x13be <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT1_ID, LOGIC_LOW);
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT2_ID, LOGIC_LOW);
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	61 e0       	ldi	r22, 0x01	; 1
    11e6:	40 e0       	ldi	r20, 0x00	; 0
    11e8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
}
    11ec:	cf 91       	pop	r28
    11ee:	df 91       	pop	r29
    11f0:	08 95       	ret

000011f2 <DcMotor_Rotate>:
 * The function responsible for rotate the DC Motor CW/ or A-CW or
   stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	00 d0       	rcall	.+0      	; 0x11f8 <DcMotor_Rotate+0x6>
    11f8:	00 d0       	rcall	.+0      	; 0x11fa <DcMotor_Rotate+0x8>
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	6a 83       	std	Y+2, r22	; 0x02

	switch(state)
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	28 2f       	mov	r18, r24
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	3c 83       	std	Y+4, r19	; 0x04
    120a:	2b 83       	std	Y+3, r18	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	91 05       	cpc	r25, r1
    1214:	a1 f0       	breq	.+40     	; 0x123e <DcMotor_Rotate+0x4c>
    1216:	2b 81       	ldd	r18, Y+3	; 0x03
    1218:	3c 81       	ldd	r19, Y+4	; 0x04
    121a:	22 30       	cpi	r18, 0x02	; 2
    121c:	31 05       	cpc	r19, r1
    121e:	d1 f0       	breq	.+52     	; 0x1254 <DcMotor_Rotate+0x62>
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	00 97       	sbiw	r24, 0x00	; 0
    1226:	01 f5       	brne	.+64     	; 0x1268 <DcMotor_Rotate+0x76>
	{
	case STOP:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT1_ID, LOGIC_LOW);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT2_ID, LOGIC_LOW);
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
    123c:	15 c0       	rjmp	.+42     	; 0x1268 <DcMotor_Rotate+0x76>
		break;
	case CLOCK_WISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT1_ID, LOGIC_HIGH);
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT2_ID, LOGIC_LOW);
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
    1252:	0a c0       	rjmp	.+20     	; 0x1268 <DcMotor_Rotate+0x76>
		break;
	case ANTI_CLOCK_WISE:
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT1_ID, LOGIC_LOW);
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_PORT_ID, DC_MOTOR_INPUT2_ID, LOGIC_HIGH);
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	61 e0       	ldi	r22, 0x01	; 1
    1262:	41 e0       	ldi	r20, 0x01	; 1
    1264:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GPIO_writePin>
		break;
	}
	PWM_Timer0_Start(speed);
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <PWM_Timer0_Start>
	}
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <EEPROM_writeByte+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <EEPROM_writeByte+0x8>
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
    1288:	9a 83       	std	Y+2, r25	; 0x02
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    128e:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1292:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    1296:	88 30       	cpi	r24, 0x08	; 8
    1298:	11 f0       	breq	.+4      	; 0x129e <EEPROM_writeByte+0x22>
        return ERROR;
    129a:	1c 82       	std	Y+4, r1	; 0x04
    129c:	28 c0       	rjmp	.+80     	; 0x12ee <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    129e:	89 81       	ldd	r24, Y+1	; 0x01
    12a0:	9a 81       	ldd	r25, Y+2	; 0x02
    12a2:	80 70       	andi	r24, 0x00	; 0
    12a4:	97 70       	andi	r25, 0x07	; 7
    12a6:	88 0f       	add	r24, r24
    12a8:	89 2f       	mov	r24, r25
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 0b       	sbc	r25, r25
    12ae:	91 95       	neg	r25
    12b0:	80 6a       	ori	r24, 0xA0	; 160
    12b2:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12b6:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    12ba:	88 31       	cpi	r24, 0x18	; 24
    12bc:	11 f0       	breq	.+4      	; 0x12c2 <EEPROM_writeByte+0x46>
        return ERROR; 
    12be:	1c 82       	std	Y+4, r1	; 0x04
    12c0:	16 c0       	rjmp	.+44     	; 0x12ee <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12c8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    12cc:	88 32       	cpi	r24, 0x28	; 40
    12ce:	11 f0       	breq	.+4      	; 0x12d4 <EEPROM_writeByte+0x58>
        return ERROR;
    12d0:	1c 82       	std	Y+4, r1	; 0x04
    12d2:	0d c0       	rjmp	.+26     	; 0x12ee <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    12d4:	8b 81       	ldd	r24, Y+3	; 0x03
    12d6:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12da:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    12de:	88 32       	cpi	r24, 0x28	; 40
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <EEPROM_writeByte+0x6a>
        return ERROR;
    12e2:	1c 82       	std	Y+4, r1	; 0x04
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    12e6:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <TWI_stop>
	
    return SUCCESS;
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	8c 83       	std	Y+4, r24	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12f0:	0f 90       	pop	r0
    12f2:	0f 90       	pop	r0
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	cf 91       	pop	r28
    12fa:	df 91       	pop	r29
    12fc:	08 95       	ret

000012fe <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    12fe:	df 93       	push	r29
    1300:	cf 93       	push	r28
    1302:	00 d0       	rcall	.+0      	; 0x1304 <EEPROM_readByte+0x6>
    1304:	00 d0       	rcall	.+0      	; 0x1306 <EEPROM_readByte+0x8>
    1306:	0f 92       	push	r0
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	9a 83       	std	Y+2, r25	; 0x02
    130e:	89 83       	std	Y+1, r24	; 0x01
    1310:	7c 83       	std	Y+4, r23	; 0x04
    1312:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1314:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1318:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    131c:	88 30       	cpi	r24, 0x08	; 8
    131e:	11 f0       	breq	.+4      	; 0x1324 <EEPROM_readByte+0x26>
        return ERROR;
    1320:	1d 82       	std	Y+5, r1	; 0x05
    1322:	44 c0       	rjmp	.+136    	; 0x13ac <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	9a 81       	ldd	r25, Y+2	; 0x02
    1328:	80 70       	andi	r24, 0x00	; 0
    132a:	97 70       	andi	r25, 0x07	; 7
    132c:	88 0f       	add	r24, r24
    132e:	89 2f       	mov	r24, r25
    1330:	88 1f       	adc	r24, r24
    1332:	99 0b       	sbc	r25, r25
    1334:	91 95       	neg	r25
    1336:	80 6a       	ori	r24, 0xA0	; 160
    1338:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    133c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    1340:	88 31       	cpi	r24, 0x18	; 24
    1342:	11 f0       	breq	.+4      	; 0x1348 <EEPROM_readByte+0x4a>
        return ERROR;
    1344:	1d 82       	std	Y+5, r1	; 0x05
    1346:	32 c0       	rjmp	.+100    	; 0x13ac <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    134e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    1352:	88 32       	cpi	r24, 0x28	; 40
    1354:	11 f0       	breq	.+4      	; 0x135a <EEPROM_readByte+0x5c>
        return ERROR;
    1356:	1d 82       	std	Y+5, r1	; 0x05
    1358:	29 c0       	rjmp	.+82     	; 0x13ac <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    135a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    135e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    1362:	80 31       	cpi	r24, 0x10	; 16
    1364:	11 f0       	breq	.+4      	; 0x136a <EEPROM_readByte+0x6c>
        return ERROR;
    1366:	1d 82       	std	Y+5, r1	; 0x05
    1368:	21 c0       	rjmp	.+66     	; 0x13ac <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	80 70       	andi	r24, 0x00	; 0
    1370:	97 70       	andi	r25, 0x07	; 7
    1372:	88 0f       	add	r24, r24
    1374:	89 2f       	mov	r24, r25
    1376:	88 1f       	adc	r24, r24
    1378:	99 0b       	sbc	r25, r25
    137a:	91 95       	neg	r25
    137c:	81 6a       	ori	r24, 0xA1	; 161
    137e:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1382:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    1386:	80 34       	cpi	r24, 0x40	; 64
    1388:	11 f0       	breq	.+4      	; 0x138e <EEPROM_readByte+0x90>
        return ERROR;
    138a:	1d 82       	std	Y+5, r1	; 0x05
    138c:	0f c0       	rjmp	.+30     	; 0x13ac <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    138e:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <TWI_readByteWithNACK>
    1392:	eb 81       	ldd	r30, Y+3	; 0x03
    1394:	fc 81       	ldd	r31, Y+4	; 0x04
    1396:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1398:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_getStatus>
    139c:	88 35       	cpi	r24, 0x58	; 88
    139e:	11 f0       	breq	.+4      	; 0x13a4 <EEPROM_readByte+0xa6>
        return ERROR;
    13a0:	1d 82       	std	Y+5, r1	; 0x05
    13a2:	04 c0       	rjmp	.+8      	; 0x13ac <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    13a4:	0e 94 74 0e 	call	0x1ce8	; 0x1ce8 <TWI_stop>

    return SUCCESS;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	08 95       	ret

000013be <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <GPIO_setupPinDirection+0x6>
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <GPIO_setupPinDirection+0x8>
    13c6:	0f 92       	push	r0
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	6a 83       	std	Y+2, r22	; 0x02
    13d0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	08 f0       	brcs	.+2      	; 0x13da <GPIO_setupPinDirection+0x1c>
    13d8:	d5 c0       	rjmp	.+426    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <GPIO_setupPinDirection+0x24>
    13e0:	d1 c0       	rjmp	.+418    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	3d 83       	std	Y+5, r19	; 0x05
    13ea:	2c 83       	std	Y+4, r18	; 0x04
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	9d 81       	ldd	r25, Y+5	; 0x05
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	91 05       	cpc	r25, r1
    13f4:	09 f4       	brne	.+2      	; 0x13f8 <GPIO_setupPinDirection+0x3a>
    13f6:	43 c0       	rjmp	.+134    	; 0x147e <GPIO_setupPinDirection+0xc0>
    13f8:	2c 81       	ldd	r18, Y+4	; 0x04
    13fa:	3d 81       	ldd	r19, Y+5	; 0x05
    13fc:	22 30       	cpi	r18, 0x02	; 2
    13fe:	31 05       	cpc	r19, r1
    1400:	2c f4       	brge	.+10     	; 0x140c <GPIO_setupPinDirection+0x4e>
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	9d 81       	ldd	r25, Y+5	; 0x05
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	71 f0       	breq	.+28     	; 0x1426 <GPIO_setupPinDirection+0x68>
    140a:	bc c0       	rjmp	.+376    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
    140c:	2c 81       	ldd	r18, Y+4	; 0x04
    140e:	3d 81       	ldd	r19, Y+5	; 0x05
    1410:	22 30       	cpi	r18, 0x02	; 2
    1412:	31 05       	cpc	r19, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <GPIO_setupPinDirection+0x5a>
    1416:	5f c0       	rjmp	.+190    	; 0x14d6 <GPIO_setupPinDirection+0x118>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	9d 81       	ldd	r25, Y+5	; 0x05
    141c:	83 30       	cpi	r24, 0x03	; 3
    141e:	91 05       	cpc	r25, r1
    1420:	09 f4       	brne	.+2      	; 0x1424 <GPIO_setupPinDirection+0x66>
    1422:	85 c0       	rjmp	.+266    	; 0x152e <GPIO_setupPinDirection+0x170>
    1424:	af c0       	rjmp	.+350    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	81 30       	cpi	r24, 0x01	; 1
    142a:	a1 f4       	brne	.+40     	; 0x1454 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    142c:	aa e3       	ldi	r26, 0x3A	; 58
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	ea e3       	ldi	r30, 0x3A	; 58
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	48 2f       	mov	r20, r24
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	02 2e       	mov	r0, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <GPIO_setupPinDirection+0x8c>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	0a 94       	dec	r0
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <GPIO_setupPinDirection+0x88>
    144e:	84 2b       	or	r24, r20
    1450:	8c 93       	st	X, r24
    1452:	98 c0       	rjmp	.+304    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1454:	aa e3       	ldi	r26, 0x3A	; 58
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	ea e3       	ldi	r30, 0x3A	; 58
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <GPIO_setupPinDirection+0xb4>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <GPIO_setupPinDirection+0xb0>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
    147c:	83 c0       	rjmp	.+262    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	a1 f4       	brne	.+40     	; 0x14ac <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1484:	a7 e3       	ldi	r26, 0x37	; 55
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e7 e3       	ldi	r30, 0x37	; 55
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	48 2f       	mov	r20, r24
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	02 2e       	mov	r0, r18
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <GPIO_setupPinDirection+0xe4>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	0a 94       	dec	r0
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <GPIO_setupPinDirection+0xe0>
    14a6:	84 2b       	or	r24, r20
    14a8:	8c 93       	st	X, r24
    14aa:	6c c0       	rjmp	.+216    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14ac:	a7 e3       	ldi	r26, 0x37	; 55
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e7 e3       	ldi	r30, 0x37	; 55
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <GPIO_setupPinDirection+0x10c>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <GPIO_setupPinDirection+0x108>
    14ce:	80 95       	com	r24
    14d0:	84 23       	and	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	57 c0       	rjmp	.+174    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	a1 f4       	brne	.+40     	; 0x1504 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14dc:	a4 e3       	ldi	r26, 0x34	; 52
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e4 e3       	ldi	r30, 0x34	; 52
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	48 2f       	mov	r20, r24
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	02 2e       	mov	r0, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <GPIO_setupPinDirection+0x13c>
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	0a 94       	dec	r0
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <GPIO_setupPinDirection+0x138>
    14fe:	84 2b       	or	r24, r20
    1500:	8c 93       	st	X, r24
    1502:	40 c0       	rjmp	.+128    	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1504:	a4 e3       	ldi	r26, 0x34	; 52
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	e4 e3       	ldi	r30, 0x34	; 52
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_setupPinDirection+0x164>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_setupPinDirection+0x160>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
    152c:	2b c0       	rjmp	.+86     	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    152e:	8b 81       	ldd	r24, Y+3	; 0x03
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	a1 f4       	brne	.+40     	; 0x155c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1534:	a1 e3       	ldi	r26, 0x31	; 49
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e1 e3       	ldi	r30, 0x31	; 49
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <GPIO_setupPinDirection+0x194>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <GPIO_setupPinDirection+0x190>
    1556:	84 2b       	or	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    155c:	a1 e3       	ldi	r26, 0x31	; 49
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e1 e3       	ldi	r30, 0x31	; 49
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_setupPinDirection+0x1bc>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_setupPinDirection+0x1b8>
    157e:	80 95       	com	r24
    1580:	84 23       	and	r24, r20
    1582:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	00 d0       	rcall	.+0      	; 0x159a <GPIO_writePin+0x6>
    159a:	00 d0       	rcall	.+0      	; 0x159c <GPIO_writePin+0x8>
    159c:	0f 92       	push	r0
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	6a 83       	std	Y+2, r22	; 0x02
    15a6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 30       	cpi	r24, 0x08	; 8
    15ac:	08 f0       	brcs	.+2      	; 0x15b0 <GPIO_writePin+0x1c>
    15ae:	d5 c0       	rjmp	.+426    	; 0x175a <GPIO_writePin+0x1c6>
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	08 f0       	brcs	.+2      	; 0x15b8 <GPIO_writePin+0x24>
    15b6:	d1 c0       	rjmp	.+418    	; 0x175a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3d 83       	std	Y+5, r19	; 0x05
    15c0:	2c 83       	std	Y+4, r18	; 0x04
    15c2:	8c 81       	ldd	r24, Y+4	; 0x04
    15c4:	9d 81       	ldd	r25, Y+5	; 0x05
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <GPIO_writePin+0x3a>
    15cc:	43 c0       	rjmp	.+134    	; 0x1654 <GPIO_writePin+0xc0>
    15ce:	2c 81       	ldd	r18, Y+4	; 0x04
    15d0:	3d 81       	ldd	r19, Y+5	; 0x05
    15d2:	22 30       	cpi	r18, 0x02	; 2
    15d4:	31 05       	cpc	r19, r1
    15d6:	2c f4       	brge	.+10     	; 0x15e2 <GPIO_writePin+0x4e>
    15d8:	8c 81       	ldd	r24, Y+4	; 0x04
    15da:	9d 81       	ldd	r25, Y+5	; 0x05
    15dc:	00 97       	sbiw	r24, 0x00	; 0
    15de:	71 f0       	breq	.+28     	; 0x15fc <GPIO_writePin+0x68>
    15e0:	bc c0       	rjmp	.+376    	; 0x175a <GPIO_writePin+0x1c6>
    15e2:	2c 81       	ldd	r18, Y+4	; 0x04
    15e4:	3d 81       	ldd	r19, Y+5	; 0x05
    15e6:	22 30       	cpi	r18, 0x02	; 2
    15e8:	31 05       	cpc	r19, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <GPIO_writePin+0x5a>
    15ec:	5f c0       	rjmp	.+190    	; 0x16ac <GPIO_writePin+0x118>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	09 f4       	brne	.+2      	; 0x15fa <GPIO_writePin+0x66>
    15f8:	85 c0       	rjmp	.+266    	; 0x1704 <GPIO_writePin+0x170>
    15fa:	af c0       	rjmp	.+350    	; 0x175a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	a1 f4       	brne	.+40     	; 0x162a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1602:	ab e3       	ldi	r26, 0x3B	; 59
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	eb e3       	ldi	r30, 0x3B	; 59
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_writePin+0x8c>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_writePin+0x88>
    1624:	84 2b       	or	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	98 c0       	rjmp	.+304    	; 0x175a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    162a:	ab e3       	ldi	r26, 0x3B	; 59
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	eb e3       	ldi	r30, 0x3B	; 59
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_writePin+0xb4>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_writePin+0xb0>
    164c:	80 95       	com	r24
    164e:	84 23       	and	r24, r20
    1650:	8c 93       	st	X, r24
    1652:	83 c0       	rjmp	.+262    	; 0x175a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	a1 f4       	brne	.+40     	; 0x1682 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    165a:	a8 e3       	ldi	r26, 0x38	; 56
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e8 e3       	ldi	r30, 0x38	; 56
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	48 2f       	mov	r20, r24
    1666:	8a 81       	ldd	r24, Y+2	; 0x02
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <GPIO_writePin+0xe4>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <GPIO_writePin+0xe0>
    167c:	84 2b       	or	r24, r20
    167e:	8c 93       	st	X, r24
    1680:	6c c0       	rjmp	.+216    	; 0x175a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1682:	a8 e3       	ldi	r26, 0x38	; 56
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_writePin+0x10c>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_writePin+0x108>
    16a4:	80 95       	com	r24
    16a6:	84 23       	and	r24, r20
    16a8:	8c 93       	st	X, r24
    16aa:	57 c0       	rjmp	.+174    	; 0x175a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	a1 f4       	brne	.+40     	; 0x16da <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16b2:	a5 e3       	ldi	r26, 0x35	; 53
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e3       	ldi	r30, 0x35	; 53
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	48 2f       	mov	r20, r24
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	28 2f       	mov	r18, r24
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	02 2e       	mov	r0, r18
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <GPIO_writePin+0x13c>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	0a 94       	dec	r0
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <GPIO_writePin+0x138>
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
    16d8:	40 c0       	rjmp	.+128    	; 0x175a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16da:	a5 e3       	ldi	r26, 0x35	; 53
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e5 e3       	ldi	r30, 0x35	; 53
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_writePin+0x164>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_writePin+0x160>
    16fc:	80 95       	com	r24
    16fe:	84 23       	and	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	2b c0       	rjmp	.+86     	; 0x175a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	a1 f4       	brne	.+40     	; 0x1732 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    170a:	a2 e3       	ldi	r26, 0x32	; 50
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e2 e3       	ldi	r30, 0x32	; 50
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	48 2f       	mov	r20, r24
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	28 2f       	mov	r18, r24
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 2e       	mov	r0, r18
    1722:	02 c0       	rjmp	.+4      	; 0x1728 <GPIO_writePin+0x194>
    1724:	88 0f       	add	r24, r24
    1726:	99 1f       	adc	r25, r25
    1728:	0a 94       	dec	r0
    172a:	e2 f7       	brpl	.-8      	; 0x1724 <GPIO_writePin+0x190>
    172c:	84 2b       	or	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	14 c0       	rjmp	.+40     	; 0x175a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1732:	a2 e3       	ldi	r26, 0x32	; 50
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e2 e3       	ldi	r30, 0x32	; 50
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_writePin+0x1bc>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_writePin+0x1b8>
    1754:	80 95       	com	r24
    1756:	84 23       	and	r24, r20
    1758:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	00 d0       	rcall	.+0      	; 0x1770 <GPIO_readPin+0x6>
    1770:	00 d0       	rcall	.+0      	; 0x1772 <GPIO_readPin+0x8>
    1772:	0f 92       	push	r0
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	8a 83       	std	Y+2, r24	; 0x02
    177a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    177c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	88 30       	cpi	r24, 0x08	; 8
    1782:	08 f0       	brcs	.+2      	; 0x1786 <GPIO_readPin+0x1c>
    1784:	84 c0       	rjmp	.+264    	; 0x188e <GPIO_readPin+0x124>
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	08 f0       	brcs	.+2      	; 0x178e <GPIO_readPin+0x24>
    178c:	80 c0       	rjmp	.+256    	; 0x188e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	3d 83       	std	Y+5, r19	; 0x05
    1796:	2c 83       	std	Y+4, r18	; 0x04
    1798:	4c 81       	ldd	r20, Y+4	; 0x04
    179a:	5d 81       	ldd	r21, Y+5	; 0x05
    179c:	41 30       	cpi	r20, 0x01	; 1
    179e:	51 05       	cpc	r21, r1
    17a0:	79 f1       	breq	.+94     	; 0x1800 <GPIO_readPin+0x96>
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	82 30       	cpi	r24, 0x02	; 2
    17a8:	91 05       	cpc	r25, r1
    17aa:	34 f4       	brge	.+12     	; 0x17b8 <GPIO_readPin+0x4e>
    17ac:	2c 81       	ldd	r18, Y+4	; 0x04
    17ae:	3d 81       	ldd	r19, Y+5	; 0x05
    17b0:	21 15       	cp	r18, r1
    17b2:	31 05       	cpc	r19, r1
    17b4:	69 f0       	breq	.+26     	; 0x17d0 <GPIO_readPin+0x66>
    17b6:	6b c0       	rjmp	.+214    	; 0x188e <GPIO_readPin+0x124>
    17b8:	4c 81       	ldd	r20, Y+4	; 0x04
    17ba:	5d 81       	ldd	r21, Y+5	; 0x05
    17bc:	42 30       	cpi	r20, 0x02	; 2
    17be:	51 05       	cpc	r21, r1
    17c0:	b9 f1       	breq	.+110    	; 0x1830 <GPIO_readPin+0xc6>
    17c2:	8c 81       	ldd	r24, Y+4	; 0x04
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	83 30       	cpi	r24, 0x03	; 3
    17c8:	91 05       	cpc	r25, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <GPIO_readPin+0x64>
    17cc:	49 c0       	rjmp	.+146    	; 0x1860 <GPIO_readPin+0xf6>
    17ce:	5f c0       	rjmp	.+190    	; 0x188e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17d0:	e9 e3       	ldi	r30, 0x39	; 57
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_readPin+0x7e>
    17e4:	55 95       	asr	r21
    17e6:	47 95       	ror	r20
    17e8:	8a 95       	dec	r24
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_readPin+0x7a>
    17ec:	ca 01       	movw	r24, r20
    17ee:	81 70       	andi	r24, 0x01	; 1
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	88 23       	and	r24, r24
    17f4:	19 f0       	breq	.+6      	; 0x17fc <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	49 c0       	rjmp	.+146    	; 0x188e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17fc:	19 82       	std	Y+1, r1	; 0x01
    17fe:	47 c0       	rjmp	.+142    	; 0x188e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1800:	e6 e3       	ldi	r30, 0x36	; 54
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a9 01       	movw	r20, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_readPin+0xae>
    1814:	55 95       	asr	r21
    1816:	47 95       	ror	r20
    1818:	8a 95       	dec	r24
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_readPin+0xaa>
    181c:	ca 01       	movw	r24, r20
    181e:	81 70       	andi	r24, 0x01	; 1
    1820:	90 70       	andi	r25, 0x00	; 0
    1822:	88 23       	and	r24, r24
    1824:	19 f0       	breq	.+6      	; 0x182c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	31 c0       	rjmp	.+98     	; 0x188e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    182c:	19 82       	std	Y+1, r1	; 0x01
    182e:	2f c0       	rjmp	.+94     	; 0x188e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1830:	e3 e3       	ldi	r30, 0x33	; 51
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a9 01       	movw	r20, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_readPin+0xde>
    1844:	55 95       	asr	r21
    1846:	47 95       	ror	r20
    1848:	8a 95       	dec	r24
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_readPin+0xda>
    184c:	ca 01       	movw	r24, r20
    184e:	81 70       	andi	r24, 0x01	; 1
    1850:	90 70       	andi	r25, 0x00	; 0
    1852:	88 23       	and	r24, r24
    1854:	19 f0       	breq	.+6      	; 0x185c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	19 c0       	rjmp	.+50     	; 0x188e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    185c:	19 82       	std	Y+1, r1	; 0x01
    185e:	17 c0       	rjmp	.+46     	; 0x188e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1860:	e0 e3       	ldi	r30, 0x30	; 48
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_readPin+0x10e>
    1874:	55 95       	asr	r21
    1876:	47 95       	ror	r20
    1878:	8a 95       	dec	r24
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_readPin+0x10a>
    187c:	ca 01       	movw	r24, r20
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	88 23       	and	r24, r24
    1884:	19 f0       	breq	.+6      	; 0x188c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	01 c0       	rjmp	.+2      	; 0x188e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    188c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    188e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_setupPortDirection+0x6>
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <GPIO_setupPortDirection+0x8>
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	84 30       	cpi	r24, 0x04	; 4
    18b4:	90 f5       	brcc	.+100    	; 0x191a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3c 83       	std	Y+4, r19	; 0x04
    18be:	2b 83       	std	Y+3, r18	; 0x03
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	d1 f0       	breq	.+52     	; 0x18fe <GPIO_setupPortDirection+0x5e>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	2c f4       	brge	.+10     	; 0x18de <GPIO_setupPortDirection+0x3e>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	00 97       	sbiw	r24, 0x00	; 0
    18da:	61 f0       	breq	.+24     	; 0x18f4 <GPIO_setupPortDirection+0x54>
    18dc:	1e c0       	rjmp	.+60     	; 0x191a <GPIO_setupPortDirection+0x7a>
    18de:	2b 81       	ldd	r18, Y+3	; 0x03
    18e0:	3c 81       	ldd	r19, Y+4	; 0x04
    18e2:	22 30       	cpi	r18, 0x02	; 2
    18e4:	31 05       	cpc	r19, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <GPIO_setupPortDirection+0x68>
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	9c 81       	ldd	r25, Y+4	; 0x04
    18ec:	83 30       	cpi	r24, 0x03	; 3
    18ee:	91 05       	cpc	r25, r1
    18f0:	81 f0       	breq	.+32     	; 0x1912 <GPIO_setupPortDirection+0x72>
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18fe:	e7 e3       	ldi	r30, 0x37	; 55
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
    1906:	09 c0       	rjmp	.+18     	; 0x191a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1908:	e4 e3       	ldi	r30, 0x34	; 52
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	80 83       	st	Z, r24
    1910:	04 c0       	rjmp	.+8      	; 0x191a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1912:	e1 e3       	ldi	r30, 0x31	; 49
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	80 83       	st	Z, r24
			break;
		}
	}
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_writePort+0x6>
    192e:	00 d0       	rcall	.+0      	; 0x1930 <GPIO_writePort+0x8>
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
    1934:	89 83       	std	Y+1, r24	; 0x01
    1936:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	84 30       	cpi	r24, 0x04	; 4
    193c:	90 f5       	brcc	.+100    	; 0x19a2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3c 83       	std	Y+4, r19	; 0x04
    1946:	2b 83       	std	Y+3, r18	; 0x03
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	91 05       	cpc	r25, r1
    1950:	d1 f0       	breq	.+52     	; 0x1986 <GPIO_writePort+0x5e>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	2c f4       	brge	.+10     	; 0x1966 <GPIO_writePort+0x3e>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	61 f0       	breq	.+24     	; 0x197c <GPIO_writePort+0x54>
    1964:	1e c0       	rjmp	.+60     	; 0x19a2 <GPIO_writePort+0x7a>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_writePort+0x68>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	83 30       	cpi	r24, 0x03	; 3
    1976:	91 05       	cpc	r25, r1
    1978:	81 f0       	breq	.+32     	; 0x199a <GPIO_writePort+0x72>
    197a:	13 c0       	rjmp	.+38     	; 0x19a2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    197c:	eb e3       	ldi	r30, 0x3B	; 59
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	80 83       	st	Z, r24
    1984:	0e c0       	rjmp	.+28     	; 0x19a2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1986:	e8 e3       	ldi	r30, 0x38	; 56
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	80 83       	st	Z, r24
    198e:	09 c0       	rjmp	.+18     	; 0x19a2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1990:	e5 e3       	ldi	r30, 0x35	; 53
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	80 83       	st	Z, r24
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <GPIO_readPort+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <GPIO_readPort+0x8>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19be:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	84 30       	cpi	r24, 0x04	; 4
    19c4:	90 f5       	brcc	.+100    	; 0x1a2a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	d1 f0       	breq	.+52     	; 0x1a0e <GPIO_readPort+0x5e>
    19da:	2b 81       	ldd	r18, Y+3	; 0x03
    19dc:	3c 81       	ldd	r19, Y+4	; 0x04
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <GPIO_readPort+0x3e>
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	9c 81       	ldd	r25, Y+4	; 0x04
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <GPIO_readPort+0x54>
    19ec:	1e c0       	rjmp	.+60     	; 0x1a2a <GPIO_readPort+0x7a>
    19ee:	2b 81       	ldd	r18, Y+3	; 0x03
    19f0:	3c 81       	ldd	r19, Y+4	; 0x04
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <GPIO_readPort+0x68>
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	9c 81       	ldd	r25, Y+4	; 0x04
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <GPIO_readPort+0x72>
    1a02:	13 c0       	rjmp	.+38     	; 0x1a2a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a04:	e9 e3       	ldi	r30, 0x39	; 57
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	89 83       	std	Y+1, r24	; 0x01
    1a0c:	0e c0       	rjmp	.+28     	; 0x1a2a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a0e:	e6 e3       	ldi	r30, 0x36	; 54
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a18:	e3 e3       	ldi	r30, 0x33	; 51
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a22:	e0 e3       	ldi	r30, 0x30	; 48
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <PWM_Timer0_Start>:
/* Description:
 * The function responsible for trigger the Timer0 with the PWM Mode.
 * Setup the compare value based on the required input duty cycle
 * The generated PWM signal frequency will be 500Hz to control the DC Motor speed. */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	0f 92       	push	r0
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	89 83       	std	Y+1, r24	; 0x01
	/* convert percentage value to the provided value */
	if(duty_cycle>0)
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	88 23       	and	r24, r24
    1a4a:	41 f1       	breq	.+80     	; 0x1a9c <PWM_Timer0_Start+0x62>
	{
		duty_cycle=(uint8)((1.0*duty_cycle/100)*255);
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	aa 27       	eor	r26, r26
    1a54:	97 fd       	sbrc	r25, 7
    1a56:	a0 95       	com	r26
    1a58:	ba 2f       	mov	r27, r26
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	bc 01       	movw	r22, r24
    1a68:	cd 01       	movw	r24, r26
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	48 ec       	ldi	r20, 0xC8	; 200
    1a70:	52 e4       	ldi	r21, 0x42	; 66
    1a72:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	53 e4       	ldi	r21, 0x43	; 67
    1a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	89 83       	std	Y+1, r24	; 0x01
	}
	TCNT0 = 0; //Set Timer Initial value
    1a9c:	e2 e5       	ldi	r30, 0x52	; 82
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	10 82       	st	Z, r1

	OCR0  = duty_cycle; // Set Compare Values
    1aa2:	ec e5       	ldi	r30, 0x5C	; 92
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	80 83       	st	Z, r24

	GPIO_setupPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_ENABLE_PIN_ID, PIN_OUTPUT);
    1aaa:	81 e0       	ldi	r24, 0x01	; 1
    1aac:	63 e0       	ldi	r22, 0x03	; 3
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 df 09 	call	0x13be	; 0x13be <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<6) | (1<<3) | (1<<5) | (1<<1);
    1ab4:	e3 e5       	ldi	r30, 0x53	; 83
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	8a e6       	ldi	r24, 0x6A	; 106
    1aba:	80 83       	st	Z, r24

}
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1aee:	80 91 77 01 	lds	r24, 0x0177
    1af2:	90 91 78 01 	lds	r25, 0x0178
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1afa:	e0 91 77 01 	lds	r30, 0x0177
    1afe:	f0 91 78 01 	lds	r31, 0x0178
    1b02:	09 95       	icall
	}
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1b2a:	1f 92       	push	r1
    1b2c:	0f 92       	push	r0
    1b2e:	0f b6       	in	r0, 0x3f	; 63
    1b30:	0f 92       	push	r0
    1b32:	11 24       	eor	r1, r1
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b54:	80 91 77 01 	lds	r24, 0x0177
    1b58:	90 91 78 01 	lds	r25, 0x0178
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b60:	e0 91 77 01 	lds	r30, 0x0177
    1b64:	f0 91 78 01 	lds	r31, 0x0178
    1b68:	09 95       	icall
	}
}
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	ff 91       	pop	r31
    1b70:	ef 91       	pop	r30
    1b72:	bf 91       	pop	r27
    1b74:	af 91       	pop	r26
    1b76:	9f 91       	pop	r25
    1b78:	8f 91       	pop	r24
    1b7a:	7f 91       	pop	r23
    1b7c:	6f 91       	pop	r22
    1b7e:	5f 91       	pop	r21
    1b80:	4f 91       	pop	r20
    1b82:	3f 91       	pop	r19
    1b84:	2f 91       	pop	r18
    1b86:	0f 90       	pop	r0
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	0f 90       	pop	r0
    1b8c:	1f 90       	pop	r1
    1b8e:	18 95       	reti

00001b90 <Timer1_init>:
 *                      Functions definitions                                   *
 *******************************************************************************/
/* Description:
 * Function to initialize the Timer driver */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <Timer1_init+0x6>
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	9a 83       	std	Y+2, r25	; 0x02
    1b9c:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
    1b9e:	ac e4       	ldi	r26, 0x4C	; 76
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	11 96       	adiw	r26, 0x01	; 1
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL_MODE)
    1bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb4:	85 81       	ldd	r24, Z+5	; 0x05
    1bb6:	88 23       	and	r24, r24
    1bb8:	79 f4       	brne	.+30     	; 0x1bd8 <Timer1_init+0x48>
	{
		TIMSK&=~(1<<OCIE1A); /* disable compare mode interrupt*/
    1bba:	a9 e5       	ldi	r26, 0x59	; 89
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e9 e5       	ldi	r30, 0x59	; 89
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	8f 7e       	andi	r24, 0xEF	; 239
    1bc6:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);/* Enable normal mode interrupt*/
    1bc8:	a9 e5       	ldi	r26, 0x59	; 89
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e9 e5       	ldi	r30, 0x59	; 89
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	84 60       	ori	r24, 0x04	; 4
    1bd4:	8c 93       	st	X, r24
    1bd6:	1c c0       	rjmp	.+56     	; 0x1c10 <Timer1_init+0x80>
	}
	else if (Config_Ptr->mode==COMPARE_MODE)
    1bd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bda:	fa 81       	ldd	r31, Y+2	; 0x02
    1bdc:	85 81       	ldd	r24, Z+5	; 0x05
    1bde:	88 30       	cpi	r24, 0x08	; 8
    1be0:	b9 f4       	brne	.+46     	; 0x1c10 <Timer1_init+0x80>
	{
		TIMSK&=~(1<<TOIE1);/* disable normal mode interrupt*/
    1be2:	a9 e5       	ldi	r26, 0x59	; 89
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e9 e5       	ldi	r30, 0x59	; 89
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8b 7f       	andi	r24, 0xFB	; 251
    1bee:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;     /* Set the Compare value  */
    1bf0:	aa e4       	ldi	r26, 0x4A	; 74
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	11 96       	adiw	r26, 0x01	; 1
    1bfe:	9c 93       	st	X, r25
    1c00:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    1c02:	a9 e5       	ldi	r26, 0x59	; 89
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e9 e5       	ldi	r30, 0x59	; 89
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 61       	ori	r24, 0x10	; 16
    1c0e:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC & normal Modes WGM10=0 WGM11=0 (Modes Number 0&4)
	 */
	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    1c10:	ef e4       	ldi	r30, 0x4F	; 79
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	8c e0       	ldi	r24, 0x0C	; 12
    1c16:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0
	 * 2. Prescaler = Config_Ptr->prescaler
	 */
	TCCR1B = (Config_Ptr->mode) | (Config_Ptr->prescaler);
    1c18:	ae e4       	ldi	r26, 0x4E	; 78
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c20:	95 81       	ldd	r25, Z+5	; 0x05
    1c22:	e9 81       	ldd	r30, Y+1	; 0x01
    1c24:	fa 81       	ldd	r31, Y+2	; 0x02
    1c26:	84 81       	ldd	r24, Z+4	; 0x04
    1c28:	89 2b       	or	r24, r25
    1c2a:	8c 93       	st	X, r24
}
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	cf 91       	pop	r28
    1c32:	df 91       	pop	r29
    1c34:	08 95       	ret

00001c36 <Timer1_deInit>:

/* Description:
 * Function to disable the Timer1. */
void Timer1_deInit(void)
{
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0;
    1c3e:	e9 e5       	ldi	r30, 0x59	; 89
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	10 82       	st	Z, r1
	TCCR1A=0;
    1c44:	ef e4       	ldi	r30, 0x4F	; 79
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	10 82       	st	Z, r1
	TCCR1B=0;
    1c4a:	ee e4       	ldi	r30, 0x4E	; 78
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	10 82       	st	Z, r1
	OCR1A=0;
    1c50:	ea e4       	ldi	r30, 0x4A	; 74
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	11 82       	std	Z+1, r1	; 0x01
    1c56:	10 82       	st	Z, r1
	TCNT1=0;
    1c58:	ec e4       	ldi	r30, 0x4C	; 76
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	11 82       	std	Z+1, r1	; 0x01
    1c5e:	10 82       	st	Z, r1

}
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <Timer1_setCallBack>:

/* Description:
 * Function to set the Call Back function address. */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	00 d0       	rcall	.+0      	; 0x1c6c <Timer1_setCallBack+0x6>
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
    1c70:	9a 83       	std	Y+2, r25	; 0x02
    1c72:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	9a 81       	ldd	r25, Y+2	; 0x02
    1c78:	90 93 78 01 	sts	0x0178, r25
    1c7c:	80 93 77 01 	sts	0x0177, r24
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	00 d0       	rcall	.+0      	; 0x1c90 <TWI_init+0x6>
    1c90:	cd b7       	in	r28, 0x3d	; 61
    1c92:	de b7       	in	r29, 0x3e	; 62
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    1c98:	a0 e2       	ldi	r26, 0x20	; 32
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	81 81       	ldd	r24, Z+1	; 0x01
    1ca2:	8c 93       	st	X, r24
	TWSR = 0x00;
    1ca4:	e1 e2       	ldi	r30, 0x21	; 33
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address = 0x01 :)
    1caa:	a2 e2       	ldi	r26, 0x22	; 34
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb2:	80 81       	ld	r24, Z
    1cb4:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1cb6:	e6 e5       	ldi	r30, 0x56	; 86
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	84 e0       	ldi	r24, 0x04	; 4
    1cbc:	80 83       	st	Z, r24
}
    1cbe:	0f 90       	pop	r0
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <TWI_start>:

void TWI_start(void)
{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1cd0:	e6 e5       	ldi	r30, 0x56	; 86
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	84 ea       	ldi	r24, 0xA4	; 164
    1cd6:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1cd8:	e6 e5       	ldi	r30, 0x56	; 86
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 23       	and	r24, r24
    1ce0:	dc f7       	brge	.-10     	; 0x1cd8 <TWI_start+0x10>
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret

00001ce8 <TWI_stop>:

void TWI_stop(void)
{
    1ce8:	df 93       	push	r29
    1cea:	cf 93       	push	r28
    1cec:	cd b7       	in	r28, 0x3d	; 61
    1cee:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1cf0:	e6 e5       	ldi	r30, 0x56	; 86
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	84 e9       	ldi	r24, 0x94	; 148
    1cf6:	80 83       	st	Z, r24
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	0f 92       	push	r0
    1d04:	cd b7       	in	r28, 0x3d	; 61
    1d06:	de b7       	in	r29, 0x3e	; 62
    1d08:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1d0a:	e3 e2       	ldi	r30, 0x23	; 35
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
    1d10:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d12:	e6 e5       	ldi	r30, 0x56	; 86
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	84 e8       	ldi	r24, 0x84	; 132
    1d18:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d1a:	e6 e5       	ldi	r30, 0x56	; 86
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	88 23       	and	r24, r24
    1d22:	dc f7       	brge	.-10     	; 0x1d1a <TWI_writeByte+0x1c>
}
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1d34:	e6 e5       	ldi	r30, 0x56	; 86
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	84 ec       	ldi	r24, 0xC4	; 196
    1d3a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d3c:	e6 e5       	ldi	r30, 0x56	; 86
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	88 23       	and	r24, r24
    1d44:	dc f7       	brge	.-10     	; 0x1d3c <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1d46:	e3 e2       	ldi	r30, 0x23	; 35
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
}
    1d4c:	cf 91       	pop	r28
    1d4e:	df 91       	pop	r29
    1d50:	08 95       	ret

00001d52 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1d52:	df 93       	push	r29
    1d54:	cf 93       	push	r28
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1d5a:	e6 e5       	ldi	r30, 0x56	; 86
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	84 e8       	ldi	r24, 0x84	; 132
    1d60:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1d62:	e6 e5       	ldi	r30, 0x56	; 86
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	88 23       	and	r24, r24
    1d6a:	dc f7       	brge	.-10     	; 0x1d62 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1d6c:	e3 e2       	ldi	r30, 0x23	; 35
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1d82:	e1 e2       	ldi	r30, 0x21	; 33
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	88 7f       	andi	r24, 0xF8	; 248
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d8e:	0f 90       	pop	r0
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	08 95       	ret

00001d96 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configuration *config_ptr)
{
    1d96:	df 93       	push	r29
    1d98:	cf 93       	push	r28
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <UART_init+0x6>
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <UART_init+0x8>
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    1da6:	1a 82       	std	Y+2, r1	; 0x02
    1da8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    1daa:	eb e2       	ldi	r30, 0x2B	; 43
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|((config_ptr->data_size &0x04)<<1) ;
    1db2:	aa e2       	ldi	r26, 0x2A	; 42
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	eb 81       	ldd	r30, Y+3	; 0x03
    1db8:	fc 81       	ldd	r31, Y+4	; 0x04
    1dba:	82 81       	ldd	r24, Z+2	; 0x02
    1dbc:	88 2f       	mov	r24, r24
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	84 70       	andi	r24, 0x04	; 4
    1dc2:	90 70       	andi	r25, 0x00	; 0
    1dc4:	88 0f       	add	r24, r24
    1dc6:	99 1f       	adc	r25, r25
    1dc8:	88 61       	ori	r24, 0x18	; 24
    1dca:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (config_ptr->parity)|((config_ptr->data_size &0x03)<<1);
    1dcc:	a0 e4       	ldi	r26, 0x40	; 64
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1dd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1dd4:	80 81       	ld	r24, Z
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dda:	fc 81       	ldd	r31, Y+4	; 0x04
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	83 70       	andi	r24, 0x03	; 3
    1de4:	90 70       	andi	r25, 0x00	; 0
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	82 2b       	or	r24, r18
    1dec:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL) |((config_ptr->stop_bit)<<USBS);
    1dee:	a0 e4       	ldi	r26, 0x40	; 64
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e0 e4       	ldi	r30, 0x40	; 64
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	28 2f       	mov	r18, r24
    1dfa:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfc:	fc 81       	ldd	r31, Y+4	; 0x04
    1dfe:	81 81       	ldd	r24, Z+1	; 0x01
    1e00:	88 2f       	mov	r24, r24
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	80 68       	ori	r24, 0x80	; 128
    1e12:	82 2b       	or	r24, r18
    1e14:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->baud_rate * 8UL))) - 1);
    1e16:	eb 81       	ldd	r30, Y+3	; 0x03
    1e18:	fc 81       	ldd	r31, Y+4	; 0x04
    1e1a:	83 81       	ldd	r24, Z+3	; 0x03
    1e1c:	94 81       	ldd	r25, Z+4	; 0x04
    1e1e:	a5 81       	ldd	r26, Z+5	; 0x05
    1e20:	b6 81       	ldd	r27, Z+6	; 0x06
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	aa 1f       	adc	r26, r26
    1e28:	bb 1f       	adc	r27, r27
    1e2a:	88 0f       	add	r24, r24
    1e2c:	99 1f       	adc	r25, r25
    1e2e:	aa 1f       	adc	r26, r26
    1e30:	bb 1f       	adc	r27, r27
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	aa 1f       	adc	r26, r26
    1e38:	bb 1f       	adc	r27, r27
    1e3a:	9c 01       	movw	r18, r24
    1e3c:	ad 01       	movw	r20, r26
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	92 e1       	ldi	r25, 0x12	; 18
    1e42:	aa e7       	ldi	r26, 0x7A	; 122
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <__udivmodsi4>
    1e4e:	da 01       	movw	r26, r20
    1e50:	c9 01       	movw	r24, r18
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	9a 83       	std	Y+2, r25	; 0x02
    1e56:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    1e58:	e0 e4       	ldi	r30, 0x40	; 64
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e60:	89 2f       	mov	r24, r25
    1e62:	99 27       	eor	r25, r25
    1e64:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    1e66:	e9 e2       	ldi	r30, 0x29	; 41
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	80 83       	st	Z, r24
}
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
    1e72:	0f 90       	pop	r0
    1e74:	0f 90       	pop	r0
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	0f 92       	push	r0
    1e82:	cd b7       	in	r28, 0x3d	; 61
    1e84:	de b7       	in	r29, 0x3e	; 62
    1e86:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1e88:	eb e2       	ldi	r30, 0x2B	; 43
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	88 2f       	mov	r24, r24
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	80 72       	andi	r24, 0x20	; 32
    1e94:	90 70       	andi	r25, 0x00	; 0
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	b9 f3       	breq	.-18     	; 0x1e88 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    1e9a:	ec e2       	ldi	r30, 0x2C	; 44
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ea0:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    1ea2:	0f 90       	pop	r0
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1eb2:	eb e2       	ldi	r30, 0x2B	; 43
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	88 23       	and	r24, r24
    1eba:	dc f7       	brge	.-10     	; 0x1eb2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    1ebc:	ec e2       	ldi	r30, 0x2C	; 44
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	00 d0       	rcall	.+0      	; 0x1ece <UART_sendString+0x6>
    1ece:	0f 92       	push	r0
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	9b 83       	std	Y+3, r25	; 0x03
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1ed8:	19 82       	std	Y+1, r1	; 0x01
    1eda:	0e c0       	rjmp	.+28     	; 0x1ef8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1edc:	89 81       	ldd	r24, Y+1	; 0x01
    1ede:	28 2f       	mov	r18, r24
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	e2 0f       	add	r30, r18
    1eea:	f3 1f       	adc	r31, r19
    1eec:	80 81       	ld	r24, Z
    1eee:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <UART_sendByte>
		i++;
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	8f 5f       	subi	r24, 0xFF	; 255
    1ef6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1ef8:	89 81       	ldd	r24, Y+1	; 0x01
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	8a 81       	ldd	r24, Y+2	; 0x02
    1f00:	9b 81       	ldd	r25, Y+3	; 0x03
    1f02:	fc 01       	movw	r30, r24
    1f04:	e2 0f       	add	r30, r18
    1f06:	f3 1f       	adc	r31, r19
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 23       	and	r24, r24
    1f0c:	39 f7       	brne	.-50     	; 0x1edc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <UART_receiveString+0xa>
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3a:	8c 01       	movw	r16, r24
    1f3c:	02 0f       	add	r16, r18
    1f3e:	13 1f       	adc	r17, r19
    1f40:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <UART_recieveByte>
    1f44:	f8 01       	movw	r30, r16
    1f46:	80 83       	st	Z, r24
    1f48:	0f c0       	rjmp	.+30     	; 0x1f68 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	8f 5f       	subi	r24, 0xFF	; 255
    1f4e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5a:	8c 01       	movw	r16, r24
    1f5c:	02 0f       	add	r16, r18
    1f5e:	13 1f       	adc	r17, r19
    1f60:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <UART_recieveByte>
    1f64:	f8 01       	movw	r30, r16
    1f66:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1f68:	89 81       	ldd	r24, Y+1	; 0x01
    1f6a:	28 2f       	mov	r18, r24
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	fc 01       	movw	r30, r24
    1f74:	e2 0f       	add	r30, r18
    1f76:	f3 1f       	adc	r31, r19
    1f78:	80 81       	ld	r24, Z
    1f7a:	83 32       	cpi	r24, 0x23	; 35
    1f7c:	31 f7       	brne	.-52     	; 0x1f4a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	fc 01       	movw	r30, r24
    1f8a:	e2 0f       	add	r30, r18
    1f8c:	f3 1f       	adc	r31, r19
    1f8e:	10 82       	st	Z, r1
}
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	08 95       	ret

00001fa0 <__udivmodsi4>:
    1fa0:	a1 e2       	ldi	r26, 0x21	; 33
    1fa2:	1a 2e       	mov	r1, r26
    1fa4:	aa 1b       	sub	r26, r26
    1fa6:	bb 1b       	sub	r27, r27
    1fa8:	fd 01       	movw	r30, r26
    1faa:	0d c0       	rjmp	.+26     	; 0x1fc6 <__udivmodsi4_ep>

00001fac <__udivmodsi4_loop>:
    1fac:	aa 1f       	adc	r26, r26
    1fae:	bb 1f       	adc	r27, r27
    1fb0:	ee 1f       	adc	r30, r30
    1fb2:	ff 1f       	adc	r31, r31
    1fb4:	a2 17       	cp	r26, r18
    1fb6:	b3 07       	cpc	r27, r19
    1fb8:	e4 07       	cpc	r30, r20
    1fba:	f5 07       	cpc	r31, r21
    1fbc:	20 f0       	brcs	.+8      	; 0x1fc6 <__udivmodsi4_ep>
    1fbe:	a2 1b       	sub	r26, r18
    1fc0:	b3 0b       	sbc	r27, r19
    1fc2:	e4 0b       	sbc	r30, r20
    1fc4:	f5 0b       	sbc	r31, r21

00001fc6 <__udivmodsi4_ep>:
    1fc6:	66 1f       	adc	r22, r22
    1fc8:	77 1f       	adc	r23, r23
    1fca:	88 1f       	adc	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	1a 94       	dec	r1
    1fd0:	69 f7       	brne	.-38     	; 0x1fac <__udivmodsi4_loop>
    1fd2:	60 95       	com	r22
    1fd4:	70 95       	com	r23
    1fd6:	80 95       	com	r24
    1fd8:	90 95       	com	r25
    1fda:	9b 01       	movw	r18, r22
    1fdc:	ac 01       	movw	r20, r24
    1fde:	bd 01       	movw	r22, r26
    1fe0:	cf 01       	movw	r24, r30
    1fe2:	08 95       	ret

00001fe4 <__prologue_saves__>:
    1fe4:	2f 92       	push	r2
    1fe6:	3f 92       	push	r3
    1fe8:	4f 92       	push	r4
    1fea:	5f 92       	push	r5
    1fec:	6f 92       	push	r6
    1fee:	7f 92       	push	r7
    1ff0:	8f 92       	push	r8
    1ff2:	9f 92       	push	r9
    1ff4:	af 92       	push	r10
    1ff6:	bf 92       	push	r11
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	ca 1b       	sub	r28, r26
    200e:	db 0b       	sbc	r29, r27
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	f8 94       	cli
    2014:	de bf       	out	0x3e, r29	; 62
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	cd bf       	out	0x3d, r28	; 61
    201a:	09 94       	ijmp

0000201c <__epilogue_restores__>:
    201c:	2a 88       	ldd	r2, Y+18	; 0x12
    201e:	39 88       	ldd	r3, Y+17	; 0x11
    2020:	48 88       	ldd	r4, Y+16	; 0x10
    2022:	5f 84       	ldd	r5, Y+15	; 0x0f
    2024:	6e 84       	ldd	r6, Y+14	; 0x0e
    2026:	7d 84       	ldd	r7, Y+13	; 0x0d
    2028:	8c 84       	ldd	r8, Y+12	; 0x0c
    202a:	9b 84       	ldd	r9, Y+11	; 0x0b
    202c:	aa 84       	ldd	r10, Y+10	; 0x0a
    202e:	b9 84       	ldd	r11, Y+9	; 0x09
    2030:	c8 84       	ldd	r12, Y+8	; 0x08
    2032:	df 80       	ldd	r13, Y+7	; 0x07
    2034:	ee 80       	ldd	r14, Y+6	; 0x06
    2036:	fd 80       	ldd	r15, Y+5	; 0x05
    2038:	0c 81       	ldd	r16, Y+4	; 0x04
    203a:	1b 81       	ldd	r17, Y+3	; 0x03
    203c:	aa 81       	ldd	r26, Y+2	; 0x02
    203e:	b9 81       	ldd	r27, Y+1	; 0x01
    2040:	ce 0f       	add	r28, r30
    2042:	d1 1d       	adc	r29, r1
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	ed 01       	movw	r28, r26
    2050:	08 95       	ret

00002052 <_exit>:
    2052:	f8 94       	cli

00002054 <__stop_program>:
    2054:	ff cf       	rjmp	.-2      	; 0x2054 <__stop_program>
