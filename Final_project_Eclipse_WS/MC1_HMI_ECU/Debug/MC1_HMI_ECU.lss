
MC1_HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000039d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000039d0  00003a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080010a  0080010a  00003b0e  2**0
                  ALLOC
  3 .stab         00003138  00000000  00000000  00003b10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010d9  00000000  00000000  00006c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007e61  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ab05  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ba14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bca1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c46f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 93 1a 	jmp	0x3526	; 0x3526 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 30       	cpi	r26, 0x0D	; 13
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 05 	call	0xb5e	; 0xb5e <main>
      8a:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 ef       	ldi	r26, 0xF4	; 244
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 1c 	jmp	0x38d4	; 0x38d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 ef       	ldi	r24, 0xF4	; 244
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 1c 	jmp	0x390c	; 0x390c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 76 1c 	jmp	0x38ec	; 0x38ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7a 1c 	jmp	0x38f4	; 0x38f4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 96 1c 	jmp	0x392c	; 0x392c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <delay_3SEC>:

static volatile uint8 g_tick=0; /* global variable to increment with every 3 sec by timer1 interrupt*/

/*function called by timer1*/
void delay_3SEC(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 0a 01 	lds	r24, 0x010A
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 0a 01 	sts	0x010A, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <main>:

int main(void)
{
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	cd b7       	in	r28, 0x3d	; 61
     b68:	de b7       	in	r29, 0x3e	; 62
     b6a:	c4 56       	subi	r28, 0x64	; 100
     b6c:	d0 40       	sbci	r29, 0x00	; 0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	cd bf       	out	0x3d, r28	; 61
	SREG|=(1<<7); /* enable Global interrupt*/
     b78:	af e5       	ldi	r26, 0x5F	; 95
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ef e5       	ldi	r30, 0x5F	; 95
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24
	uint8 i=0 ;
     b86:	fe 01       	movw	r30, r28
     b88:	e5 5b       	subi	r30, 0xB5	; 181
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	10 82       	st	Z, r1
	uint8 j=0;
     b8e:	fe 01       	movw	r30, r28
     b90:	e6 5b       	subi	r30, 0xB6	; 182
     b92:	ff 4f       	sbci	r31, 0xFF	; 255
     b94:	10 82       	st	Z, r1
	uint8 key=0,menu=0;
     b96:	fe 01       	movw	r30, r28
     b98:	e7 5b       	subi	r30, 0xB7	; 183
     b9a:	ff 4f       	sbci	r31, 0xFF	; 255
     b9c:	10 82       	st	Z, r1
     b9e:	fe 01       	movw	r30, r28
     ba0:	e8 5b       	subi	r30, 0xB8	; 184
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	10 82       	st	Z, r1
	uint8 Enter_flag=0;
     ba6:	fe 01       	movw	r30, r28
     ba8:	e9 5b       	subi	r30, 0xB9	; 185
     baa:	ff 4f       	sbci	r31, 0xFF	; 255
     bac:	10 82       	st	Z, r1
	 * 0 initial value
	 * compare value =46875
	 * CPU frequency divided by 64 prescale
	 * timer compare mode
	 */
	Timer1_ConfigType Timer_Conf={0,46875,CLOCK_BY_64,COMPARE_MODE,};
     bae:	ce 01       	movw	r24, r28
     bb0:	86 5a       	subi	r24, 0xA6	; 166
     bb2:	9f 4f       	sbci	r25, 0xFF	; 255
     bb4:	a2 96       	adiw	r28, 0x22	; 34
     bb6:	9f af       	std	Y+63, r25	; 0x3f
     bb8:	8e af       	std	Y+62, r24	; 0x3e
     bba:	a2 97       	sbiw	r28, 0x22	; 34
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	a4 96       	adiw	r28, 0x24	; 36
     bc2:	9f af       	std	Y+63, r25	; 0x3f
     bc4:	8e af       	std	Y+62, r24	; 0x3e
     bc6:	a4 97       	sbiw	r28, 0x24	; 36
     bc8:	96 e0       	ldi	r25, 0x06	; 6
     bca:	a5 96       	adiw	r28, 0x25	; 37
     bcc:	9f af       	std	Y+63, r25	; 0x3f
     bce:	a5 97       	sbiw	r28, 0x25	; 37
     bd0:	a4 96       	adiw	r28, 0x24	; 36
     bd2:	ee ad       	ldd	r30, Y+62	; 0x3e
     bd4:	ff ad       	ldd	r31, Y+63	; 0x3f
     bd6:	a4 97       	sbiw	r28, 0x24	; 36
     bd8:	00 80       	ld	r0, Z
     bda:	a4 96       	adiw	r28, 0x24	; 36
     bdc:	8e ad       	ldd	r24, Y+62	; 0x3e
     bde:	9f ad       	ldd	r25, Y+63	; 0x3f
     be0:	a4 97       	sbiw	r28, 0x24	; 36
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	a4 96       	adiw	r28, 0x24	; 36
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	8e af       	std	Y+62, r24	; 0x3e
     bea:	a4 97       	sbiw	r28, 0x24	; 36
     bec:	a2 96       	adiw	r28, 0x22	; 34
     bee:	ee ad       	ldd	r30, Y+62	; 0x3e
     bf0:	ff ad       	ldd	r31, Y+63	; 0x3f
     bf2:	a2 97       	sbiw	r28, 0x22	; 34
     bf4:	00 82       	st	Z, r0
     bf6:	a2 96       	adiw	r28, 0x22	; 34
     bf8:	8e ad       	ldd	r24, Y+62	; 0x3e
     bfa:	9f ad       	ldd	r25, Y+63	; 0x3f
     bfc:	a2 97       	sbiw	r28, 0x22	; 34
     bfe:	01 96       	adiw	r24, 0x01	; 1
     c00:	a2 96       	adiw	r28, 0x22	; 34
     c02:	9f af       	std	Y+63, r25	; 0x3f
     c04:	8e af       	std	Y+62, r24	; 0x3e
     c06:	a2 97       	sbiw	r28, 0x22	; 34
     c08:	a5 96       	adiw	r28, 0x25	; 37
     c0a:	9f ad       	ldd	r25, Y+63	; 0x3f
     c0c:	a5 97       	sbiw	r28, 0x25	; 37
     c0e:	91 50       	subi	r25, 0x01	; 1
     c10:	a5 96       	adiw	r28, 0x25	; 37
     c12:	9f af       	std	Y+63, r25	; 0x3f
     c14:	a5 97       	sbiw	r28, 0x25	; 37
     c16:	a5 96       	adiw	r28, 0x25	; 37
     c18:	ef ad       	ldd	r30, Y+63	; 0x3f
     c1a:	a5 97       	sbiw	r28, 0x25	; 37
     c1c:	ee 23       	and	r30, r30
     c1e:	c1 f6       	brne	.-80     	; 0xbd0 <main+0x72>

	/* store # and \0 in the last 2 elements in the arrays to match the UART format*/
	arr1[5]='#';
     c20:	fe 01       	movw	r30, r28
     c22:	e4 5b       	subi	r30, 0xB4	; 180
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	83 e2       	ldi	r24, 0x23	; 35
     c28:	85 83       	std	Z+5, r24	; 0x05
	arr1[6]='\0';
     c2a:	fe 01       	movw	r30, r28
     c2c:	e4 5b       	subi	r30, 0xB4	; 180
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	16 82       	std	Z+6, r1	; 0x06
	arr2[5]='#';
     c32:	fe 01       	movw	r30, r28
     c34:	ed 5a       	subi	r30, 0xAD	; 173
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	83 e2       	ldi	r24, 0x23	; 35
     c3a:	85 83       	std	Z+5, r24	; 0x05
	arr2[6]='\0';
     c3c:	fe 01       	movw	r30, r28
     c3e:	ed 5a       	subi	r30, 0xAD	; 173
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	16 82       	std	Z+6, r1	; 0x06

	Timer1_setCallBack(delay_3SEC); /* Set the Call back function pointer in the timer driver */
     c44:	83 ea       	ldi	r24, 0xA3	; 163
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	0e 94 31 1b 	call	0x3662	; 0x3662 <Timer1_setCallBack>

	/* Initialize both the LCD and UART driver */
	LCD_init();
     c4c:	0e 94 07 10 	call	0x200e	; 0x200e <LCD_init>
	UART_init(&g_uartConfiguration);
     c50:	8c ef       	ldi	r24, 0xFC	; 252
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 43 1b 	call	0x3686	; 0x3686 <UART_init>


	LCD_displayString("Plz Enter Pass");
     c58:	80 e6       	ldi	r24, 0x60	; 96
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
	LCD_moveCursor(1,0);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	60 e0       	ldi	r22, 0x00	; 0
     c64:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>


	while(1)
	{

		key = KEYPAD_getPressedKey(); /* store the pressed key value*/
     c68:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
     c6c:	fe 01       	movw	r30, r28
     c6e:	e7 5b       	subi	r30, 0xB7	; 183
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	80 83       	st	Z, r24

		/* condition to store the first entered pass */
		if((Enter_flag==0)&&(i<5))
     c74:	fe 01       	movw	r30, r28
     c76:	e9 5b       	subi	r30, 0xB9	; 185
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	80 81       	ld	r24, Z
     c7c:	88 23       	and	r24, r24
     c7e:	19 f5       	brne	.+70     	; 0xcc6 <main+0x168>
     c80:	fe 01       	movw	r30, r28
     c82:	e5 5b       	subi	r30, 0xB5	; 181
     c84:	ff 4f       	sbci	r31, 0xFF	; 255
     c86:	80 81       	ld	r24, Z
     c88:	85 30       	cpi	r24, 0x05	; 5
     c8a:	e8 f4       	brcc	.+58     	; 0xcc6 <main+0x168>
		{
			arr1[i]=key; /* store the key value in the array*/
     c8c:	fe 01       	movw	r30, r28
     c8e:	e5 5b       	subi	r30, 0xB5	; 181
     c90:	ff 4f       	sbci	r31, 0xFF	; 255
     c92:	80 81       	ld	r24, Z
     c94:	28 2f       	mov	r18, r24
     c96:	30 e0       	ldi	r19, 0x00	; 0
     c98:	ce 01       	movw	r24, r28
     c9a:	84 5b       	subi	r24, 0xB4	; 180
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	dc 01       	movw	r26, r24
     ca0:	a2 0f       	add	r26, r18
     ca2:	b3 1f       	adc	r27, r19
     ca4:	fe 01       	movw	r30, r28
     ca6:	e7 5b       	subi	r30, 0xB7	; 183
     ca8:	ff 4f       	sbci	r31, 0xFF	; 255
     caa:	80 81       	ld	r24, Z
     cac:	8c 93       	st	X, r24
			LCD_displayCharacter('*'); /* display * with every key pressed*/
     cae:	8a e2       	ldi	r24, 0x2A	; 42
     cb0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
			i++; /* increment the index  every loop*/
     cb4:	de 01       	movw	r26, r28
     cb6:	a5 5b       	subi	r26, 0xB5	; 181
     cb8:	bf 4f       	sbci	r27, 0xFF	; 255
     cba:	fe 01       	movw	r30, r28
     cbc:	e5 5b       	subi	r30, 0xB5	; 181
     cbe:	ff 4f       	sbci	r31, 0xFF	; 255
     cc0:	80 81       	ld	r24, Z
     cc2:	8f 5f       	subi	r24, 0xFF	; 255
     cc4:	8c 93       	st	X, r24
		}

		/* when enter key is pressed  first time*/
		if((key ==13)&&(Enter_flag==0))
     cc6:	fe 01       	movw	r30, r28
     cc8:	e7 5b       	subi	r30, 0xB7	; 183
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 81       	ld	r24, Z
     cce:	8d 30       	cpi	r24, 0x0D	; 13
     cd0:	59 f4       	brne	.+22     	; 0xce8 <main+0x18a>
     cd2:	fe 01       	movw	r30, r28
     cd4:	e9 5b       	subi	r30, 0xB9	; 185
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	80 81       	ld	r24, Z
     cda:	88 23       	and	r24, r24
     cdc:	29 f4       	brne	.+10     	; 0xce8 <main+0x18a>
			Enter_flag = 1; /* store one in the enter flag to start the next step*/
     cde:	fe 01       	movw	r30, r28
     ce0:	e9 5b       	subi	r30, 0xB9	; 185
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	80 83       	st	Z, r24

		if(Enter_flag == 1)
     ce8:	fe 01       	movw	r30, r28
     cea:	e9 5b       	subi	r30, 0xB9	; 185
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	80 81       	ld	r24, Z
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	21 f5       	brne	.+72     	; 0xd3c <main+0x1de>
		{
			LCD_clearScreen(); /* clear screen*/
     cf4:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
			LCD_moveCursor(0,0);
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
			LCD_displayString("Plz re-enter the");
     d00:	8f e6       	ldi	r24, 0x6F	; 111
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
			LCD_moveCursor(1,0);
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
			LCD_displayString("Same pass:");
     d10:	80 e8       	ldi	r24, 0x80	; 128
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
			LCD_moveCursor(1,11);
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	6b e0       	ldi	r22, 0x0B	; 11
     d1c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
			i=0;
     d20:	fe 01       	movw	r30, r28
     d22:	e5 5b       	subi	r30, 0xB5	; 181
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	10 82       	st	Z, r1
			Enter_flag++; /*increment enter flag to start the next step*/
     d28:	de 01       	movw	r26, r28
     d2a:	a9 5b       	subi	r26, 0xB9	; 185
     d2c:	bf 4f       	sbci	r27, 0xFF	; 255
     d2e:	fe 01       	movw	r30, r28
     d30:	e9 5b       	subi	r30, 0xB9	; 185
     d32:	ff 4f       	sbci	r31, 0xFF	; 255
     d34:	80 81       	ld	r24, Z
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	8c 93       	st	X, r24
     d3a:	3b c0       	rjmp	.+118    	; 0xdb2 <main+0x254>
		}
		else if((Enter_flag == 2)&&(i<5)) /* take the reenter pass and save it in array2*/
     d3c:	fe 01       	movw	r30, r28
     d3e:	e9 5b       	subi	r30, 0xB9	; 185
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	80 81       	ld	r24, Z
     d44:	82 30       	cpi	r24, 0x02	; 2
     d46:	21 f5       	brne	.+72     	; 0xd90 <main+0x232>
     d48:	fe 01       	movw	r30, r28
     d4a:	e5 5b       	subi	r30, 0xB5	; 181
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	85 30       	cpi	r24, 0x05	; 5
     d52:	f0 f4       	brcc	.+60     	; 0xd90 <main+0x232>
		{
			arr2[i]=key;
     d54:	fe 01       	movw	r30, r28
     d56:	e5 5b       	subi	r30, 0xB5	; 181
     d58:	ff 4f       	sbci	r31, 0xFF	; 255
     d5a:	80 81       	ld	r24, Z
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	ce 01       	movw	r24, r28
     d62:	8d 5a       	subi	r24, 0xAD	; 173
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	dc 01       	movw	r26, r24
     d68:	a2 0f       	add	r26, r18
     d6a:	b3 1f       	adc	r27, r19
     d6c:	fe 01       	movw	r30, r28
     d6e:	e7 5b       	subi	r30, 0xB7	; 183
     d70:	ff 4f       	sbci	r31, 0xFF	; 255
     d72:	80 81       	ld	r24, Z
     d74:	8c 93       	st	X, r24
			LCD_displayCharacter('*');
     d76:	8a e2       	ldi	r24, 0x2A	; 42
     d78:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
			i++;
     d7c:	de 01       	movw	r26, r28
     d7e:	a5 5b       	subi	r26, 0xB5	; 181
     d80:	bf 4f       	sbci	r27, 0xFF	; 255
     d82:	fe 01       	movw	r30, r28
     d84:	e5 5b       	subi	r30, 0xB5	; 181
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	80 81       	ld	r24, Z
     d8a:	8f 5f       	subi	r24, 0xFF	; 255
     d8c:	8c 93       	st	X, r24
     d8e:	11 c0       	rjmp	.+34     	; 0xdb2 <main+0x254>

		}
		/* when enter key is pressed  second time*/
		else if((key ==13)&&(Enter_flag == 2))
     d90:	fe 01       	movw	r30, r28
     d92:	e7 5b       	subi	r30, 0xB7	; 183
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	80 81       	ld	r24, Z
     d98:	8d 30       	cpi	r24, 0x0D	; 13
     d9a:	59 f4       	brne	.+22     	; 0xdb2 <main+0x254>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e9 5b       	subi	r30, 0xB9	; 185
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	29 f4       	brne	.+10     	; 0xdb2 <main+0x254>
		{
			Enter_flag = 3;/*increment enter flag to start the next step*/
     da8:	fe 01       	movw	r30, r28
     daa:	e9 5b       	subi	r30, 0xB9	; 185
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	80 83       	st	Z, r24
		}

		if(Enter_flag == 3) /* start sending the 2 passes to the control ECU*/
     db2:	fe 01       	movw	r30, r28
     db4:	e9 5b       	subi	r30, 0xB9	; 185
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	80 81       	ld	r24, Z
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <main+0x262>
     dbe:	67 c4       	rjmp	.+2254   	; 0x168e <main+0xb30>
		{
			UART_sendByte(MC1_READY); /* send MC1_READY to the control ECU to notice him i'm start sending*/
     dc0:	80 e1       	ldi	r24, 0x10	; 16
     dc2:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
			UART_sendString(arr1); /* send first taken pass*/
     dc6:	ce 01       	movw	r24, r28
     dc8:	84 5b       	subi	r24, 0xB4	; 180
     dca:	9f 4f       	sbci	r25, 0xFF	; 255
     dcc:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>
			UART_sendString(arr2); /* send the second taken pass*/
     dd0:	ce 01       	movw	r24, r28
     dd2:	8d 5a       	subi	r24, 0xAD	; 173
     dd4:	9f 4f       	sbci	r25, 0xFF	; 255
     dd6:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>

			/* wait until the MC2 finished its operations and it is start sending*/
			while(UART_recieveByte() != MC1_READY){}
     dda:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
     dde:	80 31       	cpi	r24, 0x10	; 16
     de0:	e1 f7       	brne	.-8      	; 0xdda <main+0x27c>
			if(UART_recieveByte() == MATCHED) /* check if the MC2 send matched passes*/
     de2:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
     de6:	8f 30       	cpi	r24, 0x0F	; 15
     de8:	09 f0       	breq	.+2      	; 0xdec <main+0x28e>
     dea:	3f c4       	rjmp	.+2174   	; 0x166a <main+0xb0c>
			{
				/* display the menu on lcd*/
				LCD_clearScreen();
     dec:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
				LCD_displayString("+ : Open Door");
     df0:	8b e8       	ldi	r24, 0x8B	; 139
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
				LCD_moveCursor(1, 0);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
				LCD_displayString("- : Change Pass");
     e00:	89 e9       	ldi	r24, 0x99	; 153
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
				/* wait until the user enter '+' or '-' and store it in menu */
				do{
					menu = KEYPAD_getPressedKey();
     e08:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
     e0c:	fe 01       	movw	r30, r28
     e0e:	e8 5b       	subi	r30, 0xB8	; 184
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 83       	st	Z, r24
				}while(!((menu=='+')||(menu=='-')));
     e14:	fe 01       	movw	r30, r28
     e16:	e8 5b       	subi	r30, 0xB8	; 184
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	80 81       	ld	r24, Z
     e1c:	8b 32       	cpi	r24, 0x2B	; 43
     e1e:	31 f0       	breq	.+12     	; 0xe2c <main+0x2ce>
     e20:	fe 01       	movw	r30, r28
     e22:	e8 5b       	subi	r30, 0xB8	; 184
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	8d 32       	cpi	r24, 0x2D	; 45
     e2a:	71 f7       	brne	.-36     	; 0xe08 <main+0x2aa>
				if( menu== '+')
     e2c:	fe 01       	movw	r30, r28
     e2e:	e8 5b       	subi	r30, 0xB8	; 184
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 81       	ld	r24, Z
     e34:	8b 32       	cpi	r24, 0x2B	; 43
     e36:	09 f0       	breq	.+2      	; 0xe3a <main+0x2dc>
     e38:	3f c2       	rjmp	.+1150   	; 0x12b8 <main+0x75a>
				{
					/* display enter pass on LCD*/
					LCD_clearScreen();
     e3a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
					LCD_displayString("Plez Enter Pass");
     e3e:	89 ea       	ldi	r24, 0xA9	; 169
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
					LCD_moveCursor(1,0);
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
     e4e:	fe 01       	movw	r30, r28
     e50:	e5 5b       	subi	r30, 0xB5	; 181
     e52:	ff 4f       	sbci	r31, 0xFF	; 255
     e54:	10 82       	st	Z, r1
     e56:	a1 c0       	rjmp	.+322    	; 0xf9a <main+0x43c>
					{
						arr1[i]=KEYPAD_getPressedKey();
     e58:	fe 01       	movw	r30, r28
     e5a:	e5 5b       	subi	r30, 0xB5	; 181
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	80 81       	ld	r24, Z
     e60:	08 2f       	mov	r16, r24
     e62:	10 e0       	ldi	r17, 0x00	; 0
     e64:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
     e68:	28 2f       	mov	r18, r24
     e6a:	ce 01       	movw	r24, r28
     e6c:	84 5b       	subi	r24, 0xB4	; 180
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	fc 01       	movw	r30, r24
     e72:	e0 0f       	add	r30, r16
     e74:	f1 1f       	adc	r31, r17
     e76:	20 83       	st	Z, r18
						LCD_displayCharacter('*');
     e78:	8a e2       	ldi	r24, 0x2A	; 42
     e7a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
     e7e:	fe 01       	movw	r30, r28
     e80:	ed 5b       	subi	r30, 0xBD	; 189
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	aa ef       	ldi	r26, 0xFA	; 250
     e8a:	b3 e4       	ldi	r27, 0x43	; 67
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	8e 01       	movw	r16, r28
     e96:	01 5c       	subi	r16, 0xC1	; 193
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	ed 5b       	subi	r30, 0xBD	; 189
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a e7       	ldi	r20, 0x7A	; 122
     eae:	53 e4       	ldi	r21, 0x43	; 67
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec2:	fe 01       	movw	r30, r28
     ec4:	ff 96       	adiw	r30, 0x3f	; 63
     ec6:	60 81       	ld	r22, Z
     ec8:	71 81       	ldd	r23, Z+1	; 0x01
     eca:	82 81       	ldd	r24, Z+2	; 0x02
     ecc:	93 81       	ldd	r25, Z+3	; 0x03
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	40 e8       	ldi	r20, 0x80	; 128
     ed4:	5f e3       	ldi	r21, 0x3F	; 63
     ed6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     eda:	88 23       	and	r24, r24
     edc:	2c f4       	brge	.+10     	; 0xee8 <main+0x38a>
		__ticks = 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	9e af       	std	Y+62, r25	; 0x3e
     ee4:	8d af       	std	Y+61, r24	; 0x3d
     ee6:	46 c0       	rjmp	.+140    	; 0xf74 <main+0x416>
	else if (__tmp > 65535)
     ee8:	fe 01       	movw	r30, r28
     eea:	ff 96       	adiw	r30, 0x3f	; 63
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	82 81       	ldd	r24, Z+2	; 0x02
     ef2:	93 81       	ldd	r25, Z+3	; 0x03
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	3f ef       	ldi	r19, 0xFF	; 255
     ef8:	4f e7       	ldi	r20, 0x7F	; 127
     efa:	57 e4       	ldi	r21, 0x47	; 71
     efc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f00:	18 16       	cp	r1, r24
     f02:	64 f5       	brge	.+88     	; 0xf5c <main+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f04:	fe 01       	movw	r30, r28
     f06:	ed 5b       	subi	r30, 0xBD	; 189
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	60 81       	ld	r22, Z
     f0c:	71 81       	ldd	r23, Z+1	; 0x01
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	9e af       	std	Y+62, r25	; 0x3e
     f30:	8d af       	std	Y+61, r24	; 0x3d
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <main+0x3f4>
     f34:	89 e1       	ldi	r24, 0x19	; 25
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	9c af       	std	Y+60, r25	; 0x3c
     f3a:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3c:	8b ad       	ldd	r24, Y+59	; 0x3b
     f3e:	9c ad       	ldd	r25, Y+60	; 0x3c
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <main+0x3e2>
     f44:	9c af       	std	Y+60, r25	; 0x3c
     f46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	8d ad       	ldd	r24, Y+61	; 0x3d
     f4a:	9e ad       	ldd	r25, Y+62	; 0x3e
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	9e af       	std	Y+62, r25	; 0x3e
     f50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	8d ad       	ldd	r24, Y+61	; 0x3d
     f54:	9e ad       	ldd	r25, Y+62	; 0x3e
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	69 f7       	brne	.-38     	; 0xf34 <main+0x3d6>
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <main+0x42a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	fe 01       	movw	r30, r28
     f5e:	ff 96       	adiw	r30, 0x3f	; 63
     f60:	60 81       	ld	r22, Z
     f62:	71 81       	ldd	r23, Z+1	; 0x01
     f64:	82 81       	ldd	r24, Z+2	; 0x02
     f66:	93 81       	ldd	r25, Z+3	; 0x03
     f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	9e af       	std	Y+62, r25	; 0x3e
     f72:	8d af       	std	Y+61, r24	; 0x3d
     f74:	8d ad       	ldd	r24, Y+61	; 0x3d
     f76:	9e ad       	ldd	r25, Y+62	; 0x3e
     f78:	9a af       	std	Y+58, r25	; 0x3a
     f7a:	89 af       	std	Y+57, r24	; 0x39
     f7c:	89 ad       	ldd	r24, Y+57	; 0x39
     f7e:	9a ad       	ldd	r25, Y+58	; 0x3a
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <main+0x422>
     f84:	9a af       	std	Y+58, r25	; 0x3a
     f86:	89 af       	std	Y+57, r24	; 0x39
					/* display enter pass on LCD*/
					LCD_clearScreen();
					LCD_displayString("Plez Enter Pass");
					LCD_moveCursor(1,0);
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
     f88:	de 01       	movw	r26, r28
     f8a:	a5 5b       	subi	r26, 0xB5	; 181
     f8c:	bf 4f       	sbci	r27, 0xFF	; 255
     f8e:	fe 01       	movw	r30, r28
     f90:	e5 5b       	subi	r30, 0xB5	; 181
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	8c 93       	st	X, r24
     f9a:	fe 01       	movw	r30, r28
     f9c:	e5 5b       	subi	r30, 0xB5	; 181
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	85 30       	cpi	r24, 0x05	; 5
     fa4:	08 f4       	brcc	.+2      	; 0xfa8 <main+0x44a>
     fa6:	58 cf       	rjmp	.-336    	; 0xe58 <main+0x2fa>
						arr1[i]=KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						/* wait half sec to avoid high running operations while pressing the keypad buttons*/
						_delay_ms(500);
					}
					if(KEYPAD_getPressedKey() ==13)/* when enter is pressed*/
     fa8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
     fac:	8d 30       	cpi	r24, 0x0D	; 13
     fae:	09 f0       	breq	.+2      	; 0xfb2 <main+0x454>
     fb0:	6e c3       	rjmp	.+1756   	; 0x168e <main+0xb30>
					{
						UART_sendByte(MC1_READY);/* send MC1_READY to the control ECU to notice him i'm start sending*/
     fb2:	80 e1       	ldi	r24, 0x10	; 16
     fb4:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
						UART_sendString(arr1);/* send taken pass*/
     fb8:	ce 01       	movw	r24, r28
     fba:	84 5b       	subi	r24, 0xB4	; 180
     fbc:	9f 4f       	sbci	r25, 0xFF	; 255
     fbe:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>
						UART_sendByte('+'); /* send the running operation symbol*/
     fc2:	8b e2       	ldi	r24, 0x2B	; 43
     fc4:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>

						/* wait until the MC2 finished its operations and it is start sending*/
						while(UART_recieveByte() != MC1_READY){}
     fc8:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
     fcc:	80 31       	cpi	r24, 0x10	; 16
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <main+0x46a>
						if(UART_recieveByte() == MATCHED)/* check if the MC2 send matched passes*/
     fd0:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
     fd4:	8f 30       	cpi	r24, 0x0F	; 15
     fd6:	09 f0       	breq	.+2      	; 0xfda <main+0x47c>
     fd8:	3e c0       	rjmp	.+124    	; 0x1056 <main+0x4f8>
						{

							LCD_clearScreen(); /* clear screen*/
     fda:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Door is Unlocking");
     fde:	89 eb       	ldi	r24, 0xB9	; 185
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							Timer1_init(&Timer_Conf);/* Initialize timer 1*/
     fe6:	ce 01       	movw	r24, r28
     fe8:	86 5a       	subi	r24, 0xA6	; 166
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	0e 94 c6 1a 	call	0x358c	; 0x358c <Timer1_init>
							while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
     ff0:	80 91 0a 01 	lds	r24, 0x010A
     ff4:	85 30       	cpi	r24, 0x05	; 5
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <main+0x492>
							g_tick=0; /* clear the g_tick for next time*/
     ff8:	10 92 0a 01 	sts	0x010A, r1
							LCD_clearScreen();
     ffc:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Door is open");
    1000:	8b ec       	ldi	r24, 0xCB	; 203
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							while(g_tick!=1){}/* wait until the g_tick increment to 1 (1*3=3SEC)*/
    1008:	80 91 0a 01 	lds	r24, 0x010A
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	e1 f7       	brne	.-8      	; 0x1008 <main+0x4aa>
							g_tick=0;/* clear the g_tick for next time*/
    1010:	10 92 0a 01 	sts	0x010A, r1
							LCD_clearScreen();
    1014:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Door is locking");
    1018:	88 ed       	ldi	r24, 0xD8	; 216
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							while(g_tick!=5){}/* wait until the g_tick increment to 5 (5*3=15SEC)*/
    1020:	80 91 0a 01 	lds	r24, 0x010A
    1024:	85 30       	cpi	r24, 0x05	; 5
    1026:	e1 f7       	brne	.-8      	; 0x1020 <main+0x4c2>
							g_tick=0; /* clear the g_tick for next time*/
    1028:	10 92 0a 01 	sts	0x010A, r1
							Timer1_deInit(); /* deinit timer 1*/
    102c:	0e 94 19 1b 	call	0x3632	; 0x3632 <Timer1_deInit>
							LCD_clearScreen();
    1030:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Plz Enter Pass");
    1034:	80 e6       	ldi	r24, 0x60	; 96
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							LCD_moveCursor(1,0);
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
							i=0; /* clear i variable to repeat step 1*/
    1044:	fe 01       	movw	r30, r28
    1046:	e5 5b       	subi	r30, 0xB5	; 181
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	10 82       	st	Z, r1
							Enter_flag =0; /* clear Enter_flag variable to repeat step 1*/
    104c:	fe 01       	movw	r30, r28
    104e:	e9 5b       	subi	r30, 0xB9	; 185
    1050:	ff 4f       	sbci	r31, 0xFF	; 255
    1052:	10 82       	st	Z, r1
    1054:	1c c3       	rjmp	.+1592   	; 0x168e <main+0xb30>

						}
						else
						{
							/* repeat the previous operations twice or until the user enter correct pass*/
							for(j=0;j<2;j++)
    1056:	fe 01       	movw	r30, r28
    1058:	e6 5b       	subi	r30, 0xB6	; 182
    105a:	ff 4f       	sbci	r31, 0xFF	; 255
    105c:	10 82       	st	Z, r1
    105e:	03 c1       	rjmp	.+518    	; 0x1266 <main+0x708>
							{
								LCD_clearScreen();
    1060:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
								LCD_displayString("Plez Enter Pass");
    1064:	89 ea       	ldi	r24, 0xA9	; 169
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
								LCD_moveCursor(1,0);
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
								for(i=0;i<5;i++)
    1074:	fe 01       	movw	r30, r28
    1076:	e5 5b       	subi	r30, 0xB5	; 181
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	10 82       	st	Z, r1
    107c:	8e c0       	rjmp	.+284    	; 0x119a <main+0x63c>
								{
									arr1[i]=KEYPAD_getPressedKey();
    107e:	fe 01       	movw	r30, r28
    1080:	e5 5b       	subi	r30, 0xB5	; 181
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	80 81       	ld	r24, Z
    1086:	08 2f       	mov	r16, r24
    1088:	10 e0       	ldi	r17, 0x00	; 0
    108a:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    108e:	28 2f       	mov	r18, r24
    1090:	ce 01       	movw	r24, r28
    1092:	84 5b       	subi	r24, 0xB4	; 180
    1094:	9f 4f       	sbci	r25, 0xFF	; 255
    1096:	fc 01       	movw	r30, r24
    1098:	e0 0f       	add	r30, r16
    109a:	f1 1f       	adc	r31, r17
    109c:	20 83       	st	Z, r18
									LCD_displayCharacter('*');
    109e:	8a e2       	ldi	r24, 0x2A	; 42
    10a0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	aa ef       	ldi	r26, 0xFA	; 250
    10aa:	b3 e4       	ldi	r27, 0x43	; 67
    10ac:	8d ab       	std	Y+53, r24	; 0x35
    10ae:	9e ab       	std	Y+54, r25	; 0x36
    10b0:	af ab       	std	Y+55, r26	; 0x37
    10b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b4:	6d a9       	ldd	r22, Y+53	; 0x35
    10b6:	7e a9       	ldd	r23, Y+54	; 0x36
    10b8:	8f a9       	ldd	r24, Y+55	; 0x37
    10ba:	98 ad       	ldd	r25, Y+56	; 0x38
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	4a e7       	ldi	r20, 0x7A	; 122
    10c2:	53 e4       	ldi	r21, 0x43	; 67
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	89 ab       	std	Y+49, r24	; 0x31
    10ce:	9a ab       	std	Y+50, r25	; 0x32
    10d0:	ab ab       	std	Y+51, r26	; 0x33
    10d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10d4:	69 a9       	ldd	r22, Y+49	; 0x31
    10d6:	7a a9       	ldd	r23, Y+50	; 0x32
    10d8:	8b a9       	ldd	r24, Y+51	; 0x33
    10da:	9c a9       	ldd	r25, Y+52	; 0x34
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e8       	ldi	r20, 0x80	; 128
    10e2:	5f e3       	ldi	r21, 0x3F	; 63
    10e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e8:	88 23       	and	r24, r24
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <main+0x598>
		__ticks = 1;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	98 ab       	std	Y+48, r25	; 0x30
    10f2:	8f a7       	std	Y+47, r24	; 0x2f
    10f4:	3f c0       	rjmp	.+126    	; 0x1174 <main+0x616>
	else if (__tmp > 65535)
    10f6:	69 a9       	ldd	r22, Y+49	; 0x31
    10f8:	7a a9       	ldd	r23, Y+50	; 0x32
    10fa:	8b a9       	ldd	r24, Y+51	; 0x33
    10fc:	9c a9       	ldd	r25, Y+52	; 0x34
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	3f ef       	ldi	r19, 0xFF	; 255
    1102:	4f e7       	ldi	r20, 0x7F	; 127
    1104:	57 e4       	ldi	r21, 0x47	; 71
    1106:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    110a:	18 16       	cp	r1, r24
    110c:	4c f5       	brge	.+82     	; 0x1160 <main+0x602>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110e:	6d a9       	ldd	r22, Y+53	; 0x35
    1110:	7e a9       	ldd	r23, Y+54	; 0x36
    1112:	8f a9       	ldd	r24, Y+55	; 0x37
    1114:	98 ad       	ldd	r25, Y+56	; 0x38
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e2       	ldi	r20, 0x20	; 32
    111c:	51 e4       	ldi	r21, 0x41	; 65
    111e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	98 ab       	std	Y+48, r25	; 0x30
    1134:	8f a7       	std	Y+47, r24	; 0x2f
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <main+0x5f8>
    1138:	89 e1       	ldi	r24, 0x19	; 25
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	9e a7       	std	Y+46, r25	; 0x2e
    113e:	8d a7       	std	Y+45, r24	; 0x2d
    1140:	8d a5       	ldd	r24, Y+45	; 0x2d
    1142:	9e a5       	ldd	r25, Y+46	; 0x2e
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <main+0x5e6>
    1148:	9e a7       	std	Y+46, r25	; 0x2e
    114a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114c:	8f a5       	ldd	r24, Y+47	; 0x2f
    114e:	98 a9       	ldd	r25, Y+48	; 0x30
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	98 ab       	std	Y+48, r25	; 0x30
    1154:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1156:	8f a5       	ldd	r24, Y+47	; 0x2f
    1158:	98 a9       	ldd	r25, Y+48	; 0x30
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	69 f7       	brne	.-38     	; 0x1138 <main+0x5da>
    115e:	14 c0       	rjmp	.+40     	; 0x1188 <main+0x62a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1160:	69 a9       	ldd	r22, Y+49	; 0x31
    1162:	7a a9       	ldd	r23, Y+50	; 0x32
    1164:	8b a9       	ldd	r24, Y+51	; 0x33
    1166:	9c a9       	ldd	r25, Y+52	; 0x34
    1168:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	98 ab       	std	Y+48, r25	; 0x30
    1172:	8f a7       	std	Y+47, r24	; 0x2f
    1174:	8f a5       	ldd	r24, Y+47	; 0x2f
    1176:	98 a9       	ldd	r25, Y+48	; 0x30
    1178:	9c a7       	std	Y+44, r25	; 0x2c
    117a:	8b a7       	std	Y+43, r24	; 0x2b
    117c:	8b a5       	ldd	r24, Y+43	; 0x2b
    117e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	f1 f7       	brne	.-4      	; 0x1180 <main+0x622>
    1184:	9c a7       	std	Y+44, r25	; 0x2c
    1186:	8b a7       	std	Y+43, r24	; 0x2b
							for(j=0;j<2;j++)
							{
								LCD_clearScreen();
								LCD_displayString("Plez Enter Pass");
								LCD_moveCursor(1,0);
								for(i=0;i<5;i++)
    1188:	de 01       	movw	r26, r28
    118a:	a5 5b       	subi	r26, 0xB5	; 181
    118c:	bf 4f       	sbci	r27, 0xFF	; 255
    118e:	fe 01       	movw	r30, r28
    1190:	e5 5b       	subi	r30, 0xB5	; 181
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	80 81       	ld	r24, Z
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	8c 93       	st	X, r24
    119a:	fe 01       	movw	r30, r28
    119c:	e5 5b       	subi	r30, 0xB5	; 181
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <main+0x64a>
    11a6:	6b cf       	rjmp	.-298    	; 0x107e <main+0x520>
								{
									arr1[i]=KEYPAD_getPressedKey();
									LCD_displayCharacter('*');
									_delay_ms(500);
								}
								if(KEYPAD_getPressedKey()==13)
    11a8:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    11ac:	8d 30       	cpi	r24, 0x0D	; 13
    11ae:	59 f4       	brne	.+22     	; 0x11c6 <main+0x668>
								{
									UART_sendByte(MC1_READY);
    11b0:	80 e1       	ldi	r24, 0x10	; 16
    11b2:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
									UART_sendString(arr1);
    11b6:	ce 01       	movw	r24, r28
    11b8:	84 5b       	subi	r24, 0xB4	; 180
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>
									UART_sendByte('+');
    11c0:	8b e2       	ldi	r24, 0x2B	; 43
    11c2:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
								}
								while(UART_recieveByte() != MC1_READY){}
    11c6:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    11ca:	80 31       	cpi	r24, 0x10	; 16
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <main+0x668>
								if(UART_recieveByte() == MATCHED)
    11ce:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    11d2:	8f 30       	cpi	r24, 0x0F	; 15
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <main+0x67a>
    11d6:	3e c0       	rjmp	.+124    	; 0x1254 <main+0x6f6>
								{
									LCD_clearScreen();
    11d8:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
									LCD_displayString("Door is Unlocking");
    11dc:	89 eb       	ldi	r24, 0xB9	; 185
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
									Timer1_init(&Timer_Conf);
    11e4:	ce 01       	movw	r24, r28
    11e6:	86 5a       	subi	r24, 0xA6	; 166
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	0e 94 c6 1a 	call	0x358c	; 0x358c <Timer1_init>
									while(g_tick!=5){}
    11ee:	80 91 0a 01 	lds	r24, 0x010A
    11f2:	85 30       	cpi	r24, 0x05	; 5
    11f4:	e1 f7       	brne	.-8      	; 0x11ee <main+0x690>
									g_tick=0;
    11f6:	10 92 0a 01 	sts	0x010A, r1
									LCD_clearScreen();
    11fa:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
									LCD_displayString("Door is open");
    11fe:	8b ec       	ldi	r24, 0xCB	; 203
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
									while(g_tick!=1){}
    1206:	80 91 0a 01 	lds	r24, 0x010A
    120a:	81 30       	cpi	r24, 0x01	; 1
    120c:	e1 f7       	brne	.-8      	; 0x1206 <main+0x6a8>
									g_tick=0;
    120e:	10 92 0a 01 	sts	0x010A, r1
									LCD_clearScreen();
    1212:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
									LCD_displayString("Door is locking");
    1216:	88 ed       	ldi	r24, 0xD8	; 216
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
									while(g_tick!=5){}
    121e:	80 91 0a 01 	lds	r24, 0x010A
    1222:	85 30       	cpi	r24, 0x05	; 5
    1224:	e1 f7       	brne	.-8      	; 0x121e <main+0x6c0>
									g_tick=0;
    1226:	10 92 0a 01 	sts	0x010A, r1
									Timer1_deInit();
    122a:	0e 94 19 1b 	call	0x3632	; 0x3632 <Timer1_deInit>
									LCD_clearScreen();
    122e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
									LCD_displayString("Plz Enter Pass");
    1232:	80 e6       	ldi	r24, 0x60	; 96
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
									LCD_moveCursor(1,0);
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
									i=0;
    1242:	fe 01       	movw	r30, r28
    1244:	e5 5b       	subi	r30, 0xB5	; 181
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	10 82       	st	Z, r1
									Enter_flag =0;
    124a:	fe 01       	movw	r30, r28
    124c:	e9 5b       	subi	r30, 0xB9	; 185
    124e:	ff 4f       	sbci	r31, 0xFF	; 255
    1250:	10 82       	st	Z, r1
    1252:	10 c0       	rjmp	.+32     	; 0x1274 <main+0x716>

						}
						else
						{
							/* repeat the previous operations twice or until the user enter correct pass*/
							for(j=0;j<2;j++)
    1254:	de 01       	movw	r26, r28
    1256:	a6 5b       	subi	r26, 0xB6	; 182
    1258:	bf 4f       	sbci	r27, 0xFF	; 255
    125a:	fe 01       	movw	r30, r28
    125c:	e6 5b       	subi	r30, 0xB6	; 182
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	80 81       	ld	r24, Z
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	8c 93       	st	X, r24
    1266:	fe 01       	movw	r30, r28
    1268:	e6 5b       	subi	r30, 0xB6	; 182
    126a:	ff 4f       	sbci	r31, 0xFF	; 255
    126c:	80 81       	ld	r24, Z
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	08 f4       	brcc	.+2      	; 0x1274 <main+0x716>
    1272:	f6 ce       	rjmp	.-532    	; 0x1060 <main+0x502>
									Enter_flag =0;
									break;
								}

							}
							while(UART_recieveByte() != MC1_READY){}
    1274:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	e1 f7       	brne	.-8      	; 0x1274 <main+0x716>
							/* if the pass unmatched 3 times do the following code*/
							if(UART_recieveByte() == UNMATCHED)
    127c:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    1280:	8f 3f       	cpi	r24, 0xFF	; 255
    1282:	09 f0       	breq	.+2      	; 0x1286 <main+0x728>
    1284:	04 c2       	rjmp	.+1032   	; 0x168e <main+0xb30>
							{LCD_clearScreen();
    1286:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("WRONG PASS!"); /* display Wrong pass on LCD*/
    128a:	88 ee       	ldi	r24, 0xE8	; 232
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							Timer1_init(&Timer_Conf);/* Initialize timer 1*/
    1292:	ce 01       	movw	r24, r28
    1294:	86 5a       	subi	r24, 0xA6	; 166
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	0e 94 c6 1a 	call	0x358c	; 0x358c <Timer1_init>
							while(g_tick!=20){}/* wait until the g_tick increment to 20 (20*3=60SEC=1minute)*/
    129c:	80 91 0a 01 	lds	r24, 0x010A
    12a0:	84 31       	cpi	r24, 0x14	; 20
    12a2:	e1 f7       	brne	.-8      	; 0x129c <main+0x73e>
							g_tick=0;/* clear the g_tick for next time*/
    12a4:	10 92 0a 01 	sts	0x010A, r1
							Timer1_deInit();/* deinit timer 1*/
    12a8:	0e 94 19 1b 	call	0x3632	; 0x3632 <Timer1_deInit>
							Enter_flag = 3; /* store 3 in Enter_flag to repeat menu operations*/
    12ac:	fe 01       	movw	r30, r28
    12ae:	e9 5b       	subi	r30, 0xB9	; 185
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	80 83       	st	Z, r24
    12b6:	eb c1       	rjmp	.+982    	; 0x168e <main+0xb30>

						}
					}

				}
				else if(menu == '-')
    12b8:	fe 01       	movw	r30, r28
    12ba:	e8 5b       	subi	r30, 0xB8	; 184
    12bc:	ff 4f       	sbci	r31, 0xFF	; 255
    12be:	80 81       	ld	r24, Z
    12c0:	8d 32       	cpi	r24, 0x2D	; 45
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <main+0x768>
    12c4:	e4 c1       	rjmp	.+968    	; 0x168e <main+0xb30>
				{
					/* display enter pass on LCD*/
					LCD_clearScreen();
    12c6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
					LCD_displayString("Plez Enter Pass");
    12ca:	89 ea       	ldi	r24, 0xA9	; 169
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
					LCD_moveCursor(1,0);
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    12da:	fe 01       	movw	r30, r28
    12dc:	e5 5b       	subi	r30, 0xB5	; 181
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	10 82       	st	Z, r1
    12e2:	8e c0       	rjmp	.+284    	; 0x1400 <main+0x8a2>
					{
						arr1[i]=KEYPAD_getPressedKey();
    12e4:	fe 01       	movw	r30, r28
    12e6:	e5 5b       	subi	r30, 0xB5	; 181
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	08 2f       	mov	r16, r24
    12ee:	10 e0       	ldi	r17, 0x00	; 0
    12f0:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    12f4:	28 2f       	mov	r18, r24
    12f6:	ce 01       	movw	r24, r28
    12f8:	84 5b       	subi	r24, 0xB4	; 180
    12fa:	9f 4f       	sbci	r25, 0xFF	; 255
    12fc:	fc 01       	movw	r30, r24
    12fe:	e0 0f       	add	r30, r16
    1300:	f1 1f       	adc	r31, r17
    1302:	20 83       	st	Z, r18
						LCD_displayCharacter('*');
    1304:	8a e2       	ldi	r24, 0x2A	; 42
    1306:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	aa ef       	ldi	r26, 0xFA	; 250
    1310:	b3 e4       	ldi	r27, 0x43	; 67
    1312:	8f a3       	std	Y+39, r24	; 0x27
    1314:	98 a7       	std	Y+40, r25	; 0x28
    1316:	a9 a7       	std	Y+41, r26	; 0x29
    1318:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131a:	6f a1       	ldd	r22, Y+39	; 0x27
    131c:	78 a5       	ldd	r23, Y+40	; 0x28
    131e:	89 a5       	ldd	r24, Y+41	; 0x29
    1320:	9a a5       	ldd	r25, Y+42	; 0x2a
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4a e7       	ldi	r20, 0x7A	; 122
    1328:	53 e4       	ldi	r21, 0x43	; 67
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	8b a3       	std	Y+35, r24	; 0x23
    1334:	9c a3       	std	Y+36, r25	; 0x24
    1336:	ad a3       	std	Y+37, r26	; 0x25
    1338:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    133a:	6b a1       	ldd	r22, Y+35	; 0x23
    133c:	7c a1       	ldd	r23, Y+36	; 0x24
    133e:	8d a1       	ldd	r24, Y+37	; 0x25
    1340:	9e a1       	ldd	r25, Y+38	; 0x26
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	40 e8       	ldi	r20, 0x80	; 128
    1348:	5f e3       	ldi	r21, 0x3F	; 63
    134a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    134e:	88 23       	and	r24, r24
    1350:	2c f4       	brge	.+10     	; 0x135c <main+0x7fe>
		__ticks = 1;
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9a a3       	std	Y+34, r25	; 0x22
    1358:	89 a3       	std	Y+33, r24	; 0x21
    135a:	3f c0       	rjmp	.+126    	; 0x13da <main+0x87c>
	else if (__tmp > 65535)
    135c:	6b a1       	ldd	r22, Y+35	; 0x23
    135e:	7c a1       	ldd	r23, Y+36	; 0x24
    1360:	8d a1       	ldd	r24, Y+37	; 0x25
    1362:	9e a1       	ldd	r25, Y+38	; 0x26
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	3f ef       	ldi	r19, 0xFF	; 255
    1368:	4f e7       	ldi	r20, 0x7F	; 127
    136a:	57 e4       	ldi	r21, 0x47	; 71
    136c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1370:	18 16       	cp	r1, r24
    1372:	4c f5       	brge	.+82     	; 0x13c6 <main+0x868>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1374:	6f a1       	ldd	r22, Y+39	; 0x27
    1376:	78 a5       	ldd	r23, Y+40	; 0x28
    1378:	89 a5       	ldd	r24, Y+41	; 0x29
    137a:	9a a5       	ldd	r25, Y+42	; 0x2a
    137c:	20 e0       	ldi	r18, 0x00	; 0
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	40 e2       	ldi	r20, 0x20	; 32
    1382:	51 e4       	ldi	r21, 0x41	; 65
    1384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9a a3       	std	Y+34, r25	; 0x22
    139a:	89 a3       	std	Y+33, r24	; 0x21
    139c:	0f c0       	rjmp	.+30     	; 0x13bc <main+0x85e>
    139e:	89 e1       	ldi	r24, 0x19	; 25
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	98 a3       	std	Y+32, r25	; 0x20
    13a4:	8f 8f       	std	Y+31, r24	; 0x1f
    13a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13a8:	98 a1       	ldd	r25, Y+32	; 0x20
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <main+0x84c>
    13ae:	98 a3       	std	Y+32, r25	; 0x20
    13b0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b2:	89 a1       	ldd	r24, Y+33	; 0x21
    13b4:	9a a1       	ldd	r25, Y+34	; 0x22
    13b6:	01 97       	sbiw	r24, 0x01	; 1
    13b8:	9a a3       	std	Y+34, r25	; 0x22
    13ba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13bc:	89 a1       	ldd	r24, Y+33	; 0x21
    13be:	9a a1       	ldd	r25, Y+34	; 0x22
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	69 f7       	brne	.-38     	; 0x139e <main+0x840>
    13c4:	14 c0       	rjmp	.+40     	; 0x13ee <main+0x890>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c6:	6b a1       	ldd	r22, Y+35	; 0x23
    13c8:	7c a1       	ldd	r23, Y+36	; 0x24
    13ca:	8d a1       	ldd	r24, Y+37	; 0x25
    13cc:	9e a1       	ldd	r25, Y+38	; 0x26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9a a3       	std	Y+34, r25	; 0x22
    13d8:	89 a3       	std	Y+33, r24	; 0x21
    13da:	89 a1       	ldd	r24, Y+33	; 0x21
    13dc:	9a a1       	ldd	r25, Y+34	; 0x22
    13de:	9e 8f       	std	Y+30, r25	; 0x1e
    13e0:	8d 8f       	std	Y+29, r24	; 0x1d
    13e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13e4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	f1 f7       	brne	.-4      	; 0x13e6 <main+0x888>
    13ea:	9e 8f       	std	Y+30, r25	; 0x1e
    13ec:	8d 8f       	std	Y+29, r24	; 0x1d
					/* display enter pass on LCD*/
					LCD_clearScreen();
					LCD_displayString("Plez Enter Pass");
					LCD_moveCursor(1,0);
					/* for loop to take the pass entered by user and store it on array1*/
					for(i=0;i<5;i++)
    13ee:	de 01       	movw	r26, r28
    13f0:	a5 5b       	subi	r26, 0xB5	; 181
    13f2:	bf 4f       	sbci	r27, 0xFF	; 255
    13f4:	fe 01       	movw	r30, r28
    13f6:	e5 5b       	subi	r30, 0xB5	; 181
    13f8:	ff 4f       	sbci	r31, 0xFF	; 255
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 5f       	subi	r24, 0xFF	; 255
    13fe:	8c 93       	st	X, r24
    1400:	fe 01       	movw	r30, r28
    1402:	e5 5b       	subi	r30, 0xB5	; 181
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 81       	ld	r24, Z
    1408:	85 30       	cpi	r24, 0x05	; 5
    140a:	08 f4       	brcc	.+2      	; 0x140e <main+0x8b0>
    140c:	6b cf       	rjmp	.-298    	; 0x12e4 <main+0x786>
						arr1[i]=KEYPAD_getPressedKey();
						LCD_displayCharacter('*');
						/* wait half sec to avoid high running operations while pressing the keypad buttons*/
						_delay_ms(500);
					}
					if(KEYPAD_getPressedKey() ==13) /* when enter is pressed*/
    140e:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    1412:	8d 30       	cpi	r24, 0x0D	; 13
    1414:	59 f4       	brne	.+22     	; 0x142c <main+0x8ce>
					{
						UART_sendByte(MC1_READY);/* send MC1_READY to the control ECU to notice him i'm start sending*/
    1416:	80 e1       	ldi	r24, 0x10	; 16
    1418:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
						UART_sendString(arr1);/* send taken pass*/
    141c:	ce 01       	movw	r24, r28
    141e:	84 5b       	subi	r24, 0xB4	; 180
    1420:	9f 4f       	sbci	r25, 0xFF	; 255
    1422:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>
						UART_sendByte('-');/* send the running operation symbol*/
    1426:	8d e2       	ldi	r24, 0x2D	; 45
    1428:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
					}
					while(UART_recieveByte() != MC1_READY){}
    142c:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    1430:	80 31       	cpi	r24, 0x10	; 16
    1432:	e1 f7       	brne	.-8      	; 0x142c <main+0x8ce>

					if(UART_recieveByte() == MATCHED)/* if the sent pass matched with pass stored in EEPROM do the following*/
    1434:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    1438:	8f 30       	cpi	r24, 0x0F	; 15
    143a:	99 f4       	brne	.+38     	; 0x1462 <main+0x904>
					{
						/* clear screen and repeat the step 1 again*/
						LCD_clearScreen();
    143c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
						LCD_displayString("Plz Enter Pass");
    1440:	80 e6       	ldi	r24, 0x60	; 96
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
						LCD_moveCursor(1,0);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
						i=0;
    1450:	fe 01       	movw	r30, r28
    1452:	e5 5b       	subi	r30, 0xB5	; 181
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	10 82       	st	Z, r1
						Enter_flag =0;
    1458:	fe 01       	movw	r30, r28
    145a:	e9 5b       	subi	r30, 0xB9	; 185
    145c:	ff 4f       	sbci	r31, 0xFF	; 255
    145e:	10 82       	st	Z, r1
    1460:	16 c1       	rjmp	.+556    	; 0x168e <main+0xb30>
					}
					else
					{
						/* repeat the previous operations twice or until the user enter correct pass*/
						for(j=0;j<2;j++)
    1462:	fe 01       	movw	r30, r28
    1464:	e6 5b       	subi	r30, 0xB6	; 182
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	10 82       	st	Z, r1
    146a:	d7 c0       	rjmp	.+430    	; 0x161a <main+0xabc>
						{
							LCD_clearScreen();
    146c:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Plez Enter Pass");
    1470:	89 ea       	ldi	r24, 0xA9	; 169
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							LCD_moveCursor(1,0);
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	60 e0       	ldi	r22, 0x00	; 0
    147c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
							for(i=0;i<5;i++)
    1480:	fe 01       	movw	r30, r28
    1482:	e5 5b       	subi	r30, 0xB5	; 181
    1484:	ff 4f       	sbci	r31, 0xFF	; 255
    1486:	10 82       	st	Z, r1
    1488:	8e c0       	rjmp	.+284    	; 0x15a6 <main+0xa48>
							{
								arr1[i]=KEYPAD_getPressedKey();
    148a:	fe 01       	movw	r30, r28
    148c:	e5 5b       	subi	r30, 0xB5	; 181
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 81       	ld	r24, Z
    1492:	08 2f       	mov	r16, r24
    1494:	10 e0       	ldi	r17, 0x00	; 0
    1496:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    149a:	28 2f       	mov	r18, r24
    149c:	ce 01       	movw	r24, r28
    149e:	84 5b       	subi	r24, 0xB4	; 180
    14a0:	9f 4f       	sbci	r25, 0xFF	; 255
    14a2:	fc 01       	movw	r30, r24
    14a4:	e0 0f       	add	r30, r16
    14a6:	f1 1f       	adc	r31, r17
    14a8:	20 83       	st	Z, r18
								LCD_displayCharacter('*');
    14aa:	8a e2       	ldi	r24, 0x2A	; 42
    14ac:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	aa ef       	ldi	r26, 0xFA	; 250
    14b6:	b3 e4       	ldi	r27, 0x43	; 67
    14b8:	89 8f       	std	Y+25, r24	; 0x19
    14ba:	9a 8f       	std	Y+26, r25	; 0x1a
    14bc:	ab 8f       	std	Y+27, r26	; 0x1b
    14be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c0:	69 8d       	ldd	r22, Y+25	; 0x19
    14c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c8:	20 e0       	ldi	r18, 0x00	; 0
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	4a e7       	ldi	r20, 0x7A	; 122
    14ce:	53 e4       	ldi	r21, 0x43	; 67
    14d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	8d 8b       	std	Y+21, r24	; 0x15
    14da:	9e 8b       	std	Y+22, r25	; 0x16
    14dc:	af 8b       	std	Y+23, r26	; 0x17
    14de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	2c f4       	brge	.+10     	; 0x1502 <main+0x9a4>
		__ticks = 1;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	9c 8b       	std	Y+20, r25	; 0x14
    14fe:	8b 8b       	std	Y+19, r24	; 0x13
    1500:	3f c0       	rjmp	.+126    	; 0x1580 <main+0xa22>
	else if (__tmp > 65535)
    1502:	6d 89       	ldd	r22, Y+21	; 0x15
    1504:	7e 89       	ldd	r23, Y+22	; 0x16
    1506:	8f 89       	ldd	r24, Y+23	; 0x17
    1508:	98 8d       	ldd	r25, Y+24	; 0x18
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	3f ef       	ldi	r19, 0xFF	; 255
    150e:	4f e7       	ldi	r20, 0x7F	; 127
    1510:	57 e4       	ldi	r21, 0x47	; 71
    1512:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1516:	18 16       	cp	r1, r24
    1518:	4c f5       	brge	.+82     	; 0x156c <main+0xa0e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151a:	69 8d       	ldd	r22, Y+25	; 0x19
    151c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    151e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	bc 01       	movw	r22, r24
    1534:	cd 01       	movw	r24, r26
    1536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	9c 8b       	std	Y+20, r25	; 0x14
    1540:	8b 8b       	std	Y+19, r24	; 0x13
    1542:	0f c0       	rjmp	.+30     	; 0x1562 <main+0xa04>
    1544:	89 e1       	ldi	r24, 0x19	; 25
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	9a 8b       	std	Y+18, r25	; 0x12
    154a:	89 8b       	std	Y+17, r24	; 0x11
    154c:	89 89       	ldd	r24, Y+17	; 0x11
    154e:	9a 89       	ldd	r25, Y+18	; 0x12
    1550:	01 97       	sbiw	r24, 0x01	; 1
    1552:	f1 f7       	brne	.-4      	; 0x1550 <main+0x9f2>
    1554:	9a 8b       	std	Y+18, r25	; 0x12
    1556:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1558:	8b 89       	ldd	r24, Y+19	; 0x13
    155a:	9c 89       	ldd	r25, Y+20	; 0x14
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	9c 8b       	std	Y+20, r25	; 0x14
    1560:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1562:	8b 89       	ldd	r24, Y+19	; 0x13
    1564:	9c 89       	ldd	r25, Y+20	; 0x14
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	69 f7       	brne	.-38     	; 0x1544 <main+0x9e6>
    156a:	14 c0       	rjmp	.+40     	; 0x1594 <main+0xa36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156c:	6d 89       	ldd	r22, Y+21	; 0x15
    156e:	7e 89       	ldd	r23, Y+22	; 0x16
    1570:	8f 89       	ldd	r24, Y+23	; 0x17
    1572:	98 8d       	ldd	r25, Y+24	; 0x18
    1574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	9c 8b       	std	Y+20, r25	; 0x14
    157e:	8b 8b       	std	Y+19, r24	; 0x13
    1580:	8b 89       	ldd	r24, Y+19	; 0x13
    1582:	9c 89       	ldd	r25, Y+20	; 0x14
    1584:	98 8b       	std	Y+16, r25	; 0x10
    1586:	8f 87       	std	Y+15, r24	; 0x0f
    1588:	8f 85       	ldd	r24, Y+15	; 0x0f
    158a:	98 89       	ldd	r25, Y+16	; 0x10
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	f1 f7       	brne	.-4      	; 0x158c <main+0xa2e>
    1590:	98 8b       	std	Y+16, r25	; 0x10
    1592:	8f 87       	std	Y+15, r24	; 0x0f
						for(j=0;j<2;j++)
						{
							LCD_clearScreen();
							LCD_displayString("Plez Enter Pass");
							LCD_moveCursor(1,0);
							for(i=0;i<5;i++)
    1594:	de 01       	movw	r26, r28
    1596:	a5 5b       	subi	r26, 0xB5	; 181
    1598:	bf 4f       	sbci	r27, 0xFF	; 255
    159a:	fe 01       	movw	r30, r28
    159c:	e5 5b       	subi	r30, 0xB5	; 181
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	80 81       	ld	r24, Z
    15a2:	8f 5f       	subi	r24, 0xFF	; 255
    15a4:	8c 93       	st	X, r24
    15a6:	fe 01       	movw	r30, r28
    15a8:	e5 5b       	subi	r30, 0xB5	; 181
    15aa:	ff 4f       	sbci	r31, 0xFF	; 255
    15ac:	80 81       	ld	r24, Z
    15ae:	85 30       	cpi	r24, 0x05	; 5
    15b0:	08 f4       	brcc	.+2      	; 0x15b4 <main+0xa56>
    15b2:	6b cf       	rjmp	.-298    	; 0x148a <main+0x92c>
							{
								arr1[i]=KEYPAD_getPressedKey();
								LCD_displayCharacter('*');
								_delay_ms(500);
							}
							if(KEYPAD_getPressedKey() ==13)
    15b4:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <KEYPAD_getPressedKey>
    15b8:	8d 30       	cpi	r24, 0x0D	; 13
    15ba:	59 f4       	brne	.+22     	; 0x15d2 <main+0xa74>
							{
								UART_sendByte(MC1_READY);
    15bc:	80 e1       	ldi	r24, 0x10	; 16
    15be:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
								UART_sendString(arr1);
    15c2:	ce 01       	movw	r24, r28
    15c4:	84 5b       	subi	r24, 0xB4	; 180
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <UART_sendString>
								UART_sendByte('-');
    15cc:	8d e2       	ldi	r24, 0x2D	; 45
    15ce:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
							}
							while(UART_recieveByte() != MC1_READY){}
    15d2:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    15d6:	80 31       	cpi	r24, 0x10	; 16
    15d8:	e1 f7       	brne	.-8      	; 0x15d2 <main+0xa74>
							if(UART_recieveByte() == MATCHED)
    15da:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    15de:	8f 30       	cpi	r24, 0x0F	; 15
    15e0:	99 f4       	brne	.+38     	; 0x1608 <main+0xaaa>
							{LCD_clearScreen();
    15e2:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
							LCD_displayString("Plz Enter Pass");
    15e6:	80 e6       	ldi	r24, 0x60	; 96
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
							LCD_moveCursor(1,0);
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	60 e0       	ldi	r22, 0x00	; 0
    15f2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
							i=0;
    15f6:	fe 01       	movw	r30, r28
    15f8:	e5 5b       	subi	r30, 0xB5	; 181
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	10 82       	st	Z, r1
							Enter_flag =0;
    15fe:	fe 01       	movw	r30, r28
    1600:	e9 5b       	subi	r30, 0xB9	; 185
    1602:	ff 4f       	sbci	r31, 0xFF	; 255
    1604:	10 82       	st	Z, r1
    1606:	10 c0       	rjmp	.+32     	; 0x1628 <main+0xaca>
						Enter_flag =0;
					}
					else
					{
						/* repeat the previous operations twice or until the user enter correct pass*/
						for(j=0;j<2;j++)
    1608:	de 01       	movw	r26, r28
    160a:	a6 5b       	subi	r26, 0xB6	; 182
    160c:	bf 4f       	sbci	r27, 0xFF	; 255
    160e:	fe 01       	movw	r30, r28
    1610:	e6 5b       	subi	r30, 0xB6	; 182
    1612:	ff 4f       	sbci	r31, 0xFF	; 255
    1614:	80 81       	ld	r24, Z
    1616:	8f 5f       	subi	r24, 0xFF	; 255
    1618:	8c 93       	st	X, r24
    161a:	fe 01       	movw	r30, r28
    161c:	e6 5b       	subi	r30, 0xB6	; 182
    161e:	ff 4f       	sbci	r31, 0xFF	; 255
    1620:	80 81       	ld	r24, Z
    1622:	82 30       	cpi	r24, 0x02	; 2
    1624:	08 f4       	brcc	.+2      	; 0x1628 <main+0xaca>
    1626:	22 cf       	rjmp	.-444    	; 0x146c <main+0x90e>
							Enter_flag =0;
							break;
							}

						}
						while(UART_recieveByte() != MC1_READY){}
    1628:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    162c:	80 31       	cpi	r24, 0x10	; 16
    162e:	e1 f7       	brne	.-8      	; 0x1628 <main+0xaca>
						if(UART_recieveByte() == UNMATCHED)/* if the pass unmatched 3 times do the following code*/
    1630:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    1634:	8f 3f       	cpi	r24, 0xFF	; 255
    1636:	59 f5       	brne	.+86     	; 0x168e <main+0xb30>
						{LCD_clearScreen();
    1638:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
						LCD_displayString("WRONG PASS!");
    163c:	88 ee       	ldi	r24, 0xE8	; 232
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
						Timer1_init(&Timer_Conf);
    1644:	ce 01       	movw	r24, r28
    1646:	86 5a       	subi	r24, 0xA6	; 166
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	0e 94 c6 1a 	call	0x358c	; 0x358c <Timer1_init>
						while(g_tick!=20){}
    164e:	80 91 0a 01 	lds	r24, 0x010A
    1652:	84 31       	cpi	r24, 0x14	; 20
    1654:	e1 f7       	brne	.-8      	; 0x164e <main+0xaf0>
						g_tick=0;
    1656:	10 92 0a 01 	sts	0x010A, r1
						Timer1_deInit();
    165a:	0e 94 19 1b 	call	0x3632	; 0x3632 <Timer1_deInit>
						Enter_flag = 3;
    165e:	fe 01       	movw	r30, r28
    1660:	e9 5b       	subi	r30, 0xB9	; 185
    1662:	ff 4f       	sbci	r31, 0xFF	; 255
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	80 83       	st	Z, r24
    1668:	12 c0       	rjmp	.+36     	; 0x168e <main+0xb30>
				}
			}
			else
			{
				/* when the passes are unmatched in the first step do the following*/
				LCD_clearScreen();
    166a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass");
    166e:	80 e6       	ldi	r24, 0x60	; 96
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
				LCD_moveCursor(1,0);
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
				i=0;
    167e:	fe 01       	movw	r30, r28
    1680:	e5 5b       	subi	r30, 0xB5	; 181
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	10 82       	st	Z, r1
				Enter_flag =0;
    1686:	fe 01       	movw	r30, r28
    1688:	e9 5b       	subi	r30, 0xB9	; 185
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	10 82       	st	Z, r1
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	aa ef       	ldi	r26, 0xFA	; 250
    1694:	b3 e4       	ldi	r27, 0x43	; 67
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
    169a:	ad 87       	std	Y+13, r26	; 0x0d
    169c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6b 85       	ldd	r22, Y+11	; 0x0b
    16a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a e7       	ldi	r20, 0x7A	; 122
    16ac:	53 e4       	ldi	r21, 0x43	; 67
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	8f 83       	std	Y+7, r24	; 0x07
    16b8:	98 87       	std	Y+8, r25	; 0x08
    16ba:	a9 87       	std	Y+9, r26	; 0x09
    16bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16be:	6f 81       	ldd	r22, Y+7	; 0x07
    16c0:	78 85       	ldd	r23, Y+8	; 0x08
    16c2:	89 85       	ldd	r24, Y+9	; 0x09
    16c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <main+0xb82>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9e 83       	std	Y+6, r25	; 0x06
    16dc:	8d 83       	std	Y+5, r24	; 0x05
    16de:	3f c0       	rjmp	.+126    	; 0x175e <main+0xc00>
	else if (__tmp > 65535)
    16e0:	6f 81       	ldd	r22, Y+7	; 0x07
    16e2:	78 85       	ldd	r23, Y+8	; 0x08
    16e4:	89 85       	ldd	r24, Y+9	; 0x09
    16e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <main+0xbec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    16fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	8d 83       	std	Y+5, r24	; 0x05
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <main+0xbe2>
    1722:	89 e1       	ldi	r24, 0x19	; 25
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9c 83       	std	Y+4, r25	; 0x04
    1728:	8b 83       	std	Y+3, r24	; 0x03
    172a:	8b 81       	ldd	r24, Y+3	; 0x03
    172c:	9c 81       	ldd	r25, Y+4	; 0x04
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <main+0xbd0>
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8d 81       	ldd	r24, Y+5	; 0x05
    1738:	9e 81       	ldd	r25, Y+6	; 0x06
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9e 83       	std	Y+6, r25	; 0x06
    173e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8d 81       	ldd	r24, Y+5	; 0x05
    1742:	9e 81       	ldd	r25, Y+6	; 0x06
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <main+0xbc4>
    1748:	8f ca       	rjmp	.-2786   	; 0xc68 <main+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	6f 81       	ldd	r22, Y+7	; 0x07
    174c:	78 85       	ldd	r23, Y+8	; 0x08
    174e:	89 85       	ldd	r24, Y+9	; 0x09
    1750:	9a 85       	ldd	r25, Y+10	; 0x0a
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	9a 83       	std	Y+2, r25	; 0x02
    1764:	89 83       	std	Y+1, r24	; 0x01
    1766:	89 81       	ldd	r24, Y+1	; 0x01
    1768:	9a 81       	ldd	r25, Y+2	; 0x02
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <main+0xc0c>
    176e:	9a 83       	std	Y+2, r25	; 0x02
    1770:	89 83       	std	Y+1, r24	; 0x01
    1772:	7a ca       	rjmp	.-2828   	; 0xc68 <main+0x10a>

00001774 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <GPIO_setupPinDirection+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <GPIO_setupPinDirection+0x8>
    177c:	0f 92       	push	r0
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	6a 83       	std	Y+2, r22	; 0x02
    1786:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	88 30       	cpi	r24, 0x08	; 8
    178c:	08 f0       	brcs	.+2      	; 0x1790 <GPIO_setupPinDirection+0x1c>
    178e:	d5 c0       	rjmp	.+426    	; 0x193a <GPIO_setupPinDirection+0x1c6>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	84 30       	cpi	r24, 0x04	; 4
    1794:	08 f0       	brcs	.+2      	; 0x1798 <GPIO_setupPinDirection+0x24>
    1796:	d1 c0       	rjmp	.+418    	; 0x193a <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1798:	89 81       	ldd	r24, Y+1	; 0x01
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	3d 83       	std	Y+5, r19	; 0x05
    17a0:	2c 83       	std	Y+4, r18	; 0x04
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	91 05       	cpc	r25, r1
    17aa:	09 f4       	brne	.+2      	; 0x17ae <GPIO_setupPinDirection+0x3a>
    17ac:	43 c0       	rjmp	.+134    	; 0x1834 <GPIO_setupPinDirection+0xc0>
    17ae:	2c 81       	ldd	r18, Y+4	; 0x04
    17b0:	3d 81       	ldd	r19, Y+5	; 0x05
    17b2:	22 30       	cpi	r18, 0x02	; 2
    17b4:	31 05       	cpc	r19, r1
    17b6:	2c f4       	brge	.+10     	; 0x17c2 <GPIO_setupPinDirection+0x4e>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	9d 81       	ldd	r25, Y+5	; 0x05
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	71 f0       	breq	.+28     	; 0x17dc <GPIO_setupPinDirection+0x68>
    17c0:	bc c0       	rjmp	.+376    	; 0x193a <GPIO_setupPinDirection+0x1c6>
    17c2:	2c 81       	ldd	r18, Y+4	; 0x04
    17c4:	3d 81       	ldd	r19, Y+5	; 0x05
    17c6:	22 30       	cpi	r18, 0x02	; 2
    17c8:	31 05       	cpc	r19, r1
    17ca:	09 f4       	brne	.+2      	; 0x17ce <GPIO_setupPinDirection+0x5a>
    17cc:	5f c0       	rjmp	.+190    	; 0x188c <GPIO_setupPinDirection+0x118>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	91 05       	cpc	r25, r1
    17d6:	09 f4       	brne	.+2      	; 0x17da <GPIO_setupPinDirection+0x66>
    17d8:	85 c0       	rjmp	.+266    	; 0x18e4 <GPIO_setupPinDirection+0x170>
    17da:	af c0       	rjmp	.+350    	; 0x193a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	a1 f4       	brne	.+40     	; 0x180a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    17e2:	aa e3       	ldi	r26, 0x3A	; 58
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	ea e3       	ldi	r30, 0x3A	; 58
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	48 2f       	mov	r20, r24
    17ee:	8a 81       	ldd	r24, Y+2	; 0x02
    17f0:	28 2f       	mov	r18, r24
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	02 2e       	mov	r0, r18
    17fa:	02 c0       	rjmp	.+4      	; 0x1800 <GPIO_setupPinDirection+0x8c>
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	0a 94       	dec	r0
    1802:	e2 f7       	brpl	.-8      	; 0x17fc <GPIO_setupPinDirection+0x88>
    1804:	84 2b       	or	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	98 c0       	rjmp	.+304    	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    180a:	aa e3       	ldi	r26, 0x3A	; 58
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	ea e3       	ldi	r30, 0x3A	; 58
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <GPIO_setupPinDirection+0xb4>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <GPIO_setupPinDirection+0xb0>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	83 c0       	rjmp	.+262    	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	81 30       	cpi	r24, 0x01	; 1
    1838:	a1 f4       	brne	.+40     	; 0x1862 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    183a:	a7 e3       	ldi	r26, 0x37	; 55
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e7 e3       	ldi	r30, 0x37	; 55
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	48 2f       	mov	r20, r24
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <GPIO_setupPinDirection+0xe4>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <GPIO_setupPinDirection+0xe0>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	6c c0       	rjmp	.+216    	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1862:	a7 e3       	ldi	r26, 0x37	; 55
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e7 e3       	ldi	r30, 0x37	; 55
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <GPIO_setupPinDirection+0x10c>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <GPIO_setupPinDirection+0x108>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
    188a:	57 c0       	rjmp	.+174    	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	a1 f4       	brne	.+40     	; 0x18ba <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1892:	a4 e3       	ldi	r26, 0x34	; 52
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e4 e3       	ldi	r30, 0x34	; 52
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	48 2f       	mov	r20, r24
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	28 2f       	mov	r18, r24
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	02 2e       	mov	r0, r18
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <GPIO_setupPinDirection+0x13c>
    18ac:	88 0f       	add	r24, r24
    18ae:	99 1f       	adc	r25, r25
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <GPIO_setupPinDirection+0x138>
    18b4:	84 2b       	or	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	40 c0       	rjmp	.+128    	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18ba:	a4 e3       	ldi	r26, 0x34	; 52
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	e4 e3       	ldi	r30, 0x34	; 52
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	48 2f       	mov	r20, r24
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	02 2e       	mov	r0, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <GPIO_setupPinDirection+0x164>
    18d4:	88 0f       	add	r24, r24
    18d6:	99 1f       	adc	r25, r25
    18d8:	0a 94       	dec	r0
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <GPIO_setupPinDirection+0x160>
    18dc:	80 95       	com	r24
    18de:	84 23       	and	r24, r20
    18e0:	8c 93       	st	X, r24
    18e2:	2b c0       	rjmp	.+86     	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	a1 f4       	brne	.+40     	; 0x1912 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    18ea:	a1 e3       	ldi	r26, 0x31	; 49
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e1 e3       	ldi	r30, 0x31	; 49
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_setupPinDirection+0x194>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_setupPinDirection+0x190>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	14 c0       	rjmp	.+40     	; 0x193a <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1912:	a1 e3       	ldi	r26, 0x31	; 49
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e1 e3       	ldi	r30, 0x31	; 49
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <GPIO_setupPinDirection+0x1bc>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <GPIO_setupPinDirection+0x1b8>
    1934:	80 95       	com	r24
    1936:	84 23       	and	r24, r20
    1938:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <GPIO_writePin+0x6>
    1950:	00 d0       	rcall	.+0      	; 0x1952 <GPIO_writePin+0x8>
    1952:	0f 92       	push	r0
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6a 83       	std	Y+2, r22	; 0x02
    195c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	88 30       	cpi	r24, 0x08	; 8
    1962:	08 f0       	brcs	.+2      	; 0x1966 <GPIO_writePin+0x1c>
    1964:	d5 c0       	rjmp	.+426    	; 0x1b10 <GPIO_writePin+0x1c6>
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	08 f0       	brcs	.+2      	; 0x196e <GPIO_writePin+0x24>
    196c:	d1 c0       	rjmp	.+418    	; 0x1b10 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	3d 83       	std	Y+5, r19	; 0x05
    1976:	2c 83       	std	Y+4, r18	; 0x04
    1978:	8c 81       	ldd	r24, Y+4	; 0x04
    197a:	9d 81       	ldd	r25, Y+5	; 0x05
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	91 05       	cpc	r25, r1
    1980:	09 f4       	brne	.+2      	; 0x1984 <GPIO_writePin+0x3a>
    1982:	43 c0       	rjmp	.+134    	; 0x1a0a <GPIO_writePin+0xc0>
    1984:	2c 81       	ldd	r18, Y+4	; 0x04
    1986:	3d 81       	ldd	r19, Y+5	; 0x05
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <GPIO_writePin+0x4e>
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	9d 81       	ldd	r25, Y+5	; 0x05
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	71 f0       	breq	.+28     	; 0x19b2 <GPIO_writePin+0x68>
    1996:	bc c0       	rjmp	.+376    	; 0x1b10 <GPIO_writePin+0x1c6>
    1998:	2c 81       	ldd	r18, Y+4	; 0x04
    199a:	3d 81       	ldd	r19, Y+5	; 0x05
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <GPIO_writePin+0x5a>
    19a2:	5f c0       	rjmp	.+190    	; 0x1a62 <GPIO_writePin+0x118>
    19a4:	8c 81       	ldd	r24, Y+4	; 0x04
    19a6:	9d 81       	ldd	r25, Y+5	; 0x05
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <GPIO_writePin+0x66>
    19ae:	85 c0       	rjmp	.+266    	; 0x1aba <GPIO_writePin+0x170>
    19b0:	af c0       	rjmp	.+350    	; 0x1b10 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	81 30       	cpi	r24, 0x01	; 1
    19b6:	a1 f4       	brne	.+40     	; 0x19e0 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19b8:	ab e3       	ldi	r26, 0x3B	; 59
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	eb e3       	ldi	r30, 0x3B	; 59
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_writePin+0x8c>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_writePin+0x88>
    19da:	84 2b       	or	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	98 c0       	rjmp	.+304    	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    19e0:	ab e3       	ldi	r26, 0x3B	; 59
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	eb e3       	ldi	r30, 0x3B	; 59
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_writePin+0xb4>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_writePin+0xb0>
    1a02:	80 95       	com	r24
    1a04:	84 23       	and	r24, r20
    1a06:	8c 93       	st	X, r24
    1a08:	83 c0       	rjmp	.+262    	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	a1 f4       	brne	.+40     	; 0x1a38 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a10:	a8 e3       	ldi	r26, 0x38	; 56
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e8 e3       	ldi	r30, 0x38	; 56
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	48 2f       	mov	r20, r24
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	28 2f       	mov	r18, r24
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	02 2e       	mov	r0, r18
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <GPIO_writePin+0xe4>
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	0a 94       	dec	r0
    1a30:	e2 f7       	brpl	.-8      	; 0x1a2a <GPIO_writePin+0xe0>
    1a32:	84 2b       	or	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	6c c0       	rjmp	.+216    	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a38:	a8 e3       	ldi	r26, 0x38	; 56
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e8 e3       	ldi	r30, 0x38	; 56
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <GPIO_writePin+0x10c>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <GPIO_writePin+0x108>
    1a5a:	80 95       	com	r24
    1a5c:	84 23       	and	r24, r20
    1a5e:	8c 93       	st	X, r24
    1a60:	57 c0       	rjmp	.+174    	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	a1 f4       	brne	.+40     	; 0x1a90 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a68:	a5 e3       	ldi	r26, 0x35	; 53
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e5 e3       	ldi	r30, 0x35	; 53
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <GPIO_writePin+0x13c>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <GPIO_writePin+0x138>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	40 c0       	rjmp	.+128    	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a90:	a5 e3       	ldi	r26, 0x35	; 53
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e3       	ldi	r30, 0x35	; 53
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <GPIO_writePin+0x164>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <GPIO_writePin+0x160>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	2b c0       	rjmp	.+86     	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	a1 f4       	brne	.+40     	; 0x1ae8 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1ac0:	a2 e3       	ldi	r26, 0x32	; 50
    1ac2:	b0 e0       	ldi	r27, 0x00	; 0
    1ac4:	e2 e3       	ldi	r30, 0x32	; 50
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	48 2f       	mov	r20, r24
    1acc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ace:	28 2f       	mov	r18, r24
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	02 2e       	mov	r0, r18
    1ad8:	02 c0       	rjmp	.+4      	; 0x1ade <GPIO_writePin+0x194>
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	0a 94       	dec	r0
    1ae0:	e2 f7       	brpl	.-8      	; 0x1ada <GPIO_writePin+0x190>
    1ae2:	84 2b       	or	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1ae8:	a2 e3       	ldi	r26, 0x32	; 50
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e2 e3       	ldi	r30, 0x32	; 50
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 2e       	mov	r0, r18
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <GPIO_writePin+0x1bc>
    1b02:	88 0f       	add	r24, r24
    1b04:	99 1f       	adc	r25, r25
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <GPIO_writePin+0x1b8>
    1b0a:	80 95       	com	r24
    1b0c:	84 23       	and	r24, r20
    1b0e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b10:	0f 90       	pop	r0
    1b12:	0f 90       	pop	r0
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	00 d0       	rcall	.+0      	; 0x1b26 <GPIO_readPin+0x6>
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <GPIO_readPin+0x8>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b32:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	88 30       	cpi	r24, 0x08	; 8
    1b38:	08 f0       	brcs	.+2      	; 0x1b3c <GPIO_readPin+0x1c>
    1b3a:	84 c0       	rjmp	.+264    	; 0x1c44 <GPIO_readPin+0x124>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	84 30       	cpi	r24, 0x04	; 4
    1b40:	08 f0       	brcs	.+2      	; 0x1b44 <GPIO_readPin+0x24>
    1b42:	80 c0       	rjmp	.+256    	; 0x1c44 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	28 2f       	mov	r18, r24
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	3d 83       	std	Y+5, r19	; 0x05
    1b4c:	2c 83       	std	Y+4, r18	; 0x04
    1b4e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b50:	5d 81       	ldd	r21, Y+5	; 0x05
    1b52:	41 30       	cpi	r20, 0x01	; 1
    1b54:	51 05       	cpc	r21, r1
    1b56:	79 f1       	breq	.+94     	; 0x1bb6 <GPIO_readPin+0x96>
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b5c:	82 30       	cpi	r24, 0x02	; 2
    1b5e:	91 05       	cpc	r25, r1
    1b60:	34 f4       	brge	.+12     	; 0x1b6e <GPIO_readPin+0x4e>
    1b62:	2c 81       	ldd	r18, Y+4	; 0x04
    1b64:	3d 81       	ldd	r19, Y+5	; 0x05
    1b66:	21 15       	cp	r18, r1
    1b68:	31 05       	cpc	r19, r1
    1b6a:	69 f0       	breq	.+26     	; 0x1b86 <GPIO_readPin+0x66>
    1b6c:	6b c0       	rjmp	.+214    	; 0x1c44 <GPIO_readPin+0x124>
    1b6e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b70:	5d 81       	ldd	r21, Y+5	; 0x05
    1b72:	42 30       	cpi	r20, 0x02	; 2
    1b74:	51 05       	cpc	r21, r1
    1b76:	b9 f1       	breq	.+110    	; 0x1be6 <GPIO_readPin+0xc6>
    1b78:	8c 81       	ldd	r24, Y+4	; 0x04
    1b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b7c:	83 30       	cpi	r24, 0x03	; 3
    1b7e:	91 05       	cpc	r25, r1
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <GPIO_readPin+0x64>
    1b82:	49 c0       	rjmp	.+146    	; 0x1c16 <GPIO_readPin+0xf6>
    1b84:	5f c0       	rjmp	.+190    	; 0x1c44 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1b86:	e9 e3       	ldi	r30, 0x39	; 57
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_readPin+0x7e>
    1b9a:	55 95       	asr	r21
    1b9c:	47 95       	ror	r20
    1b9e:	8a 95       	dec	r24
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_readPin+0x7a>
    1ba2:	ca 01       	movw	r24, r20
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	49 c0       	rjmp	.+146    	; 0x1c44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
    1bb4:	47 c0       	rjmp	.+142    	; 0x1c44 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bb6:	e6 e3       	ldi	r30, 0x36	; 54
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	28 2f       	mov	r18, r24
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc2:	88 2f       	mov	r24, r24
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	a9 01       	movw	r20, r18
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <GPIO_readPin+0xae>
    1bca:	55 95       	asr	r21
    1bcc:	47 95       	ror	r20
    1bce:	8a 95       	dec	r24
    1bd0:	e2 f7       	brpl	.-8      	; 0x1bca <GPIO_readPin+0xaa>
    1bd2:	ca 01       	movw	r24, r20
    1bd4:	81 70       	andi	r24, 0x01	; 1
    1bd6:	90 70       	andi	r25, 0x00	; 0
    1bd8:	88 23       	and	r24, r24
    1bda:	19 f0       	breq	.+6      	; 0x1be2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	89 83       	std	Y+1, r24	; 0x01
    1be0:	31 c0       	rjmp	.+98     	; 0x1c44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1be2:	19 82       	std	Y+1, r1	; 0x01
    1be4:	2f c0       	rjmp	.+94     	; 0x1c44 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1be6:	e3 e3       	ldi	r30, 0x33	; 51
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	a9 01       	movw	r20, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <GPIO_readPin+0xde>
    1bfa:	55 95       	asr	r21
    1bfc:	47 95       	ror	r20
    1bfe:	8a 95       	dec	r24
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <GPIO_readPin+0xda>
    1c02:	ca 01       	movw	r24, r20
    1c04:	81 70       	andi	r24, 0x01	; 1
    1c06:	90 70       	andi	r25, 0x00	; 0
    1c08:	88 23       	and	r24, r24
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	89 83       	std	Y+1, r24	; 0x01
    1c10:	19 c0       	rjmp	.+50     	; 0x1c44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c12:	19 82       	std	Y+1, r1	; 0x01
    1c14:	17 c0       	rjmp	.+46     	; 0x1c44 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c16:	e0 e3       	ldi	r30, 0x30	; 48
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a9 01       	movw	r20, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <GPIO_readPin+0x10e>
    1c2a:	55 95       	asr	r21
    1c2c:	47 95       	ror	r20
    1c2e:	8a 95       	dec	r24
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <GPIO_readPin+0x10a>
    1c32:	ca 01       	movw	r24, r20
    1c34:	81 70       	andi	r24, 0x01	; 1
    1c36:	90 70       	andi	r25, 0x00	; 0
    1c38:	88 23       	and	r24, r24
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	01 c0       	rjmp	.+2      	; 0x1c44 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c42:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c46:	0f 90       	pop	r0
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <GPIO_setupPortDirection+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_setupPortDirection+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	90 f5       	brcc	.+100    	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	3c 83       	std	Y+4, r19	; 0x04
    1c74:	2b 83       	std	Y+3, r18	; 0x03
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	91 05       	cpc	r25, r1
    1c7e:	d1 f0       	breq	.+52     	; 0x1cb4 <GPIO_setupPortDirection+0x5e>
    1c80:	2b 81       	ldd	r18, Y+3	; 0x03
    1c82:	3c 81       	ldd	r19, Y+4	; 0x04
    1c84:	22 30       	cpi	r18, 0x02	; 2
    1c86:	31 05       	cpc	r19, r1
    1c88:	2c f4       	brge	.+10     	; 0x1c94 <GPIO_setupPortDirection+0x3e>
    1c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	61 f0       	breq	.+24     	; 0x1caa <GPIO_setupPortDirection+0x54>
    1c92:	1e c0       	rjmp	.+60     	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	22 30       	cpi	r18, 0x02	; 2
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	81 f0       	breq	.+32     	; 0x1cbe <GPIO_setupPortDirection+0x68>
    1c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca2:	83 30       	cpi	r24, 0x03	; 3
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <GPIO_setupPortDirection+0x72>
    1ca8:	13 c0       	rjmp	.+38     	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1caa:	ea e3       	ldi	r30, 0x3A	; 58
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb0:	80 83       	st	Z, r24
    1cb2:	0e c0       	rjmp	.+28     	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cb4:	e7 e3       	ldi	r30, 0x37	; 55
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	80 83       	st	Z, r24
    1cbc:	09 c0       	rjmp	.+18     	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cbe:	e4 e3       	ldi	r30, 0x34	; 52
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	80 83       	st	Z, r24
    1cc6:	04 c0       	rjmp	.+8      	; 0x1cd0 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cc8:	e1 e3       	ldi	r30, 0x31	; 49
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <GPIO_writePort+0x6>
    1ce4:	00 d0       	rcall	.+0      	; 0x1ce6 <GPIO_writePort+0x8>
    1ce6:	cd b7       	in	r28, 0x3d	; 61
    1ce8:	de b7       	in	r29, 0x3e	; 62
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cee:	89 81       	ldd	r24, Y+1	; 0x01
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	90 f5       	brcc	.+100    	; 0x1d58 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	3c 83       	std	Y+4, r19	; 0x04
    1cfc:	2b 83       	std	Y+3, r18	; 0x03
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	81 30       	cpi	r24, 0x01	; 1
    1d04:	91 05       	cpc	r25, r1
    1d06:	d1 f0       	breq	.+52     	; 0x1d3c <GPIO_writePort+0x5e>
    1d08:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0c:	22 30       	cpi	r18, 0x02	; 2
    1d0e:	31 05       	cpc	r19, r1
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <GPIO_writePort+0x3e>
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	61 f0       	breq	.+24     	; 0x1d32 <GPIO_writePort+0x54>
    1d1a:	1e c0       	rjmp	.+60     	; 0x1d58 <GPIO_writePort+0x7a>
    1d1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d20:	22 30       	cpi	r18, 0x02	; 2
    1d22:	31 05       	cpc	r19, r1
    1d24:	81 f0       	breq	.+32     	; 0x1d46 <GPIO_writePort+0x68>
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2a:	83 30       	cpi	r24, 0x03	; 3
    1d2c:	91 05       	cpc	r25, r1
    1d2e:	81 f0       	breq	.+32     	; 0x1d50 <GPIO_writePort+0x72>
    1d30:	13 c0       	rjmp	.+38     	; 0x1d58 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d32:	eb e3       	ldi	r30, 0x3B	; 59
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	8a 81       	ldd	r24, Y+2	; 0x02
    1d38:	80 83       	st	Z, r24
    1d3a:	0e c0       	rjmp	.+28     	; 0x1d58 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d3c:	e8 e3       	ldi	r30, 0x38	; 56
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	80 83       	st	Z, r24
    1d44:	09 c0       	rjmp	.+18     	; 0x1d58 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d46:	e5 e3       	ldi	r30, 0x35	; 53
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	80 83       	st	Z, r24
    1d4e:	04 c0       	rjmp	.+8      	; 0x1d58 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d50:	e2 e3       	ldi	r30, 0x32	; 50
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	08 95       	ret

00001d66 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d66:	df 93       	push	r29
    1d68:	cf 93       	push	r28
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <GPIO_readPort+0x6>
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <GPIO_readPort+0x8>
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1d74:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	90 f5       	brcc	.+100    	; 0x1de0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	3c 83       	std	Y+4, r19	; 0x04
    1d84:	2b 83       	std	Y+3, r18	; 0x03
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	81 30       	cpi	r24, 0x01	; 1
    1d8c:	91 05       	cpc	r25, r1
    1d8e:	d1 f0       	breq	.+52     	; 0x1dc4 <GPIO_readPort+0x5e>
    1d90:	2b 81       	ldd	r18, Y+3	; 0x03
    1d92:	3c 81       	ldd	r19, Y+4	; 0x04
    1d94:	22 30       	cpi	r18, 0x02	; 2
    1d96:	31 05       	cpc	r19, r1
    1d98:	2c f4       	brge	.+10     	; 0x1da4 <GPIO_readPort+0x3e>
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	61 f0       	breq	.+24     	; 0x1dba <GPIO_readPort+0x54>
    1da2:	1e c0       	rjmp	.+60     	; 0x1de0 <GPIO_readPort+0x7a>
    1da4:	2b 81       	ldd	r18, Y+3	; 0x03
    1da6:	3c 81       	ldd	r19, Y+4	; 0x04
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	81 f0       	breq	.+32     	; 0x1dce <GPIO_readPort+0x68>
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	83 30       	cpi	r24, 0x03	; 3
    1db4:	91 05       	cpc	r25, r1
    1db6:	81 f0       	breq	.+32     	; 0x1dd8 <GPIO_readPort+0x72>
    1db8:	13 c0       	rjmp	.+38     	; 0x1de0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1dba:	e9 e3       	ldi	r30, 0x39	; 57
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	0e c0       	rjmp	.+28     	; 0x1de0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1dc4:	e6 e3       	ldi	r30, 0x36	; 54
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	80 81       	ld	r24, Z
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	09 c0       	rjmp	.+18     	; 0x1de0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dce:	e3 e3       	ldi	r30, 0x33	; 51
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	04 c0       	rjmp	.+8      	; 0x1de0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1dd8:	e0 e3       	ldi	r30, 0x30	; 48
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <KEYPAD_getPressedKey+0x6>
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	40 e0       	ldi	r20, 0x00	; 0
    1e00:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	61 e0       	ldi	r22, 0x01	; 1
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	62 e0       	ldi	r22, 0x02	; 2
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	63 e0       	ldi	r22, 0x03	; 3
    1e1c:	40 e0       	ldi	r20, 0x00	; 0
    1e1e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	66 e0       	ldi	r22, 0x06	; 6
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	67 e0       	ldi	r22, 0x07	; 7
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e4a:	19 82       	std	Y+1, r1	; 0x01
    1e4c:	35 c0       	rjmp	.+106    	; 0x1eb8 <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	69 81       	ldd	r22, Y+1	; 0x01
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	69 81       	ldd	r22, Y+1	; 0x01
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e62:	1a 82       	std	Y+2, r1	; 0x02
    1e64:	1e c0       	rjmp	.+60     	; 0x1ea2 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	98 2f       	mov	r25, r24
    1e6a:	9c 5f       	subi	r25, 0xFC	; 252
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	69 2f       	mov	r22, r25
    1e70:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <GPIO_readPin>
    1e74:	88 23       	and	r24, r24
    1e76:	91 f4       	brne	.+36     	; 0x1e9c <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	88 2f       	mov	r24, r24
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	98 2f       	mov	r25, r24
    1e88:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8a:	89 0f       	add	r24, r25
    1e8c:	8f 5f       	subi	r24, 0xFF	; 255
    1e8e:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1e92:	0f 90       	pop	r0
    1e94:	0f 90       	pop	r0
    1e96:	cf 91       	pop	r28
    1e98:	df 91       	pop	r29
    1e9a:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	84 30       	cpi	r24, 0x04	; 4
    1ea6:	f8 f2       	brcs	.-66     	; 0x1e66 <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	69 81       	ldd	r22, Y+1	; 0x01
    1eac:	40 e0       	ldi	r20, 0x00	; 0
    1eae:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	8f 5f       	subi	r24, 0xFF	; 255
    1eb6:	89 83       	std	Y+1, r24	; 0x01
    1eb8:	89 81       	ldd	r24, Y+1	; 0x01
    1eba:	84 30       	cpi	r24, 0x04	; 4
    1ebc:	40 f2       	brcs	.-112    	; 0x1e4e <KEYPAD_getPressedKey+0x5e>
    1ebe:	c5 cf       	rjmp	.-118    	; 0x1e4a <KEYPAD_getPressedKey+0x5a>

00001ec0 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62
    1ecc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ece:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	3c 83       	std	Y+4, r19	; 0x04
    1ed8:	2b 83       	std	Y+3, r18	; 0x03
    1eda:	8b 81       	ldd	r24, Y+3	; 0x03
    1edc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ede:	88 30       	cpi	r24, 0x08	; 8
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1ee4:	70 c0       	rjmp	.+224    	; 0x1fc6 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1ee6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eea:	29 30       	cpi	r18, 0x09	; 9
    1eec:	31 05       	cpc	r19, r1
    1eee:	5c f5       	brge	.+86     	; 0x1f46 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef4:	84 30       	cpi	r24, 0x04	; 4
    1ef6:	91 05       	cpc	r25, r1
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1efa:	59 c0       	rjmp	.+178    	; 0x1fae <KEYPAD_4x4_adjustKeyNumber+0xee>
    1efc:	2b 81       	ldd	r18, Y+3	; 0x03
    1efe:	3c 81       	ldd	r19, Y+4	; 0x04
    1f00:	25 30       	cpi	r18, 0x05	; 5
    1f02:	31 05       	cpc	r19, r1
    1f04:	9c f4       	brge	.+38     	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0a:	82 30       	cpi	r24, 0x02	; 2
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	09 f4       	brne	.+2      	; 0x1f12 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f10:	48 c0       	rjmp	.+144    	; 0x1fa2 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f12:	2b 81       	ldd	r18, Y+3	; 0x03
    1f14:	3c 81       	ldd	r19, Y+4	; 0x04
    1f16:	23 30       	cpi	r18, 0x03	; 3
    1f18:	31 05       	cpc	r19, r1
    1f1a:	0c f0       	brlt	.+2      	; 0x1f1e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f1c:	45 c0       	rjmp	.+138    	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	9c 81       	ldd	r25, Y+4	; 0x04
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	91 05       	cpc	r25, r1
    1f26:	09 f4       	brne	.+2      	; 0x1f2a <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f28:	39 c0       	rjmp	.+114    	; 0x1f9c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f2a:	67 c0       	rjmp	.+206    	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f30:	26 30       	cpi	r18, 0x06	; 6
    1f32:	31 05       	cpc	r19, r1
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f36:	41 c0       	rjmp	.+130    	; 0x1fba <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	87 30       	cpi	r24, 0x07	; 7
    1f3e:	91 05       	cpc	r25, r1
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f42:	3e c0       	rjmp	.+124    	; 0x1fc0 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f44:	37 c0       	rjmp	.+110    	; 0x1fb4 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f46:	2b 81       	ldd	r18, Y+3	; 0x03
    1f48:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4a:	2c 30       	cpi	r18, 0x0C	; 12
    1f4c:	31 05       	cpc	r19, r1
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f50:	46 c0       	rjmp	.+140    	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	8d 30       	cpi	r24, 0x0D	; 13
    1f58:	91 05       	cpc	r25, r1
    1f5a:	5c f4       	brge	.+22     	; 0x1f72 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f5c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f5e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f60:	2a 30       	cpi	r18, 0x0A	; 10
    1f62:	31 05       	cpc	r19, r1
    1f64:	b1 f1       	breq	.+108    	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6a:	8b 30       	cpi	r24, 0x0B	; 11
    1f6c:	91 05       	cpc	r25, r1
    1f6e:	a4 f5       	brge	.+104    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1f70:	2d c0       	rjmp	.+90     	; 0x1fcc <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	2e 30       	cpi	r18, 0x0E	; 14
    1f78:	31 05       	cpc	r19, r1
    1f7a:	b9 f1       	breq	.+110    	; 0x1fea <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	8e 30       	cpi	r24, 0x0E	; 14
    1f82:	91 05       	cpc	r25, r1
    1f84:	7c f1       	brlt	.+94     	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	2f 30       	cpi	r18, 0x0F	; 15
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	79 f1       	breq	.+94     	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	80 31       	cpi	r24, 0x10	; 16
    1f96:	91 05       	cpc	r25, r1
    1f98:	69 f1       	breq	.+90     	; 0x1ff4 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1f9a:	2f c0       	rjmp	.+94     	; 0x1ffa <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1f9c:	87 e0       	ldi	r24, 0x07	; 7
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	2e c0       	rjmp	.+92     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fa2:	88 e0       	ldi	r24, 0x08	; 8
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	2b c0       	rjmp	.+86     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fa8:	89 e0       	ldi	r24, 0x09	; 9
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	28 c0       	rjmp	.+80     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fae:	85 e2       	ldi	r24, 0x25	; 37
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	25 c0       	rjmp	.+74     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fb4:	84 e0       	ldi	r24, 0x04	; 4
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	22 c0       	rjmp	.+68     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1fba:	85 e0       	ldi	r24, 0x05	; 5
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	1f c0       	rjmp	.+62     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1fc0:	86 e0       	ldi	r24, 0x06	; 6
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	1c c0       	rjmp	.+56     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1fc6:	8a e2       	ldi	r24, 0x2A	; 42
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	19 c0       	rjmp	.+50     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	16 c0       	rjmp	.+44     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1fd2:	82 e0       	ldi	r24, 0x02	; 2
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	13 c0       	rjmp	.+38     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1fd8:	83 e0       	ldi	r24, 0x03	; 3
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	10 c0       	rjmp	.+32     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1fde:	8d e2       	ldi	r24, 0x2D	; 45
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	0d c0       	rjmp	.+26     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1fe4:	8d e0       	ldi	r24, 0x0D	; 13
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	0a c0       	rjmp	.+20     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1fea:	19 82       	std	Y+1, r1	; 0x01
    1fec:	08 c0       	rjmp	.+16     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1fee:	8d e3       	ldi	r24, 0x3D	; 61
    1ff0:	89 83       	std	Y+1, r24	; 0x01
    1ff2:	05 c0       	rjmp	.+10     	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1ff4:	8b e2       	ldi	r24, 0x2B	; 43
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	2e 97       	sbiw	r28, 0x0e	; 14
    2018:	0f b6       	in	r0, 0x3f	; 63
    201a:	f8 94       	cli
    201c:	de bf       	out	0x3e, r29	; 62
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	64 e0       	ldi	r22, 0x04	; 4
    2026:	41 e0       	ldi	r20, 0x01	; 1
    2028:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    202c:	82 e0       	ldi	r24, 0x02	; 2
    202e:	65 e0       	ldi	r22, 0x05	; 5
    2030:	41 e0       	ldi	r20, 0x01	; 1
    2032:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 ea       	ldi	r26, 0xA0	; 160
    203c:	b1 e4       	ldi	r27, 0x41	; 65
    203e:	8b 87       	std	Y+11, r24	; 0x0b
    2040:	9c 87       	std	Y+12, r25	; 0x0c
    2042:	ad 87       	std	Y+13, r26	; 0x0d
    2044:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a e7       	ldi	r20, 0x7A	; 122
    2054:	53 e4       	ldi	r21, 0x43	; 67
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8f 83       	std	Y+7, r24	; 0x07
    2060:	98 87       	std	Y+8, r25	; 0x08
    2062:	a9 87       	std	Y+9, r26	; 0x09
    2064:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2066:	6f 81       	ldd	r22, Y+7	; 0x07
    2068:	78 85       	ldd	r23, Y+8	; 0x08
    206a:	89 85       	ldd	r24, Y+9	; 0x09
    206c:	9a 85       	ldd	r25, Y+10	; 0x0a
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <LCD_init+0x7a>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <LCD_init+0xf8>
	else if (__tmp > 65535)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9e 83       	std	Y+6, r25	; 0x06
    20c6:	8d 83       	std	Y+5, r24	; 0x05
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <LCD_init+0xda>
    20ca:	89 e1       	ldi	r24, 0x19	; 25
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	9c 83       	std	Y+4, r25	; 0x04
    20d0:	8b 83       	std	Y+3, r24	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_init+0xc8>
    20da:	9c 83       	std	Y+4, r25	; 0x04
    20dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	8d 81       	ldd	r24, Y+5	; 0x05
    20e0:	9e 81       	ldd	r25, Y+6	; 0x06
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9e 83       	std	Y+6, r25	; 0x06
    20e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
    20ea:	9e 81       	ldd	r25, Y+6	; 0x06
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <LCD_init+0xbc>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6f 81       	ldd	r22, Y+7	; 0x07
    20f4:	78 85       	ldd	r23, Y+8	; 0x08
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9e 83       	std	Y+6, r25	; 0x06
    2104:	8d 83       	std	Y+5, r24	; 0x05
    2106:	8d 81       	ldd	r24, Y+5	; 0x05
    2108:	9e 81       	ldd	r25, Y+6	; 0x06
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_init+0x104>
    2116:	9a 83       	std	Y+2, r25	; 0x02
    2118:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    211a:	82 e0       	ldi	r24, 0x02	; 2
    211c:	60 e0       	ldi	r22, 0x00	; 0
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	62 e0       	ldi	r22, 0x02	; 2
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    2138:	82 e0       	ldi	r24, 0x02	; 2
    213a:	63 e0       	ldi	r22, 0x03	; 3
    213c:	41 e0       	ldi	r20, 0x01	; 1
    213e:	0e 94 ba 0b 	call	0x1774	; 0x1774 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2142:	83 e3       	ldi	r24, 0x33	; 51
    2144:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2148:	82 e3       	ldi	r24, 0x32	; 50
    214a:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    214e:	88 e2       	ldi	r24, 0x28	; 40
    2150:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2154:	8c e0       	ldi	r24, 0x0C	; 12
    2156:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
}
    2160:	2e 96       	adiw	r28, 0x0e	; 14
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2172:	0f 93       	push	r16
    2174:	1f 93       	push	r17
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	c3 56       	subi	r28, 0x63	; 99
    2180:	d0 40       	sbci	r29, 0x00	; 0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	fe 01       	movw	r30, r28
    218e:	ed 59       	subi	r30, 0x9D	; 157
    2190:	ff 4f       	sbci	r31, 0xFF	; 255
    2192:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	64 e0       	ldi	r22, 0x04	; 4
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    219e:	fe 01       	movw	r30, r28
    21a0:	e1 5a       	subi	r30, 0xA1	; 161
    21a2:	ff 4f       	sbci	r31, 0xFF	; 255
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	a0 e8       	ldi	r26, 0x80	; 128
    21aa:	bf e3       	ldi	r27, 0x3F	; 63
    21ac:	80 83       	st	Z, r24
    21ae:	91 83       	std	Z+1, r25	; 0x01
    21b0:	a2 83       	std	Z+2, r26	; 0x02
    21b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b4:	8e 01       	movw	r16, r28
    21b6:	05 5a       	subi	r16, 0xA5	; 165
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	fe 01       	movw	r30, r28
    21bc:	e1 5a       	subi	r30, 0xA1	; 161
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	60 81       	ld	r22, Z
    21c2:	71 81       	ldd	r23, Z+1	; 0x01
    21c4:	82 81       	ldd	r24, Z+2	; 0x02
    21c6:	93 81       	ldd	r25, Z+3	; 0x03
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a e7       	ldi	r20, 0x7A	; 122
    21ce:	53 e4       	ldi	r21, 0x43	; 67
    21d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	f8 01       	movw	r30, r16
    21da:	80 83       	st	Z, r24
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	a2 83       	std	Z+2, r26	; 0x02
    21e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e2:	fe 01       	movw	r30, r28
    21e4:	e5 5a       	subi	r30, 0xA5	; 165
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	60 81       	ld	r22, Z
    21ea:	71 81       	ldd	r23, Z+1	; 0x01
    21ec:	82 81       	ldd	r24, Z+2	; 0x02
    21ee:	93 81       	ldd	r25, Z+3	; 0x03
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	44 f4       	brge	.+16     	; 0x2210 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2200:	fe 01       	movw	r30, r28
    2202:	e7 5a       	subi	r30, 0xA7	; 167
    2204:	ff 4f       	sbci	r31, 0xFF	; 255
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	64 c0       	rjmp	.+200    	; 0x22d8 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2210:	fe 01       	movw	r30, r28
    2212:	e5 5a       	subi	r30, 0xA5	; 165
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	60 81       	ld	r22, Z
    2218:	71 81       	ldd	r23, Z+1	; 0x01
    221a:	82 81       	ldd	r24, Z+2	; 0x02
    221c:	93 81       	ldd	r25, Z+3	; 0x03
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	3f ef       	ldi	r19, 0xFF	; 255
    2222:	4f e7       	ldi	r20, 0x7F	; 127
    2224:	57 e4       	ldi	r21, 0x47	; 71
    2226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    222a:	18 16       	cp	r1, r24
    222c:	0c f0       	brlt	.+2      	; 0x2230 <LCD_sendCommand+0xbe>
    222e:	43 c0       	rjmp	.+134    	; 0x22b6 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2230:	fe 01       	movw	r30, r28
    2232:	e1 5a       	subi	r30, 0xA1	; 161
    2234:	ff 4f       	sbci	r31, 0xFF	; 255
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	82 81       	ldd	r24, Z+2	; 0x02
    223c:	93 81       	ldd	r25, Z+3	; 0x03
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	8e 01       	movw	r16, r28
    2250:	07 5a       	subi	r16, 0xA7	; 167
    2252:	1f 4f       	sbci	r17, 0xFF	; 255
    2254:	bc 01       	movw	r22, r24
    2256:	cd 01       	movw	r24, r26
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	f8 01       	movw	r30, r16
    2262:	91 83       	std	Z+1, r25	; 0x01
    2264:	80 83       	st	Z, r24
    2266:	1f c0       	rjmp	.+62     	; 0x22a6 <LCD_sendCommand+0x134>
    2268:	fe 01       	movw	r30, r28
    226a:	e9 5a       	subi	r30, 0xA9	; 169
    226c:	ff 4f       	sbci	r31, 0xFF	; 255
    226e:	89 e1       	ldi	r24, 0x19	; 25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	91 83       	std	Z+1, r25	; 0x01
    2274:	80 83       	st	Z, r24
    2276:	fe 01       	movw	r30, r28
    2278:	e9 5a       	subi	r30, 0xA9	; 169
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	f1 f7       	brne	.-4      	; 0x2280 <LCD_sendCommand+0x10e>
    2284:	fe 01       	movw	r30, r28
    2286:	e9 5a       	subi	r30, 0xA9	; 169
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    228e:	de 01       	movw	r26, r28
    2290:	a7 5a       	subi	r26, 0xA7	; 167
    2292:	bf 4f       	sbci	r27, 0xFF	; 255
    2294:	fe 01       	movw	r30, r28
    2296:	e7 5a       	subi	r30, 0xA7	; 167
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	11 96       	adiw	r26, 0x01	; 1
    22a2:	9c 93       	st	X, r25
    22a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	fe 01       	movw	r30, r28
    22a8:	e7 5a       	subi	r30, 0xA7	; 167
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	91 81       	ldd	r25, Z+1	; 0x01
    22b0:	00 97       	sbiw	r24, 0x00	; 0
    22b2:	d1 f6       	brne	.-76     	; 0x2268 <LCD_sendCommand+0xf6>
    22b4:	27 c0       	rjmp	.+78     	; 0x2304 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b6:	8e 01       	movw	r16, r28
    22b8:	07 5a       	subi	r16, 0xA7	; 167
    22ba:	1f 4f       	sbci	r17, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5a       	subi	r30, 0xA5	; 165
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	60 81       	ld	r22, Z
    22c4:	71 81       	ldd	r23, Z+1	; 0x01
    22c6:	82 81       	ldd	r24, Z+2	; 0x02
    22c8:	93 81       	ldd	r25, Z+3	; 0x03
    22ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ce:	dc 01       	movw	r26, r24
    22d0:	cb 01       	movw	r24, r22
    22d2:	f8 01       	movw	r30, r16
    22d4:	91 83       	std	Z+1, r25	; 0x01
    22d6:	80 83       	st	Z, r24
    22d8:	de 01       	movw	r26, r28
    22da:	ab 5a       	subi	r26, 0xAB	; 171
    22dc:	bf 4f       	sbci	r27, 0xFF	; 255
    22de:	fe 01       	movw	r30, r28
    22e0:	e7 5a       	subi	r30, 0xA7	; 167
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	80 81       	ld	r24, Z
    22e6:	91 81       	ldd	r25, Z+1	; 0x01
    22e8:	8d 93       	st	X+, r24
    22ea:	9c 93       	st	X, r25
    22ec:	fe 01       	movw	r30, r28
    22ee:	eb 5a       	subi	r30, 0xAB	; 171
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	91 81       	ldd	r25, Z+1	; 0x01
    22f6:	01 97       	sbiw	r24, 0x01	; 1
    22f8:	f1 f7       	brne	.-4      	; 0x22f6 <LCD_sendCommand+0x184>
    22fa:	fe 01       	movw	r30, r28
    22fc:	eb 5a       	subi	r30, 0xAB	; 171
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	91 83       	std	Z+1, r25	; 0x01
    2302:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2304:	82 e0       	ldi	r24, 0x02	; 2
    2306:	65 e0       	ldi	r22, 0x05	; 5
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5a       	subi	r30, 0xAF	; 175
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	03 5b       	subi	r16, 0xB3	; 179
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ef 5a       	subi	r30, 0xAF	; 175
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	53 e4       	ldi	r21, 0x43	; 67
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	e3 5b       	subi	r30, 0xB3	; 179
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	44 f4       	brge	.+16     	; 0x2380 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2370:	fe 01       	movw	r30, r28
    2372:	e5 5b       	subi	r30, 0xB5	; 181
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
    237e:	64 c0       	rjmp	.+200    	; 0x2448 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2380:	fe 01       	movw	r30, r28
    2382:	e3 5b       	subi	r30, 0xB3	; 179
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	0c f0       	brlt	.+2      	; 0x23a0 <LCD_sendCommand+0x22e>
    239e:	43 c0       	rjmp	.+134    	; 0x2426 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	fe 01       	movw	r30, r28
    23a2:	ef 5a       	subi	r30, 0xAF	; 175
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8e 01       	movw	r16, r28
    23c0:	05 5b       	subi	r16, 0xB5	; 181
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	1f c0       	rjmp	.+62     	; 0x2416 <LCD_sendCommand+0x2a4>
    23d8:	fe 01       	movw	r30, r28
    23da:	e7 5b       	subi	r30, 0xB7	; 183
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	89 e1       	ldi	r24, 0x19	; 25
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 5b       	subi	r30, 0xB7	; 183
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_sendCommand+0x27e>
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5b       	subi	r30, 0xB7	; 183
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	de 01       	movw	r26, r28
    2400:	a5 5b       	subi	r26, 0xB5	; 181
    2402:	bf 4f       	sbci	r27, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	e5 5b       	subi	r30, 0xB5	; 181
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	fe 01       	movw	r30, r28
    2418:	e5 5b       	subi	r30, 0xB5	; 181
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	d1 f6       	brne	.-76     	; 0x23d8 <LCD_sendCommand+0x266>
    2424:	27 c0       	rjmp	.+78     	; 0x2474 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	8e 01       	movw	r16, r28
    2428:	05 5b       	subi	r16, 0xB5	; 181
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e3 5b       	subi	r30, 0xB3	; 179
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	de 01       	movw	r26, r28
    244a:	a9 5b       	subi	r26, 0xB9	; 185
    244c:	bf 4f       	sbci	r27, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	e5 5b       	subi	r30, 0xB5	; 181
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	8d 93       	st	X+, r24
    245a:	9c 93       	st	X, r25
    245c:	fe 01       	movw	r30, r28
    245e:	e9 5b       	subi	r30, 0xB9	; 185
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 81       	ld	r24, Z
    2464:	91 81       	ldd	r25, Z+1	; 0x01
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <LCD_sendCommand+0x2f4>
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5b       	subi	r30, 0xB9	; 185
    246e:	ff 4f       	sbci	r31, 0xFF	; 255
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2474:	fe 01       	movw	r30, r28
    2476:	ed 59       	subi	r30, 0x9D	; 157
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	88 2f       	mov	r24, r24
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	80 71       	andi	r24, 0x10	; 16
    2482:	90 70       	andi	r25, 0x00	; 0
    2484:	95 95       	asr	r25
    2486:	87 95       	ror	r24
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	95 95       	asr	r25
    248e:	87 95       	ror	r24
    2490:	95 95       	asr	r25
    2492:	87 95       	ror	r24
    2494:	98 2f       	mov	r25, r24
    2496:	82 e0       	ldi	r24, 0x02	; 2
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	49 2f       	mov	r20, r25
    249c:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    24a0:	fe 01       	movw	r30, r28
    24a2:	ed 59       	subi	r30, 0x9D	; 157
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	88 2f       	mov	r24, r24
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	80 72       	andi	r24, 0x20	; 32
    24ae:	90 70       	andi	r25, 0x00	; 0
    24b0:	95 95       	asr	r25
    24b2:	87 95       	ror	r24
    24b4:	95 95       	asr	r25
    24b6:	87 95       	ror	r24
    24b8:	95 95       	asr	r25
    24ba:	87 95       	ror	r24
    24bc:	95 95       	asr	r25
    24be:	87 95       	ror	r24
    24c0:	95 95       	asr	r25
    24c2:	87 95       	ror	r24
    24c4:	98 2f       	mov	r25, r24
    24c6:	82 e0       	ldi	r24, 0x02	; 2
    24c8:	61 e0       	ldi	r22, 0x01	; 1
    24ca:	49 2f       	mov	r20, r25
    24cc:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    24d0:	fe 01       	movw	r30, r28
    24d2:	ed 59       	subi	r30, 0x9D	; 157
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	80 81       	ld	r24, Z
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	80 74       	andi	r24, 0x40	; 64
    24de:	90 70       	andi	r25, 0x00	; 0
    24e0:	08 2e       	mov	r0, r24
    24e2:	89 2f       	mov	r24, r25
    24e4:	00 0c       	add	r0, r0
    24e6:	88 1f       	adc	r24, r24
    24e8:	99 0b       	sbc	r25, r25
    24ea:	00 0c       	add	r0, r0
    24ec:	88 1f       	adc	r24, r24
    24ee:	99 1f       	adc	r25, r25
    24f0:	98 2f       	mov	r25, r24
    24f2:	82 e0       	ldi	r24, 0x02	; 2
    24f4:	62 e0       	ldi	r22, 0x02	; 2
    24f6:	49 2f       	mov	r20, r25
    24f8:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    24fc:	fe 01       	movw	r30, r28
    24fe:	ed 59       	subi	r30, 0x9D	; 157
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	98 2f       	mov	r25, r24
    2506:	99 1f       	adc	r25, r25
    2508:	99 27       	eor	r25, r25
    250a:	99 1f       	adc	r25, r25
    250c:	82 e0       	ldi	r24, 0x02	; 2
    250e:	63 e0       	ldi	r22, 0x03	; 3
    2510:	49 2f       	mov	r20, r25
    2512:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2516:	fe 01       	movw	r30, r28
    2518:	ed 5b       	subi	r30, 0xBD	; 189
    251a:	ff 4f       	sbci	r31, 0xFF	; 255
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	80 83       	st	Z, r24
    2526:	91 83       	std	Z+1, r25	; 0x01
    2528:	a2 83       	std	Z+2, r26	; 0x02
    252a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	8e 01       	movw	r16, r28
    252e:	01 5c       	subi	r16, 0xC1	; 193
    2530:	1f 4f       	sbci	r17, 0xFF	; 255
    2532:	fe 01       	movw	r30, r28
    2534:	ed 5b       	subi	r30, 0xBD	; 189
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	f8 01       	movw	r30, r16
    2552:	80 83       	st	Z, r24
    2554:	91 83       	std	Z+1, r25	; 0x01
    2556:	a2 83       	std	Z+2, r26	; 0x02
    2558:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    255a:	fe 01       	movw	r30, r28
    255c:	ff 96       	adiw	r30, 0x3f	; 63
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e8       	ldi	r20, 0x80	; 128
    256c:	5f e3       	ldi	r21, 0x3F	; 63
    256e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2572:	88 23       	and	r24, r24
    2574:	2c f4       	brge	.+10     	; 0x2580 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	9e af       	std	Y+62, r25	; 0x3e
    257c:	8d af       	std	Y+61, r24	; 0x3d
    257e:	46 c0       	rjmp	.+140    	; 0x260c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2580:	fe 01       	movw	r30, r28
    2582:	ff 96       	adiw	r30, 0x3f	; 63
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	64 f5       	brge	.+88     	; 0x25f4 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	fe 01       	movw	r30, r28
    259e:	ed 5b       	subi	r30, 0xBD	; 189
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	60 81       	ld	r22, Z
    25a4:	71 81       	ldd	r23, Z+1	; 0x01
    25a6:	82 81       	ldd	r24, Z+2	; 0x02
    25a8:	93 81       	ldd	r25, Z+3	; 0x03
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	40 e2       	ldi	r20, 0x20	; 32
    25b0:	51 e4       	ldi	r21, 0x41	; 65
    25b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b6:	dc 01       	movw	r26, r24
    25b8:	cb 01       	movw	r24, r22
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	9e af       	std	Y+62, r25	; 0x3e
    25c8:	8d af       	std	Y+61, r24	; 0x3d
    25ca:	0f c0       	rjmp	.+30     	; 0x25ea <LCD_sendCommand+0x478>
    25cc:	89 e1       	ldi	r24, 0x19	; 25
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9c af       	std	Y+60, r25	; 0x3c
    25d2:	8b af       	std	Y+59, r24	; 0x3b
    25d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    25d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    25d8:	01 97       	sbiw	r24, 0x01	; 1
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <LCD_sendCommand+0x466>
    25dc:	9c af       	std	Y+60, r25	; 0x3c
    25de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	9e af       	std	Y+62, r25	; 0x3e
    25e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    25ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	69 f7       	brne	.-38     	; 0x25cc <LCD_sendCommand+0x45a>
    25f2:	16 c0       	rjmp	.+44     	; 0x2620 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f4:	fe 01       	movw	r30, r28
    25f6:	ff 96       	adiw	r30, 0x3f	; 63
    25f8:	60 81       	ld	r22, Z
    25fa:	71 81       	ldd	r23, Z+1	; 0x01
    25fc:	82 81       	ldd	r24, Z+2	; 0x02
    25fe:	93 81       	ldd	r25, Z+3	; 0x03
    2600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	9e af       	std	Y+62, r25	; 0x3e
    260a:	8d af       	std	Y+61, r24	; 0x3d
    260c:	8d ad       	ldd	r24, Y+61	; 0x3d
    260e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2610:	9a af       	std	Y+58, r25	; 0x3a
    2612:	89 af       	std	Y+57, r24	; 0x39
    2614:	89 ad       	ldd	r24, Y+57	; 0x39
    2616:	9a ad       	ldd	r25, Y+58	; 0x3a
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <LCD_sendCommand+0x4a6>
    261c:	9a af       	std	Y+58, r25	; 0x3a
    261e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	65 e0       	ldi	r22, 0x05	; 5
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    262a:	80 e0       	ldi	r24, 0x00	; 0
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	a0 e8       	ldi	r26, 0x80	; 128
    2630:	bf e3       	ldi	r27, 0x3F	; 63
    2632:	8d ab       	std	Y+53, r24	; 0x35
    2634:	9e ab       	std	Y+54, r25	; 0x36
    2636:	af ab       	std	Y+55, r26	; 0x37
    2638:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263a:	6d a9       	ldd	r22, Y+53	; 0x35
    263c:	7e a9       	ldd	r23, Y+54	; 0x36
    263e:	8f a9       	ldd	r24, Y+55	; 0x37
    2640:	98 ad       	ldd	r25, Y+56	; 0x38
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	30 e0       	ldi	r19, 0x00	; 0
    2646:	4a e7       	ldi	r20, 0x7A	; 122
    2648:	53 e4       	ldi	r21, 0x43	; 67
    264a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	89 ab       	std	Y+49, r24	; 0x31
    2654:	9a ab       	std	Y+50, r25	; 0x32
    2656:	ab ab       	std	Y+51, r26	; 0x33
    2658:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    265a:	69 a9       	ldd	r22, Y+49	; 0x31
    265c:	7a a9       	ldd	r23, Y+50	; 0x32
    265e:	8b a9       	ldd	r24, Y+51	; 0x33
    2660:	9c a9       	ldd	r25, Y+52	; 0x34
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e8       	ldi	r20, 0x80	; 128
    2668:	5f e3       	ldi	r21, 0x3F	; 63
    266a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    266e:	88 23       	and	r24, r24
    2670:	2c f4       	brge	.+10     	; 0x267c <LCD_sendCommand+0x50a>
		__ticks = 1;
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	98 ab       	std	Y+48, r25	; 0x30
    2678:	8f a7       	std	Y+47, r24	; 0x2f
    267a:	3f c0       	rjmp	.+126    	; 0x26fa <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    267c:	69 a9       	ldd	r22, Y+49	; 0x31
    267e:	7a a9       	ldd	r23, Y+50	; 0x32
    2680:	8b a9       	ldd	r24, Y+51	; 0x33
    2682:	9c a9       	ldd	r25, Y+52	; 0x34
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	3f ef       	ldi	r19, 0xFF	; 255
    2688:	4f e7       	ldi	r20, 0x7F	; 127
    268a:	57 e4       	ldi	r21, 0x47	; 71
    268c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2690:	18 16       	cp	r1, r24
    2692:	4c f5       	brge	.+82     	; 0x26e6 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2694:	6d a9       	ldd	r22, Y+53	; 0x35
    2696:	7e a9       	ldd	r23, Y+54	; 0x36
    2698:	8f a9       	ldd	r24, Y+55	; 0x37
    269a:	98 ad       	ldd	r25, Y+56	; 0x38
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e2       	ldi	r20, 0x20	; 32
    26a2:	51 e4       	ldi	r21, 0x41	; 65
    26a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	bc 01       	movw	r22, r24
    26ae:	cd 01       	movw	r24, r26
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	98 ab       	std	Y+48, r25	; 0x30
    26ba:	8f a7       	std	Y+47, r24	; 0x2f
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <LCD_sendCommand+0x56a>
    26be:	89 e1       	ldi	r24, 0x19	; 25
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9e a7       	std	Y+46, r25	; 0x2e
    26c4:	8d a7       	std	Y+45, r24	; 0x2d
    26c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    26c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    26ca:	01 97       	sbiw	r24, 0x01	; 1
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_sendCommand+0x558>
    26ce:	9e a7       	std	Y+46, r25	; 0x2e
    26d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d4:	98 a9       	ldd	r25, Y+48	; 0x30
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	98 ab       	std	Y+48, r25	; 0x30
    26da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    26de:	98 a9       	ldd	r25, Y+48	; 0x30
    26e0:	00 97       	sbiw	r24, 0x00	; 0
    26e2:	69 f7       	brne	.-38     	; 0x26be <LCD_sendCommand+0x54c>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e6:	69 a9       	ldd	r22, Y+49	; 0x31
    26e8:	7a a9       	ldd	r23, Y+50	; 0x32
    26ea:	8b a9       	ldd	r24, Y+51	; 0x33
    26ec:	9c a9       	ldd	r25, Y+52	; 0x34
    26ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	98 ab       	std	Y+48, r25	; 0x30
    26f8:	8f a7       	std	Y+47, r24	; 0x2f
    26fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    26fc:	98 a9       	ldd	r25, Y+48	; 0x30
    26fe:	9c a7       	std	Y+44, r25	; 0x2c
    2700:	8b a7       	std	Y+43, r24	; 0x2b
    2702:	8b a5       	ldd	r24, Y+43	; 0x2b
    2704:	9c a5       	ldd	r25, Y+44	; 0x2c
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_sendCommand+0x594>
    270a:	9c a7       	std	Y+44, r25	; 0x2c
    270c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    270e:	82 e0       	ldi	r24, 0x02	; 2
    2710:	65 e0       	ldi	r22, 0x05	; 5
    2712:	41 e0       	ldi	r20, 0x01	; 1
    2714:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2718:	80 e0       	ldi	r24, 0x00	; 0
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	a0 e8       	ldi	r26, 0x80	; 128
    271e:	bf e3       	ldi	r27, 0x3F	; 63
    2720:	8f a3       	std	Y+39, r24	; 0x27
    2722:	98 a7       	std	Y+40, r25	; 0x28
    2724:	a9 a7       	std	Y+41, r26	; 0x29
    2726:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2728:	6f a1       	ldd	r22, Y+39	; 0x27
    272a:	78 a5       	ldd	r23, Y+40	; 0x28
    272c:	89 a5       	ldd	r24, Y+41	; 0x29
    272e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2730:	20 e0       	ldi	r18, 0x00	; 0
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	4a e7       	ldi	r20, 0x7A	; 122
    2736:	53 e4       	ldi	r21, 0x43	; 67
    2738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273c:	dc 01       	movw	r26, r24
    273e:	cb 01       	movw	r24, r22
    2740:	8b a3       	std	Y+35, r24	; 0x23
    2742:	9c a3       	std	Y+36, r25	; 0x24
    2744:	ad a3       	std	Y+37, r26	; 0x25
    2746:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2748:	6b a1       	ldd	r22, Y+35	; 0x23
    274a:	7c a1       	ldd	r23, Y+36	; 0x24
    274c:	8d a1       	ldd	r24, Y+37	; 0x25
    274e:	9e a1       	ldd	r25, Y+38	; 0x26
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	2c f4       	brge	.+10     	; 0x276a <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9a a3       	std	Y+34, r25	; 0x22
    2766:	89 a3       	std	Y+33, r24	; 0x21
    2768:	3f c0       	rjmp	.+126    	; 0x27e8 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    276a:	6b a1       	ldd	r22, Y+35	; 0x23
    276c:	7c a1       	ldd	r23, Y+36	; 0x24
    276e:	8d a1       	ldd	r24, Y+37	; 0x25
    2770:	9e a1       	ldd	r25, Y+38	; 0x26
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	4c f5       	brge	.+82     	; 0x27d4 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2782:	6f a1       	ldd	r22, Y+39	; 0x27
    2784:	78 a5       	ldd	r23, Y+40	; 0x28
    2786:	89 a5       	ldd	r24, Y+41	; 0x29
    2788:	9a a5       	ldd	r25, Y+42	; 0x2a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e2       	ldi	r20, 0x20	; 32
    2790:	51 e4       	ldi	r21, 0x41	; 65
    2792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2796:	dc 01       	movw	r26, r24
    2798:	cb 01       	movw	r24, r22
    279a:	bc 01       	movw	r22, r24
    279c:	cd 01       	movw	r24, r26
    279e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27a2:	dc 01       	movw	r26, r24
    27a4:	cb 01       	movw	r24, r22
    27a6:	9a a3       	std	Y+34, r25	; 0x22
    27a8:	89 a3       	std	Y+33, r24	; 0x21
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <LCD_sendCommand+0x658>
    27ac:	89 e1       	ldi	r24, 0x19	; 25
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	98 a3       	std	Y+32, r25	; 0x20
    27b2:	8f 8f       	std	Y+31, r24	; 0x1f
    27b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27b6:	98 a1       	ldd	r25, Y+32	; 0x20
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_sendCommand+0x646>
    27bc:	98 a3       	std	Y+32, r25	; 0x20
    27be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	89 a1       	ldd	r24, Y+33	; 0x21
    27c2:	9a a1       	ldd	r25, Y+34	; 0x22
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	9a a3       	std	Y+34, r25	; 0x22
    27c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ca:	89 a1       	ldd	r24, Y+33	; 0x21
    27cc:	9a a1       	ldd	r25, Y+34	; 0x22
    27ce:	00 97       	sbiw	r24, 0x00	; 0
    27d0:	69 f7       	brne	.-38     	; 0x27ac <LCD_sendCommand+0x63a>
    27d2:	14 c0       	rjmp	.+40     	; 0x27fc <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27d4:	6b a1       	ldd	r22, Y+35	; 0x23
    27d6:	7c a1       	ldd	r23, Y+36	; 0x24
    27d8:	8d a1       	ldd	r24, Y+37	; 0x25
    27da:	9e a1       	ldd	r25, Y+38	; 0x26
    27dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	9a a3       	std	Y+34, r25	; 0x22
    27e6:	89 a3       	std	Y+33, r24	; 0x21
    27e8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ea:	9a a1       	ldd	r25, Y+34	; 0x22
    27ec:	9e 8f       	std	Y+30, r25	; 0x1e
    27ee:	8d 8f       	std	Y+29, r24	; 0x1d
    27f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_sendCommand+0x682>
    27f8:	9e 8f       	std	Y+30, r25	; 0x1e
    27fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    27fc:	fe 01       	movw	r30, r28
    27fe:	ed 59       	subi	r30, 0x9D	; 157
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	98 2f       	mov	r25, r24
    2806:	91 70       	andi	r25, 0x01	; 1
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	49 2f       	mov	r20, r25
    280e:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2812:	fe 01       	movw	r30, r28
    2814:	ed 59       	subi	r30, 0x9D	; 157
    2816:	ff 4f       	sbci	r31, 0xFF	; 255
    2818:	80 81       	ld	r24, Z
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	82 70       	andi	r24, 0x02	; 2
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	95 95       	asr	r25
    2824:	87 95       	ror	r24
    2826:	98 2f       	mov	r25, r24
    2828:	82 e0       	ldi	r24, 0x02	; 2
    282a:	61 e0       	ldi	r22, 0x01	; 1
    282c:	49 2f       	mov	r20, r25
    282e:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2832:	fe 01       	movw	r30, r28
    2834:	ed 59       	subi	r30, 0x9D	; 157
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	88 2f       	mov	r24, r24
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	84 70       	andi	r24, 0x04	; 4
    2840:	90 70       	andi	r25, 0x00	; 0
    2842:	95 95       	asr	r25
    2844:	87 95       	ror	r24
    2846:	95 95       	asr	r25
    2848:	87 95       	ror	r24
    284a:	98 2f       	mov	r25, r24
    284c:	82 e0       	ldi	r24, 0x02	; 2
    284e:	62 e0       	ldi	r22, 0x02	; 2
    2850:	49 2f       	mov	r20, r25
    2852:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2856:	fe 01       	movw	r30, r28
    2858:	ed 59       	subi	r30, 0x9D	; 157
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	88 2f       	mov	r24, r24
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	88 70       	andi	r24, 0x08	; 8
    2864:	90 70       	andi	r25, 0x00	; 0
    2866:	95 95       	asr	r25
    2868:	87 95       	ror	r24
    286a:	95 95       	asr	r25
    286c:	87 95       	ror	r24
    286e:	95 95       	asr	r25
    2870:	87 95       	ror	r24
    2872:	98 2f       	mov	r25, r24
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	63 e0       	ldi	r22, 0x03	; 3
    2878:	49 2f       	mov	r20, r25
    287a:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	a0 e8       	ldi	r26, 0x80	; 128
    2884:	bf e3       	ldi	r27, 0x3F	; 63
    2886:	89 8f       	std	Y+25, r24	; 0x19
    2888:	9a 8f       	std	Y+26, r25	; 0x1a
    288a:	ab 8f       	std	Y+27, r26	; 0x1b
    288c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    288e:	69 8d       	ldd	r22, Y+25	; 0x19
    2890:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2892:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2894:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	4a e7       	ldi	r20, 0x7A	; 122
    289c:	53 e4       	ldi	r21, 0x43	; 67
    289e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	8d 8b       	std	Y+21, r24	; 0x15
    28a8:	9e 8b       	std	Y+22, r25	; 0x16
    28aa:	af 8b       	std	Y+23, r26	; 0x17
    28ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e8       	ldi	r20, 0x80	; 128
    28bc:	5f e3       	ldi	r21, 0x3F	; 63
    28be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	2c f4       	brge	.+10     	; 0x28d0 <LCD_sendCommand+0x75e>
		__ticks = 1;
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	9c 8b       	std	Y+20, r25	; 0x14
    28cc:	8b 8b       	std	Y+19, r24	; 0x13
    28ce:	3f c0       	rjmp	.+126    	; 0x294e <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    28d0:	6d 89       	ldd	r22, Y+21	; 0x15
    28d2:	7e 89       	ldd	r23, Y+22	; 0x16
    28d4:	8f 89       	ldd	r24, Y+23	; 0x17
    28d6:	98 8d       	ldd	r25, Y+24	; 0x18
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	3f ef       	ldi	r19, 0xFF	; 255
    28dc:	4f e7       	ldi	r20, 0x7F	; 127
    28de:	57 e4       	ldi	r21, 0x47	; 71
    28e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28e4:	18 16       	cp	r1, r24
    28e6:	4c f5       	brge	.+82     	; 0x293a <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e8:	69 8d       	ldd	r22, Y+25	; 0x19
    28ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e2       	ldi	r20, 0x20	; 32
    28f6:	51 e4       	ldi	r21, 0x41	; 65
    28f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9c 8b       	std	Y+20, r25	; 0x14
    290e:	8b 8b       	std	Y+19, r24	; 0x13
    2910:	0f c0       	rjmp	.+30     	; 0x2930 <LCD_sendCommand+0x7be>
    2912:	89 e1       	ldi	r24, 0x19	; 25
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	9a 8b       	std	Y+18, r25	; 0x12
    2918:	89 8b       	std	Y+17, r24	; 0x11
    291a:	89 89       	ldd	r24, Y+17	; 0x11
    291c:	9a 89       	ldd	r25, Y+18	; 0x12
    291e:	01 97       	sbiw	r24, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <LCD_sendCommand+0x7ac>
    2922:	9a 8b       	std	Y+18, r25	; 0x12
    2924:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	01 97       	sbiw	r24, 0x01	; 1
    292c:	9c 8b       	std	Y+20, r25	; 0x14
    292e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2930:	8b 89       	ldd	r24, Y+19	; 0x13
    2932:	9c 89       	ldd	r25, Y+20	; 0x14
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	69 f7       	brne	.-38     	; 0x2912 <LCD_sendCommand+0x7a0>
    2938:	14 c0       	rjmp	.+40     	; 0x2962 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    293a:	6d 89       	ldd	r22, Y+21	; 0x15
    293c:	7e 89       	ldd	r23, Y+22	; 0x16
    293e:	8f 89       	ldd	r24, Y+23	; 0x17
    2940:	98 8d       	ldd	r25, Y+24	; 0x18
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	98 8b       	std	Y+16, r25	; 0x10
    2954:	8f 87       	std	Y+15, r24	; 0x0f
    2956:	8f 85       	ldd	r24, Y+15	; 0x0f
    2958:	98 89       	ldd	r25, Y+16	; 0x10
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_sendCommand+0x7e8>
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2962:	82 e0       	ldi	r24, 0x02	; 2
    2964:	65 e0       	ldi	r22, 0x05	; 5
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	a0 e8       	ldi	r26, 0x80	; 128
    2972:	bf e3       	ldi	r27, 0x3F	; 63
    2974:	8b 87       	std	Y+11, r24	; 0x0b
    2976:	9c 87       	std	Y+12, r25	; 0x0c
    2978:	ad 87       	std	Y+13, r26	; 0x0d
    297a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6b 85       	ldd	r22, Y+11	; 0x0b
    297e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2980:	8d 85       	ldd	r24, Y+13	; 0x0d
    2982:	9e 85       	ldd	r25, Y+14	; 0x0e
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a e7       	ldi	r20, 0x7A	; 122
    298a:	53 e4       	ldi	r21, 0x43	; 67
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8f 83       	std	Y+7, r24	; 0x07
    2996:	98 87       	std	Y+8, r25	; 0x08
    2998:	a9 87       	std	Y+9, r26	; 0x09
    299a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <LCD_sendCommand+0x84c>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9e 83       	std	Y+6, r25	; 0x06
    29ba:	8d 83       	std	Y+5, r24	; 0x05
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29da:	8d 85       	ldd	r24, Y+13	; 0x0d
    29dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <LCD_sendCommand+0x8ac>
    2a00:	89 e1       	ldi	r24, 0x19	; 25
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9c 83       	std	Y+4, r25	; 0x04
    2a06:	8b 83       	std	Y+3, r24	; 0x03
    2a08:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_sendCommand+0x89a>
    2a10:	9c 83       	std	Y+4, r25	; 0x04
    2a12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8d 81       	ldd	r24, Y+5	; 0x05
    2a16:	9e 81       	ldd	r25, Y+6	; 0x06
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a20:	9e 81       	ldd	r25, Y+6	; 0x06
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <LCD_sendCommand+0x88e>
    2a26:	14 c0       	rjmp	.+40     	; 0x2a50 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6f 81       	ldd	r22, Y+7	; 0x07
    2a2a:	78 85       	ldd	r23, Y+8	; 0x08
    2a2c:	89 85       	ldd	r24, Y+9	; 0x09
    2a2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a40:	9a 83       	std	Y+2, r25	; 0x02
    2a42:	89 83       	std	Y+1, r24	; 0x01
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_sendCommand+0x8d6>
    2a4c:	9a 83       	std	Y+2, r25	; 0x02
    2a4e:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a50:	cd 59       	subi	r28, 0x9D	; 157
    2a52:	df 4f       	sbci	r29, 0xFF	; 255
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	08 95       	ret

00002a68 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	c3 56       	subi	r28, 0x63	; 99
    2a76:	d0 40       	sbci	r29, 0x00	; 0
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	fe 01       	movw	r30, r28
    2a84:	ed 59       	subi	r30, 0x9D	; 157
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2a8a:	82 e0       	ldi	r24, 0x02	; 2
    2a8c:	64 e0       	ldi	r22, 0x04	; 4
    2a8e:	41 e0       	ldi	r20, 0x01	; 1
    2a90:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2a94:	fe 01       	movw	r30, r28
    2a96:	e1 5a       	subi	r30, 0xA1	; 161
    2a98:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a0 e8       	ldi	r26, 0x80	; 128
    2aa0:	bf e3       	ldi	r27, 0x3F	; 63
    2aa2:	80 83       	st	Z, r24
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	a2 83       	std	Z+2, r26	; 0x02
    2aa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	8e 01       	movw	r16, r28
    2aac:	05 5a       	subi	r16, 0xA5	; 165
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	fe 01       	movw	r30, r28
    2ab2:	e1 5a       	subi	r30, 0xA1	; 161
    2ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab6:	60 81       	ld	r22, Z
    2ab8:	71 81       	ldd	r23, Z+1	; 0x01
    2aba:	82 81       	ldd	r24, Z+2	; 0x02
    2abc:	93 81       	ldd	r25, Z+3	; 0x03
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	4a e7       	ldi	r20, 0x7A	; 122
    2ac4:	53 e4       	ldi	r21, 0x43	; 67
    2ac6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aca:	dc 01       	movw	r26, r24
    2acc:	cb 01       	movw	r24, r22
    2ace:	f8 01       	movw	r30, r16
    2ad0:	80 83       	st	Z, r24
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	a2 83       	std	Z+2, r26	; 0x02
    2ad6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ad8:	fe 01       	movw	r30, r28
    2ada:	e5 5a       	subi	r30, 0xA5	; 165
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e8       	ldi	r20, 0x80	; 128
    2aec:	5f e3       	ldi	r21, 0x3F	; 63
    2aee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2af2:	88 23       	and	r24, r24
    2af4:	44 f4       	brge	.+16     	; 0x2b06 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2af6:	fe 01       	movw	r30, r28
    2af8:	e7 5a       	subi	r30, 0xA7	; 167
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	80 83       	st	Z, r24
    2b04:	64 c0       	rjmp	.+200    	; 0x2bce <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2b06:	fe 01       	movw	r30, r28
    2b08:	e5 5a       	subi	r30, 0xA5	; 165
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	60 81       	ld	r22, Z
    2b0e:	71 81       	ldd	r23, Z+1	; 0x01
    2b10:	82 81       	ldd	r24, Z+2	; 0x02
    2b12:	93 81       	ldd	r25, Z+3	; 0x03
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	3f ef       	ldi	r19, 0xFF	; 255
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	57 e4       	ldi	r21, 0x47	; 71
    2b1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	0c f0       	brlt	.+2      	; 0x2b26 <LCD_displayCharacter+0xbe>
    2b24:	43 c0       	rjmp	.+134    	; 0x2bac <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b26:	fe 01       	movw	r30, r28
    2b28:	e1 5a       	subi	r30, 0xA1	; 161
    2b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2c:	60 81       	ld	r22, Z
    2b2e:	71 81       	ldd	r23, Z+1	; 0x01
    2b30:	82 81       	ldd	r24, Z+2	; 0x02
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8e 01       	movw	r16, r28
    2b46:	07 5a       	subi	r16, 0xA7	; 167
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	bc 01       	movw	r22, r24
    2b4c:	cd 01       	movw	r24, r26
    2b4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	f8 01       	movw	r30, r16
    2b58:	91 83       	std	Z+1, r25	; 0x01
    2b5a:	80 83       	st	Z, r24
    2b5c:	1f c0       	rjmp	.+62     	; 0x2b9c <LCD_displayCharacter+0x134>
    2b5e:	fe 01       	movw	r30, r28
    2b60:	e9 5a       	subi	r30, 0xA9	; 169
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	89 e1       	ldi	r24, 0x19	; 25
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	80 83       	st	Z, r24
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e9 5a       	subi	r30, 0xA9	; 169
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <LCD_displayCharacter+0x10e>
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e9 5a       	subi	r30, 0xA9	; 169
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	91 83       	std	Z+1, r25	; 0x01
    2b82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b84:	de 01       	movw	r26, r28
    2b86:	a7 5a       	subi	r26, 0xA7	; 167
    2b88:	bf 4f       	sbci	r27, 0xFF	; 255
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e7 5a       	subi	r30, 0xA7	; 167
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	11 96       	adiw	r26, 0x01	; 1
    2b98:	9c 93       	st	X, r25
    2b9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e7 5a       	subi	r30, 0xA7	; 167
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	91 81       	ldd	r25, Z+1	; 0x01
    2ba6:	00 97       	sbiw	r24, 0x00	; 0
    2ba8:	d1 f6       	brne	.-76     	; 0x2b5e <LCD_displayCharacter+0xf6>
    2baa:	27 c0       	rjmp	.+78     	; 0x2bfa <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bac:	8e 01       	movw	r16, r28
    2bae:	07 5a       	subi	r16, 0xA7	; 167
    2bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e5 5a       	subi	r30, 0xA5	; 165
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	60 81       	ld	r22, Z
    2bba:	71 81       	ldd	r23, Z+1	; 0x01
    2bbc:	82 81       	ldd	r24, Z+2	; 0x02
    2bbe:	93 81       	ldd	r25, Z+3	; 0x03
    2bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	f8 01       	movw	r30, r16
    2bca:	91 83       	std	Z+1, r25	; 0x01
    2bcc:	80 83       	st	Z, r24
    2bce:	de 01       	movw	r26, r28
    2bd0:	ab 5a       	subi	r26, 0xAB	; 171
    2bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd4:	fe 01       	movw	r30, r28
    2bd6:	e7 5a       	subi	r30, 0xA7	; 167
    2bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bda:	80 81       	ld	r24, Z
    2bdc:	91 81       	ldd	r25, Z+1	; 0x01
    2bde:	8d 93       	st	X+, r24
    2be0:	9c 93       	st	X, r25
    2be2:	fe 01       	movw	r30, r28
    2be4:	eb 5a       	subi	r30, 0xAB	; 171
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	80 81       	ld	r24, Z
    2bea:	91 81       	ldd	r25, Z+1	; 0x01
    2bec:	01 97       	sbiw	r24, 0x01	; 1
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_displayCharacter+0x184>
    2bf0:	fe 01       	movw	r30, r28
    2bf2:	eb 5a       	subi	r30, 0xAB	; 171
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bfa:	82 e0       	ldi	r24, 0x02	; 2
    2bfc:	65 e0       	ldi	r22, 0x05	; 5
    2bfe:	41 e0       	ldi	r20, 0x01	; 1
    2c00:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 5a       	subi	r30, 0xAF	; 175
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	a0 e8       	ldi	r26, 0x80	; 128
    2c10:	bf e3       	ldi	r27, 0x3F	; 63
    2c12:	80 83       	st	Z, r24
    2c14:	91 83       	std	Z+1, r25	; 0x01
    2c16:	a2 83       	std	Z+2, r26	; 0x02
    2c18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c1a:	8e 01       	movw	r16, r28
    2c1c:	03 5b       	subi	r16, 0xB3	; 179
    2c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	ef 5a       	subi	r30, 0xAF	; 175
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4a e7       	ldi	r20, 0x7A	; 122
    2c34:	53 e4       	ldi	r21, 0x43	; 67
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	f8 01       	movw	r30, r16
    2c40:	80 83       	st	Z, r24
    2c42:	91 83       	std	Z+1, r25	; 0x01
    2c44:	a2 83       	std	Z+2, r26	; 0x02
    2c46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e3 5b       	subi	r30, 0xB3	; 179
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	40 e8       	ldi	r20, 0x80	; 128
    2c5c:	5f e3       	ldi	r21, 0x3F	; 63
    2c5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c62:	88 23       	and	r24, r24
    2c64:	44 f4       	brge	.+16     	; 0x2c76 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c66:	fe 01       	movw	r30, r28
    2c68:	e5 5b       	subi	r30, 0xB5	; 181
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	91 83       	std	Z+1, r25	; 0x01
    2c72:	80 83       	st	Z, r24
    2c74:	64 c0       	rjmp	.+200    	; 0x2d3e <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2c76:	fe 01       	movw	r30, r28
    2c78:	e3 5b       	subi	r30, 0xB3	; 179
    2c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	3f ef       	ldi	r19, 0xFF	; 255
    2c88:	4f e7       	ldi	r20, 0x7F	; 127
    2c8a:	57 e4       	ldi	r21, 0x47	; 71
    2c8c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c90:	18 16       	cp	r1, r24
    2c92:	0c f0       	brlt	.+2      	; 0x2c96 <LCD_displayCharacter+0x22e>
    2c94:	43 c0       	rjmp	.+134    	; 0x2d1c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	fe 01       	movw	r30, r28
    2c98:	ef 5a       	subi	r30, 0xAF	; 175
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	40 e2       	ldi	r20, 0x20	; 32
    2caa:	51 e4       	ldi	r21, 0x41	; 65
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	8e 01       	movw	r16, r28
    2cb6:	05 5b       	subi	r16, 0xB5	; 181
    2cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	f8 01       	movw	r30, r16
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
    2ccc:	1f c0       	rjmp	.+62     	; 0x2d0c <LCD_displayCharacter+0x2a4>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	e7 5b       	subi	r30, 0xB7	; 183
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	89 e1       	ldi	r24, 0x19	; 25
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	91 83       	std	Z+1, r25	; 0x01
    2cda:	80 83       	st	Z, r24
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e7 5b       	subi	r30, 0xB7	; 183
    2ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce2:	80 81       	ld	r24, Z
    2ce4:	91 81       	ldd	r25, Z+1	; 0x01
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_displayCharacter+0x27e>
    2cea:	fe 01       	movw	r30, r28
    2cec:	e7 5b       	subi	r30, 0xB7	; 183
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	de 01       	movw	r26, r28
    2cf6:	a5 5b       	subi	r26, 0xB5	; 181
    2cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	e5 5b       	subi	r30, 0xB5	; 181
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	80 81       	ld	r24, Z
    2d02:	91 81       	ldd	r25, Z+1	; 0x01
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	11 96       	adiw	r26, 0x01	; 1
    2d08:	9c 93       	st	X, r25
    2d0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d0c:	fe 01       	movw	r30, r28
    2d0e:	e5 5b       	subi	r30, 0xB5	; 181
    2d10:	ff 4f       	sbci	r31, 0xFF	; 255
    2d12:	80 81       	ld	r24, Z
    2d14:	91 81       	ldd	r25, Z+1	; 0x01
    2d16:	00 97       	sbiw	r24, 0x00	; 0
    2d18:	d1 f6       	brne	.-76     	; 0x2cce <LCD_displayCharacter+0x266>
    2d1a:	27 c0       	rjmp	.+78     	; 0x2d6a <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d1c:	8e 01       	movw	r16, r28
    2d1e:	05 5b       	subi	r16, 0xB5	; 181
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	fe 01       	movw	r30, r28
    2d24:	e3 5b       	subi	r30, 0xB3	; 179
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	60 81       	ld	r22, Z
    2d2a:	71 81       	ldd	r23, Z+1	; 0x01
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	f8 01       	movw	r30, r16
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	80 83       	st	Z, r24
    2d3e:	de 01       	movw	r26, r28
    2d40:	a9 5b       	subi	r26, 0xB9	; 185
    2d42:	bf 4f       	sbci	r27, 0xFF	; 255
    2d44:	fe 01       	movw	r30, r28
    2d46:	e5 5b       	subi	r30, 0xB5	; 181
    2d48:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	8d 93       	st	X+, r24
    2d50:	9c 93       	st	X, r25
    2d52:	fe 01       	movw	r30, r28
    2d54:	e9 5b       	subi	r30, 0xB9	; 185
    2d56:	ff 4f       	sbci	r31, 0xFF	; 255
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	f1 f7       	brne	.-4      	; 0x2d5c <LCD_displayCharacter+0x2f4>
    2d60:	fe 01       	movw	r30, r28
    2d62:	e9 5b       	subi	r30, 0xB9	; 185
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	91 83       	std	Z+1, r25	; 0x01
    2d68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	ed 59       	subi	r30, 0x9D	; 157
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	88 2f       	mov	r24, r24
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	80 71       	andi	r24, 0x10	; 16
    2d78:	90 70       	andi	r25, 0x00	; 0
    2d7a:	95 95       	asr	r25
    2d7c:	87 95       	ror	r24
    2d7e:	95 95       	asr	r25
    2d80:	87 95       	ror	r24
    2d82:	95 95       	asr	r25
    2d84:	87 95       	ror	r24
    2d86:	95 95       	asr	r25
    2d88:	87 95       	ror	r24
    2d8a:	98 2f       	mov	r25, r24
    2d8c:	82 e0       	ldi	r24, 0x02	; 2
    2d8e:	60 e0       	ldi	r22, 0x00	; 0
    2d90:	49 2f       	mov	r20, r25
    2d92:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2d96:	fe 01       	movw	r30, r28
    2d98:	ed 59       	subi	r30, 0x9D	; 157
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	88 2f       	mov	r24, r24
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	80 72       	andi	r24, 0x20	; 32
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	95 95       	asr	r25
    2da8:	87 95       	ror	r24
    2daa:	95 95       	asr	r25
    2dac:	87 95       	ror	r24
    2dae:	95 95       	asr	r25
    2db0:	87 95       	ror	r24
    2db2:	95 95       	asr	r25
    2db4:	87 95       	ror	r24
    2db6:	95 95       	asr	r25
    2db8:	87 95       	ror	r24
    2dba:	98 2f       	mov	r25, r24
    2dbc:	82 e0       	ldi	r24, 0x02	; 2
    2dbe:	61 e0       	ldi	r22, 0x01	; 1
    2dc0:	49 2f       	mov	r20, r25
    2dc2:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	ed 59       	subi	r30, 0x9D	; 157
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	80 81       	ld	r24, Z
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	80 74       	andi	r24, 0x40	; 64
    2dd4:	90 70       	andi	r25, 0x00	; 0
    2dd6:	08 2e       	mov	r0, r24
    2dd8:	89 2f       	mov	r24, r25
    2dda:	00 0c       	add	r0, r0
    2ddc:	88 1f       	adc	r24, r24
    2dde:	99 0b       	sbc	r25, r25
    2de0:	00 0c       	add	r0, r0
    2de2:	88 1f       	adc	r24, r24
    2de4:	99 1f       	adc	r25, r25
    2de6:	98 2f       	mov	r25, r24
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	62 e0       	ldi	r22, 0x02	; 2
    2dec:	49 2f       	mov	r20, r25
    2dee:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2df2:	fe 01       	movw	r30, r28
    2df4:	ed 59       	subi	r30, 0x9D	; 157
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	99 27       	eor	r25, r25
    2e00:	99 1f       	adc	r25, r25
    2e02:	82 e0       	ldi	r24, 0x02	; 2
    2e04:	63 e0       	ldi	r22, 0x03	; 3
    2e06:	49 2f       	mov	r20, r25
    2e08:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2e0c:	fe 01       	movw	r30, r28
    2e0e:	ed 5b       	subi	r30, 0xBD	; 189
    2e10:	ff 4f       	sbci	r31, 0xFF	; 255
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	a0 e8       	ldi	r26, 0x80	; 128
    2e18:	bf e3       	ldi	r27, 0x3F	; 63
    2e1a:	80 83       	st	Z, r24
    2e1c:	91 83       	std	Z+1, r25	; 0x01
    2e1e:	a2 83       	std	Z+2, r26	; 0x02
    2e20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e22:	8e 01       	movw	r16, r28
    2e24:	01 5c       	subi	r16, 0xC1	; 193
    2e26:	1f 4f       	sbci	r17, 0xFF	; 255
    2e28:	fe 01       	movw	r30, r28
    2e2a:	ed 5b       	subi	r30, 0xBD	; 189
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	60 81       	ld	r22, Z
    2e30:	71 81       	ldd	r23, Z+1	; 0x01
    2e32:	82 81       	ldd	r24, Z+2	; 0x02
    2e34:	93 81       	ldd	r25, Z+3	; 0x03
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	4a e7       	ldi	r20, 0x7A	; 122
    2e3c:	53 e4       	ldi	r21, 0x43	; 67
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	f8 01       	movw	r30, r16
    2e48:	80 83       	st	Z, r24
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	a2 83       	std	Z+2, r26	; 0x02
    2e4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e50:	fe 01       	movw	r30, r28
    2e52:	ff 96       	adiw	r30, 0x3f	; 63
    2e54:	60 81       	ld	r22, Z
    2e56:	71 81       	ldd	r23, Z+1	; 0x01
    2e58:	82 81       	ldd	r24, Z+2	; 0x02
    2e5a:	93 81       	ldd	r25, Z+3	; 0x03
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e8       	ldi	r20, 0x80	; 128
    2e62:	5f e3       	ldi	r21, 0x3F	; 63
    2e64:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e68:	88 23       	and	r24, r24
    2e6a:	2c f4       	brge	.+10     	; 0x2e76 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9e af       	std	Y+62, r25	; 0x3e
    2e72:	8d af       	std	Y+61, r24	; 0x3d
    2e74:	46 c0       	rjmp	.+140    	; 0x2f02 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2e76:	fe 01       	movw	r30, r28
    2e78:	ff 96       	adiw	r30, 0x3f	; 63
    2e7a:	60 81       	ld	r22, Z
    2e7c:	71 81       	ldd	r23, Z+1	; 0x01
    2e7e:	82 81       	ldd	r24, Z+2	; 0x02
    2e80:	93 81       	ldd	r25, Z+3	; 0x03
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	64 f5       	brge	.+88     	; 0x2eea <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	fe 01       	movw	r30, r28
    2e94:	ed 5b       	subi	r30, 0xBD	; 189
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	9e af       	std	Y+62, r25	; 0x3e
    2ebe:	8d af       	std	Y+61, r24	; 0x3d
    2ec0:	0f c0       	rjmp	.+30     	; 0x2ee0 <LCD_displayCharacter+0x478>
    2ec2:	89 e1       	ldi	r24, 0x19	; 25
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	9c af       	std	Y+60, r25	; 0x3c
    2ec8:	8b af       	std	Y+59, r24	; 0x3b
    2eca:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ecc:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <LCD_displayCharacter+0x466>
    2ed2:	9c af       	std	Y+60, r25	; 0x3c
    2ed4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ed8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	9e af       	std	Y+62, r25	; 0x3e
    2ede:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ee0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ee2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ee4:	00 97       	sbiw	r24, 0x00	; 0
    2ee6:	69 f7       	brne	.-38     	; 0x2ec2 <LCD_displayCharacter+0x45a>
    2ee8:	16 c0       	rjmp	.+44     	; 0x2f16 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eea:	fe 01       	movw	r30, r28
    2eec:	ff 96       	adiw	r30, 0x3f	; 63
    2eee:	60 81       	ld	r22, Z
    2ef0:	71 81       	ldd	r23, Z+1	; 0x01
    2ef2:	82 81       	ldd	r24, Z+2	; 0x02
    2ef4:	93 81       	ldd	r25, Z+3	; 0x03
    2ef6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	9e af       	std	Y+62, r25	; 0x3e
    2f00:	8d af       	std	Y+61, r24	; 0x3d
    2f02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f06:	9a af       	std	Y+58, r25	; 0x3a
    2f08:	89 af       	std	Y+57, r24	; 0x39
    2f0a:	89 ad       	ldd	r24, Y+57	; 0x39
    2f0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f0e:	01 97       	sbiw	r24, 0x01	; 1
    2f10:	f1 f7       	brne	.-4      	; 0x2f0e <LCD_displayCharacter+0x4a6>
    2f12:	9a af       	std	Y+58, r25	; 0x3a
    2f14:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f16:	82 e0       	ldi	r24, 0x02	; 2
    2f18:	65 e0       	ldi	r22, 0x05	; 5
    2f1a:	40 e0       	ldi	r20, 0x00	; 0
    2f1c:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	a0 e8       	ldi	r26, 0x80	; 128
    2f26:	bf e3       	ldi	r27, 0x3F	; 63
    2f28:	8d ab       	std	Y+53, r24	; 0x35
    2f2a:	9e ab       	std	Y+54, r25	; 0x36
    2f2c:	af ab       	std	Y+55, r26	; 0x37
    2f2e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f30:	6d a9       	ldd	r22, Y+53	; 0x35
    2f32:	7e a9       	ldd	r23, Y+54	; 0x36
    2f34:	8f a9       	ldd	r24, Y+55	; 0x37
    2f36:	98 ad       	ldd	r25, Y+56	; 0x38
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a e7       	ldi	r20, 0x7A	; 122
    2f3e:	53 e4       	ldi	r21, 0x43	; 67
    2f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	89 ab       	std	Y+49, r24	; 0x31
    2f4a:	9a ab       	std	Y+50, r25	; 0x32
    2f4c:	ab ab       	std	Y+51, r26	; 0x33
    2f4e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f50:	69 a9       	ldd	r22, Y+49	; 0x31
    2f52:	7a a9       	ldd	r23, Y+50	; 0x32
    2f54:	8b a9       	ldd	r24, Y+51	; 0x33
    2f56:	9c a9       	ldd	r25, Y+52	; 0x34
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e8       	ldi	r20, 0x80	; 128
    2f5e:	5f e3       	ldi	r21, 0x3F	; 63
    2f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f64:	88 23       	and	r24, r24
    2f66:	2c f4       	brge	.+10     	; 0x2f72 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	98 ab       	std	Y+48, r25	; 0x30
    2f6e:	8f a7       	std	Y+47, r24	; 0x2f
    2f70:	3f c0       	rjmp	.+126    	; 0x2ff0 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2f72:	69 a9       	ldd	r22, Y+49	; 0x31
    2f74:	7a a9       	ldd	r23, Y+50	; 0x32
    2f76:	8b a9       	ldd	r24, Y+51	; 0x33
    2f78:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	3f ef       	ldi	r19, 0xFF	; 255
    2f7e:	4f e7       	ldi	r20, 0x7F	; 127
    2f80:	57 e4       	ldi	r21, 0x47	; 71
    2f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f86:	18 16       	cp	r1, r24
    2f88:	4c f5       	brge	.+82     	; 0x2fdc <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f8a:	6d a9       	ldd	r22, Y+53	; 0x35
    2f8c:	7e a9       	ldd	r23, Y+54	; 0x36
    2f8e:	8f a9       	ldd	r24, Y+55	; 0x37
    2f90:	98 ad       	ldd	r25, Y+56	; 0x38
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	40 e2       	ldi	r20, 0x20	; 32
    2f98:	51 e4       	ldi	r21, 0x41	; 65
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	bc 01       	movw	r22, r24
    2fa4:	cd 01       	movw	r24, r26
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	98 ab       	std	Y+48, r25	; 0x30
    2fb0:	8f a7       	std	Y+47, r24	; 0x2f
    2fb2:	0f c0       	rjmp	.+30     	; 0x2fd2 <LCD_displayCharacter+0x56a>
    2fb4:	89 e1       	ldi	r24, 0x19	; 25
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	9e a7       	std	Y+46, r25	; 0x2e
    2fba:	8d a7       	std	Y+45, r24	; 0x2d
    2fbc:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fbe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fc0:	01 97       	sbiw	r24, 0x01	; 1
    2fc2:	f1 f7       	brne	.-4      	; 0x2fc0 <LCD_displayCharacter+0x558>
    2fc4:	9e a7       	std	Y+46, r25	; 0x2e
    2fc6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fc8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fca:	98 a9       	ldd	r25, Y+48	; 0x30
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	98 ab       	std	Y+48, r25	; 0x30
    2fd0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2fd6:	00 97       	sbiw	r24, 0x00	; 0
    2fd8:	69 f7       	brne	.-38     	; 0x2fb4 <LCD_displayCharacter+0x54c>
    2fda:	14 c0       	rjmp	.+40     	; 0x3004 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fdc:	69 a9       	ldd	r22, Y+49	; 0x31
    2fde:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe0:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe2:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	98 ab       	std	Y+48, r25	; 0x30
    2fee:	8f a7       	std	Y+47, r24	; 0x2f
    2ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ff4:	9c a7       	std	Y+44, r25	; 0x2c
    2ff6:	8b a7       	std	Y+43, r24	; 0x2b
    2ff8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ffa:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_displayCharacter+0x594>
    3000:	9c a7       	std	Y+44, r25	; 0x2c
    3002:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	65 e0       	ldi	r22, 0x05	; 5
    3008:	41 e0       	ldi	r20, 0x01	; 1
    300a:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    300e:	80 e0       	ldi	r24, 0x00	; 0
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	a0 e8       	ldi	r26, 0x80	; 128
    3014:	bf e3       	ldi	r27, 0x3F	; 63
    3016:	8f a3       	std	Y+39, r24	; 0x27
    3018:	98 a7       	std	Y+40, r25	; 0x28
    301a:	a9 a7       	std	Y+41, r26	; 0x29
    301c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301e:	6f a1       	ldd	r22, Y+39	; 0x27
    3020:	78 a5       	ldd	r23, Y+40	; 0x28
    3022:	89 a5       	ldd	r24, Y+41	; 0x29
    3024:	9a a5       	ldd	r25, Y+42	; 0x2a
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	4a e7       	ldi	r20, 0x7A	; 122
    302c:	53 e4       	ldi	r21, 0x43	; 67
    302e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	8b a3       	std	Y+35, r24	; 0x23
    3038:	9c a3       	std	Y+36, r25	; 0x24
    303a:	ad a3       	std	Y+37, r26	; 0x25
    303c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    303e:	6b a1       	ldd	r22, Y+35	; 0x23
    3040:	7c a1       	ldd	r23, Y+36	; 0x24
    3042:	8d a1       	ldd	r24, Y+37	; 0x25
    3044:	9e a1       	ldd	r25, Y+38	; 0x26
    3046:	20 e0       	ldi	r18, 0x00	; 0
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	40 e8       	ldi	r20, 0x80	; 128
    304c:	5f e3       	ldi	r21, 0x3F	; 63
    304e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3052:	88 23       	and	r24, r24
    3054:	2c f4       	brge	.+10     	; 0x3060 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	90 e0       	ldi	r25, 0x00	; 0
    305a:	9a a3       	std	Y+34, r25	; 0x22
    305c:	89 a3       	std	Y+33, r24	; 0x21
    305e:	3f c0       	rjmp	.+126    	; 0x30de <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3060:	6b a1       	ldd	r22, Y+35	; 0x23
    3062:	7c a1       	ldd	r23, Y+36	; 0x24
    3064:	8d a1       	ldd	r24, Y+37	; 0x25
    3066:	9e a1       	ldd	r25, Y+38	; 0x26
    3068:	20 e0       	ldi	r18, 0x00	; 0
    306a:	3f ef       	ldi	r19, 0xFF	; 255
    306c:	4f e7       	ldi	r20, 0x7F	; 127
    306e:	57 e4       	ldi	r21, 0x47	; 71
    3070:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3074:	18 16       	cp	r1, r24
    3076:	4c f5       	brge	.+82     	; 0x30ca <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3078:	6f a1       	ldd	r22, Y+39	; 0x27
    307a:	78 a5       	ldd	r23, Y+40	; 0x28
    307c:	89 a5       	ldd	r24, Y+41	; 0x29
    307e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e2       	ldi	r20, 0x20	; 32
    3086:	51 e4       	ldi	r21, 0x41	; 65
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	bc 01       	movw	r22, r24
    3092:	cd 01       	movw	r24, r26
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9a a3       	std	Y+34, r25	; 0x22
    309e:	89 a3       	std	Y+33, r24	; 0x21
    30a0:	0f c0       	rjmp	.+30     	; 0x30c0 <LCD_displayCharacter+0x658>
    30a2:	89 e1       	ldi	r24, 0x19	; 25
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	98 a3       	std	Y+32, r25	; 0x20
    30a8:	8f 8f       	std	Y+31, r24	; 0x1f
    30aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30ac:	98 a1       	ldd	r25, Y+32	; 0x20
    30ae:	01 97       	sbiw	r24, 0x01	; 1
    30b0:	f1 f7       	brne	.-4      	; 0x30ae <LCD_displayCharacter+0x646>
    30b2:	98 a3       	std	Y+32, r25	; 0x20
    30b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b6:	89 a1       	ldd	r24, Y+33	; 0x21
    30b8:	9a a1       	ldd	r25, Y+34	; 0x22
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	9a a3       	std	Y+34, r25	; 0x22
    30be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c0:	89 a1       	ldd	r24, Y+33	; 0x21
    30c2:	9a a1       	ldd	r25, Y+34	; 0x22
    30c4:	00 97       	sbiw	r24, 0x00	; 0
    30c6:	69 f7       	brne	.-38     	; 0x30a2 <LCD_displayCharacter+0x63a>
    30c8:	14 c0       	rjmp	.+40     	; 0x30f2 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30ca:	6b a1       	ldd	r22, Y+35	; 0x23
    30cc:	7c a1       	ldd	r23, Y+36	; 0x24
    30ce:	8d a1       	ldd	r24, Y+37	; 0x25
    30d0:	9e a1       	ldd	r25, Y+38	; 0x26
    30d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	9a a3       	std	Y+34, r25	; 0x22
    30dc:	89 a3       	std	Y+33, r24	; 0x21
    30de:	89 a1       	ldd	r24, Y+33	; 0x21
    30e0:	9a a1       	ldd	r25, Y+34	; 0x22
    30e2:	9e 8f       	std	Y+30, r25	; 0x1e
    30e4:	8d 8f       	std	Y+29, r24	; 0x1d
    30e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_displayCharacter+0x682>
    30ee:	9e 8f       	std	Y+30, r25	; 0x1e
    30f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    30f2:	fe 01       	movw	r30, r28
    30f4:	ed 59       	subi	r30, 0x9D	; 157
    30f6:	ff 4f       	sbci	r31, 0xFF	; 255
    30f8:	80 81       	ld	r24, Z
    30fa:	98 2f       	mov	r25, r24
    30fc:	91 70       	andi	r25, 0x01	; 1
    30fe:	82 e0       	ldi	r24, 0x02	; 2
    3100:	60 e0       	ldi	r22, 0x00	; 0
    3102:	49 2f       	mov	r20, r25
    3104:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    3108:	fe 01       	movw	r30, r28
    310a:	ed 59       	subi	r30, 0x9D	; 157
    310c:	ff 4f       	sbci	r31, 0xFF	; 255
    310e:	80 81       	ld	r24, Z
    3110:	88 2f       	mov	r24, r24
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	82 70       	andi	r24, 0x02	; 2
    3116:	90 70       	andi	r25, 0x00	; 0
    3118:	95 95       	asr	r25
    311a:	87 95       	ror	r24
    311c:	98 2f       	mov	r25, r24
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	61 e0       	ldi	r22, 0x01	; 1
    3122:	49 2f       	mov	r20, r25
    3124:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    3128:	fe 01       	movw	r30, r28
    312a:	ed 59       	subi	r30, 0x9D	; 157
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 81       	ld	r24, Z
    3130:	88 2f       	mov	r24, r24
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	84 70       	andi	r24, 0x04	; 4
    3136:	90 70       	andi	r25, 0x00	; 0
    3138:	95 95       	asr	r25
    313a:	87 95       	ror	r24
    313c:	95 95       	asr	r25
    313e:	87 95       	ror	r24
    3140:	98 2f       	mov	r25, r24
    3142:	82 e0       	ldi	r24, 0x02	; 2
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	49 2f       	mov	r20, r25
    3148:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    314c:	fe 01       	movw	r30, r28
    314e:	ed 59       	subi	r30, 0x9D	; 157
    3150:	ff 4f       	sbci	r31, 0xFF	; 255
    3152:	80 81       	ld	r24, Z
    3154:	88 2f       	mov	r24, r24
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	88 70       	andi	r24, 0x08	; 8
    315a:	90 70       	andi	r25, 0x00	; 0
    315c:	95 95       	asr	r25
    315e:	87 95       	ror	r24
    3160:	95 95       	asr	r25
    3162:	87 95       	ror	r24
    3164:	95 95       	asr	r25
    3166:	87 95       	ror	r24
    3168:	98 2f       	mov	r25, r24
    316a:	82 e0       	ldi	r24, 0x02	; 2
    316c:	63 e0       	ldi	r22, 0x03	; 3
    316e:	49 2f       	mov	r20, r25
    3170:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	a0 e8       	ldi	r26, 0x80	; 128
    317a:	bf e3       	ldi	r27, 0x3F	; 63
    317c:	89 8f       	std	Y+25, r24	; 0x19
    317e:	9a 8f       	std	Y+26, r25	; 0x1a
    3180:	ab 8f       	std	Y+27, r26	; 0x1b
    3182:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	69 8d       	ldd	r22, Y+25	; 0x19
    3186:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3188:	8b 8d       	ldd	r24, Y+27	; 0x1b
    318a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a e7       	ldi	r20, 0x7A	; 122
    3192:	53 e4       	ldi	r21, 0x43	; 67
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	8d 8b       	std	Y+21, r24	; 0x15
    319e:	9e 8b       	std	Y+22, r25	; 0x16
    31a0:	af 8b       	std	Y+23, r26	; 0x17
    31a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31a4:	6d 89       	ldd	r22, Y+21	; 0x15
    31a6:	7e 89       	ldd	r23, Y+22	; 0x16
    31a8:	8f 89       	ldd	r24, Y+23	; 0x17
    31aa:	98 8d       	ldd	r25, Y+24	; 0x18
    31ac:	20 e0       	ldi	r18, 0x00	; 0
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	40 e8       	ldi	r20, 0x80	; 128
    31b2:	5f e3       	ldi	r21, 0x3F	; 63
    31b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31b8:	88 23       	and	r24, r24
    31ba:	2c f4       	brge	.+10     	; 0x31c6 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	9c 8b       	std	Y+20, r25	; 0x14
    31c2:	8b 8b       	std	Y+19, r24	; 0x13
    31c4:	3f c0       	rjmp	.+126    	; 0x3244 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    31c6:	6d 89       	ldd	r22, Y+21	; 0x15
    31c8:	7e 89       	ldd	r23, Y+22	; 0x16
    31ca:	8f 89       	ldd	r24, Y+23	; 0x17
    31cc:	98 8d       	ldd	r25, Y+24	; 0x18
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	4c f5       	brge	.+82     	; 0x3230 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31de:	69 8d       	ldd	r22, Y+25	; 0x19
    31e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e2       	ldi	r20, 0x20	; 32
    31ec:	51 e4       	ldi	r21, 0x41	; 65
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	bc 01       	movw	r22, r24
    31f8:	cd 01       	movw	r24, r26
    31fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	9c 8b       	std	Y+20, r25	; 0x14
    3204:	8b 8b       	std	Y+19, r24	; 0x13
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <LCD_displayCharacter+0x7be>
    3208:	89 e1       	ldi	r24, 0x19	; 25
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	9a 8b       	std	Y+18, r25	; 0x12
    320e:	89 8b       	std	Y+17, r24	; 0x11
    3210:	89 89       	ldd	r24, Y+17	; 0x11
    3212:	9a 89       	ldd	r25, Y+18	; 0x12
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	f1 f7       	brne	.-4      	; 0x3214 <LCD_displayCharacter+0x7ac>
    3218:	9a 8b       	std	Y+18, r25	; 0x12
    321a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321c:	8b 89       	ldd	r24, Y+19	; 0x13
    321e:	9c 89       	ldd	r25, Y+20	; 0x14
    3220:	01 97       	sbiw	r24, 0x01	; 1
    3222:	9c 8b       	std	Y+20, r25	; 0x14
    3224:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3226:	8b 89       	ldd	r24, Y+19	; 0x13
    3228:	9c 89       	ldd	r25, Y+20	; 0x14
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	69 f7       	brne	.-38     	; 0x3208 <LCD_displayCharacter+0x7a0>
    322e:	14 c0       	rjmp	.+40     	; 0x3258 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3230:	6d 89       	ldd	r22, Y+21	; 0x15
    3232:	7e 89       	ldd	r23, Y+22	; 0x16
    3234:	8f 89       	ldd	r24, Y+23	; 0x17
    3236:	98 8d       	ldd	r25, Y+24	; 0x18
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	8b 89       	ldd	r24, Y+19	; 0x13
    3246:	9c 89       	ldd	r25, Y+20	; 0x14
    3248:	98 8b       	std	Y+16, r25	; 0x10
    324a:	8f 87       	std	Y+15, r24	; 0x0f
    324c:	8f 85       	ldd	r24, Y+15	; 0x0f
    324e:	98 89       	ldd	r25, Y+16	; 0x10
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <LCD_displayCharacter+0x7e8>
    3254:	98 8b       	std	Y+16, r25	; 0x10
    3256:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	65 e0       	ldi	r22, 0x05	; 5
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	0e 94 a5 0c 	call	0x194a	; 0x194a <GPIO_writePin>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a0 e8       	ldi	r26, 0x80	; 128
    3268:	bf e3       	ldi	r27, 0x3F	; 63
    326a:	8b 87       	std	Y+11, r24	; 0x0b
    326c:	9c 87       	std	Y+12, r25	; 0x0c
    326e:	ad 87       	std	Y+13, r26	; 0x0d
    3270:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3272:	6b 85       	ldd	r22, Y+11	; 0x0b
    3274:	7c 85       	ldd	r23, Y+12	; 0x0c
    3276:	8d 85       	ldd	r24, Y+13	; 0x0d
    3278:	9e 85       	ldd	r25, Y+14	; 0x0e
    327a:	20 e0       	ldi	r18, 0x00	; 0
    327c:	30 e0       	ldi	r19, 0x00	; 0
    327e:	4a e7       	ldi	r20, 0x7A	; 122
    3280:	53 e4       	ldi	r21, 0x43	; 67
    3282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	8f 83       	std	Y+7, r24	; 0x07
    328c:	98 87       	std	Y+8, r25	; 0x08
    328e:	a9 87       	std	Y+9, r26	; 0x09
    3290:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3292:	6f 81       	ldd	r22, Y+7	; 0x07
    3294:	78 85       	ldd	r23, Y+8	; 0x08
    3296:	89 85       	ldd	r24, Y+9	; 0x09
    3298:	9a 85       	ldd	r25, Y+10	; 0x0a
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e8       	ldi	r20, 0x80	; 128
    32a0:	5f e3       	ldi	r21, 0x3F	; 63
    32a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32a6:	88 23       	and	r24, r24
    32a8:	2c f4       	brge	.+10     	; 0x32b4 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	9e 83       	std	Y+6, r25	; 0x06
    32b0:	8d 83       	std	Y+5, r24	; 0x05
    32b2:	3f c0       	rjmp	.+126    	; 0x3332 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    32b4:	6f 81       	ldd	r22, Y+7	; 0x07
    32b6:	78 85       	ldd	r23, Y+8	; 0x08
    32b8:	89 85       	ldd	r24, Y+9	; 0x09
    32ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	3f ef       	ldi	r19, 0xFF	; 255
    32c0:	4f e7       	ldi	r20, 0x7F	; 127
    32c2:	57 e4       	ldi	r21, 0x47	; 71
    32c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32c8:	18 16       	cp	r1, r24
    32ca:	4c f5       	brge	.+82     	; 0x331e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e2       	ldi	r20, 0x20	; 32
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	bc 01       	movw	r22, r24
    32e6:	cd 01       	movw	r24, r26
    32e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	9e 83       	std	Y+6, r25	; 0x06
    32f2:	8d 83       	std	Y+5, r24	; 0x05
    32f4:	0f c0       	rjmp	.+30     	; 0x3314 <LCD_displayCharacter+0x8ac>
    32f6:	89 e1       	ldi	r24, 0x19	; 25
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	9c 81       	ldd	r25, Y+4	; 0x04
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <LCD_displayCharacter+0x89a>
    3306:	9c 83       	std	Y+4, r25	; 0x04
    3308:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	9e 81       	ldd	r25, Y+6	; 0x06
    330e:	01 97       	sbiw	r24, 0x01	; 1
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3314:	8d 81       	ldd	r24, Y+5	; 0x05
    3316:	9e 81       	ldd	r25, Y+6	; 0x06
    3318:	00 97       	sbiw	r24, 0x00	; 0
    331a:	69 f7       	brne	.-38     	; 0x32f6 <LCD_displayCharacter+0x88e>
    331c:	14 c0       	rjmp	.+40     	; 0x3346 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    331e:	6f 81       	ldd	r22, Y+7	; 0x07
    3320:	78 85       	ldd	r23, Y+8	; 0x08
    3322:	89 85       	ldd	r24, Y+9	; 0x09
    3324:	9a 85       	ldd	r25, Y+10	; 0x0a
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
    3332:	8d 81       	ldd	r24, Y+5	; 0x05
    3334:	9e 81       	ldd	r25, Y+6	; 0x06
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <LCD_displayCharacter+0x8d6>
    3342:	9a 83       	std	Y+2, r25	; 0x02
    3344:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3346:	cd 59       	subi	r28, 0x9D	; 157
    3348:	df 4f       	sbci	r29, 0xFF	; 255
    334a:	0f b6       	in	r0, 0x3f	; 63
    334c:	f8 94       	cli
    334e:	de bf       	out	0x3e, r29	; 62
    3350:	0f be       	out	0x3f, r0	; 63
    3352:	cd bf       	out	0x3d, r28	; 61
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	08 95       	ret

0000335e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	00 d0       	rcall	.+0      	; 0x3364 <LCD_displayString+0x6>
    3364:	0f 92       	push	r0
    3366:	cd b7       	in	r28, 0x3d	; 61
    3368:	de b7       	in	r29, 0x3e	; 62
    336a:	9b 83       	std	Y+3, r25	; 0x03
    336c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    336e:	19 82       	std	Y+1, r1	; 0x01
    3370:	0e c0       	rjmp	.+28     	; 0x338e <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	28 2f       	mov	r18, r24
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	8a 81       	ldd	r24, Y+2	; 0x02
    337a:	9b 81       	ldd	r25, Y+3	; 0x03
    337c:	fc 01       	movw	r30, r24
    337e:	e2 0f       	add	r30, r18
    3380:	f3 1f       	adc	r31, r19
    3382:	80 81       	ld	r24, Z
    3384:	0e 94 34 15 	call	0x2a68	; 0x2a68 <LCD_displayCharacter>
		i++;
    3388:	89 81       	ldd	r24, Y+1	; 0x01
    338a:	8f 5f       	subi	r24, 0xFF	; 255
    338c:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	9b 81       	ldd	r25, Y+3	; 0x03
    3398:	fc 01       	movw	r30, r24
    339a:	e2 0f       	add	r30, r18
    339c:	f3 1f       	adc	r31, r19
    339e:	80 81       	ld	r24, Z
    33a0:	88 23       	and	r24, r24
    33a2:	39 f7       	brne	.-50     	; 0x3372 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	0f 90       	pop	r0
    33aa:	cf 91       	pop	r28
    33ac:	df 91       	pop	r29
    33ae:	08 95       	ret

000033b0 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    33b0:	df 93       	push	r29
    33b2:	cf 93       	push	r28
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <LCD_moveCursor+0x6>
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <LCD_moveCursor+0x8>
    33b8:	0f 92       	push	r0
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	8a 83       	std	Y+2, r24	; 0x02
    33c0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	28 2f       	mov	r18, r24
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	3d 83       	std	Y+5, r19	; 0x05
    33ca:	2c 83       	std	Y+4, r18	; 0x04
    33cc:	8c 81       	ldd	r24, Y+4	; 0x04
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 05       	cpc	r25, r1
    33d4:	c1 f0       	breq	.+48     	; 0x3406 <LCD_moveCursor+0x56>
    33d6:	2c 81       	ldd	r18, Y+4	; 0x04
    33d8:	3d 81       	ldd	r19, Y+5	; 0x05
    33da:	22 30       	cpi	r18, 0x02	; 2
    33dc:	31 05       	cpc	r19, r1
    33de:	2c f4       	brge	.+10     	; 0x33ea <LCD_moveCursor+0x3a>
    33e0:	8c 81       	ldd	r24, Y+4	; 0x04
    33e2:	9d 81       	ldd	r25, Y+5	; 0x05
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	61 f0       	breq	.+24     	; 0x3400 <LCD_moveCursor+0x50>
    33e8:	19 c0       	rjmp	.+50     	; 0x341c <LCD_moveCursor+0x6c>
    33ea:	2c 81       	ldd	r18, Y+4	; 0x04
    33ec:	3d 81       	ldd	r19, Y+5	; 0x05
    33ee:	22 30       	cpi	r18, 0x02	; 2
    33f0:	31 05       	cpc	r19, r1
    33f2:	69 f0       	breq	.+26     	; 0x340e <LCD_moveCursor+0x5e>
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	9d 81       	ldd	r25, Y+5	; 0x05
    33f8:	83 30       	cpi	r24, 0x03	; 3
    33fa:	91 05       	cpc	r25, r1
    33fc:	61 f0       	breq	.+24     	; 0x3416 <LCD_moveCursor+0x66>
    33fe:	0e c0       	rjmp	.+28     	; 0x341c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	89 83       	std	Y+1, r24	; 0x01
    3404:	0b c0       	rjmp	.+22     	; 0x341c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3406:	8b 81       	ldd	r24, Y+3	; 0x03
    3408:	80 5c       	subi	r24, 0xC0	; 192
    340a:	89 83       	std	Y+1, r24	; 0x01
    340c:	07 c0       	rjmp	.+14     	; 0x341c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    340e:	8b 81       	ldd	r24, Y+3	; 0x03
    3410:	80 5f       	subi	r24, 0xF0	; 240
    3412:	89 83       	std	Y+1, r24	; 0x01
    3414:	03 c0       	rjmp	.+6      	; 0x341c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3416:	8b 81       	ldd	r24, Y+3	; 0x03
    3418:	80 5b       	subi	r24, 0xB0	; 176
    341a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	80 68       	ori	r24, 0x80	; 128
    3420:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
}
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	0f 90       	pop	r0
    342e:	cf 91       	pop	r28
    3430:	df 91       	pop	r29
    3432:	08 95       	ret

00003434 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3434:	df 93       	push	r29
    3436:	cf 93       	push	r28
    3438:	00 d0       	rcall	.+0      	; 0x343a <LCD_displayStringRowColumn+0x6>
    343a:	00 d0       	rcall	.+0      	; 0x343c <LCD_displayStringRowColumn+0x8>
    343c:	cd b7       	in	r28, 0x3d	; 61
    343e:	de b7       	in	r29, 0x3e	; 62
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	6a 83       	std	Y+2, r22	; 0x02
    3444:	5c 83       	std	Y+4, r21	; 0x04
    3446:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	6a 81       	ldd	r22, Y+2	; 0x02
    344c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3450:	8b 81       	ldd	r24, Y+3	; 0x03
    3452:	9c 81       	ldd	r25, Y+4	; 0x04
    3454:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
}
    3458:	0f 90       	pop	r0
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	cf 91       	pop	r28
    3462:	df 91       	pop	r29
    3464:	08 95       	ret

00003466 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3466:	df 93       	push	r29
    3468:	cf 93       	push	r28
    346a:	cd b7       	in	r28, 0x3d	; 61
    346c:	de b7       	in	r29, 0x3e	; 62
    346e:	62 97       	sbiw	r28, 0x12	; 18
    3470:	0f b6       	in	r0, 0x3f	; 63
    3472:	f8 94       	cli
    3474:	de bf       	out	0x3e, r29	; 62
    3476:	0f be       	out	0x3f, r0	; 63
    3478:	cd bf       	out	0x3d, r28	; 61
    347a:	9a 8b       	std	Y+18, r25	; 0x12
    347c:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    347e:	89 89       	ldd	r24, Y+17	; 0x11
    3480:	9a 89       	ldd	r25, Y+18	; 0x12
    3482:	9e 01       	movw	r18, r28
    3484:	2f 5f       	subi	r18, 0xFF	; 255
    3486:	3f 4f       	sbci	r19, 0xFF	; 255
    3488:	b9 01       	movw	r22, r18
    348a:	4a e0       	ldi	r20, 0x0A	; 10
    348c:	50 e0       	ldi	r21, 0x00	; 0
    348e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <itoa>
   LCD_displayString(buff); /* Display the string */
    3492:	ce 01       	movw	r24, r28
    3494:	01 96       	adiw	r24, 0x01	; 1
    3496:	0e 94 af 19 	call	0x335e	; 0x335e <LCD_displayString>
}
    349a:	62 96       	adiw	r28, 0x12	; 18
    349c:	0f b6       	in	r0, 0x3f	; 63
    349e:	f8 94       	cli
    34a0:	de bf       	out	0x3e, r29	; 62
    34a2:	0f be       	out	0x3f, r0	; 63
    34a4:	cd bf       	out	0x3d, r28	; 61
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	cd b7       	in	r28, 0x3d	; 61
    34b2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34b4:	81 e0       	ldi	r24, 0x01	; 1
    34b6:	0e 94 b9 10 	call	0x2172	; 0x2172 <LCD_sendCommand>
}
    34ba:	cf 91       	pop	r28
    34bc:	df 91       	pop	r29
    34be:	08 95       	ret

000034c0 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR(TIMER1_OVF_vect)
{
    34c0:	1f 92       	push	r1
    34c2:	0f 92       	push	r0
    34c4:	0f b6       	in	r0, 0x3f	; 63
    34c6:	0f 92       	push	r0
    34c8:	11 24       	eor	r1, r1
    34ca:	2f 93       	push	r18
    34cc:	3f 93       	push	r19
    34ce:	4f 93       	push	r20
    34d0:	5f 93       	push	r21
    34d2:	6f 93       	push	r22
    34d4:	7f 93       	push	r23
    34d6:	8f 93       	push	r24
    34d8:	9f 93       	push	r25
    34da:	af 93       	push	r26
    34dc:	bf 93       	push	r27
    34de:	ef 93       	push	r30
    34e0:	ff 93       	push	r31
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    34ea:	80 91 0b 01 	lds	r24, 0x010B
    34ee:	90 91 0c 01 	lds	r25, 0x010C
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	29 f0       	breq	.+10     	; 0x3500 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    34f6:	e0 91 0b 01 	lds	r30, 0x010B
    34fa:	f0 91 0c 01 	lds	r31, 0x010C
    34fe:	09 95       	icall
	}
}
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	ff 91       	pop	r31
    3506:	ef 91       	pop	r30
    3508:	bf 91       	pop	r27
    350a:	af 91       	pop	r26
    350c:	9f 91       	pop	r25
    350e:	8f 91       	pop	r24
    3510:	7f 91       	pop	r23
    3512:	6f 91       	pop	r22
    3514:	5f 91       	pop	r21
    3516:	4f 91       	pop	r20
    3518:	3f 91       	pop	r19
    351a:	2f 91       	pop	r18
    351c:	0f 90       	pop	r0
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	0f 90       	pop	r0
    3522:	1f 90       	pop	r1
    3524:	18 95       	reti

00003526 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3526:	1f 92       	push	r1
    3528:	0f 92       	push	r0
    352a:	0f b6       	in	r0, 0x3f	; 63
    352c:	0f 92       	push	r0
    352e:	11 24       	eor	r1, r1
    3530:	2f 93       	push	r18
    3532:	3f 93       	push	r19
    3534:	4f 93       	push	r20
    3536:	5f 93       	push	r21
    3538:	6f 93       	push	r22
    353a:	7f 93       	push	r23
    353c:	8f 93       	push	r24
    353e:	9f 93       	push	r25
    3540:	af 93       	push	r26
    3542:	bf 93       	push	r27
    3544:	ef 93       	push	r30
    3546:	ff 93       	push	r31
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3550:	80 91 0b 01 	lds	r24, 0x010B
    3554:	90 91 0c 01 	lds	r25, 0x010C
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	29 f0       	breq	.+10     	; 0x3566 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    355c:	e0 91 0b 01 	lds	r30, 0x010B
    3560:	f0 91 0c 01 	lds	r31, 0x010C
    3564:	09 95       	icall
	}
}
    3566:	cf 91       	pop	r28
    3568:	df 91       	pop	r29
    356a:	ff 91       	pop	r31
    356c:	ef 91       	pop	r30
    356e:	bf 91       	pop	r27
    3570:	af 91       	pop	r26
    3572:	9f 91       	pop	r25
    3574:	8f 91       	pop	r24
    3576:	7f 91       	pop	r23
    3578:	6f 91       	pop	r22
    357a:	5f 91       	pop	r21
    357c:	4f 91       	pop	r20
    357e:	3f 91       	pop	r19
    3580:	2f 91       	pop	r18
    3582:	0f 90       	pop	r0
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	0f 90       	pop	r0
    3588:	1f 90       	pop	r1
    358a:	18 95       	reti

0000358c <Timer1_init>:
 *                      Functions definitions                                   *
 *******************************************************************************/
/* Description:
 * Function to initialize the Timer driver */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    358c:	df 93       	push	r29
    358e:	cf 93       	push	r28
    3590:	00 d0       	rcall	.+0      	; 0x3592 <Timer1_init+0x6>
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
    3596:	9a 83       	std	Y+2, r25	; 0x02
    3598:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = Config_Ptr->initial_value;		/* Set timer1 initial count to zero */
    359a:	ac e4       	ldi	r26, 0x4C	; 76
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e9 81       	ldd	r30, Y+1	; 0x01
    35a0:	fa 81       	ldd	r31, Y+2	; 0x02
    35a2:	80 81       	ld	r24, Z
    35a4:	91 81       	ldd	r25, Z+1	; 0x01
    35a6:	11 96       	adiw	r26, 0x01	; 1
    35a8:	9c 93       	st	X, r25
    35aa:	8e 93       	st	-X, r24

	if(Config_Ptr->mode==NORMAL_MODE)
    35ac:	e9 81       	ldd	r30, Y+1	; 0x01
    35ae:	fa 81       	ldd	r31, Y+2	; 0x02
    35b0:	85 81       	ldd	r24, Z+5	; 0x05
    35b2:	88 23       	and	r24, r24
    35b4:	79 f4       	brne	.+30     	; 0x35d4 <Timer1_init+0x48>
	{
		TIMSK&=~(1<<OCIE1A); /* disable compare mode interrupt*/
    35b6:	a9 e5       	ldi	r26, 0x59	; 89
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e9 e5       	ldi	r30, 0x59	; 89
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	8f 7e       	andi	r24, 0xEF	; 239
    35c2:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE1);/* Enable normal mode interrupt*/
    35c4:	a9 e5       	ldi	r26, 0x59	; 89
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	e9 e5       	ldi	r30, 0x59	; 89
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	84 60       	ori	r24, 0x04	; 4
    35d0:	8c 93       	st	X, r24
    35d2:	1c c0       	rjmp	.+56     	; 0x360c <Timer1_init+0x80>
	}
	else if (Config_Ptr->mode==COMPARE_MODE)
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	fa 81       	ldd	r31, Y+2	; 0x02
    35d8:	85 81       	ldd	r24, Z+5	; 0x05
    35da:	88 30       	cpi	r24, 0x08	; 8
    35dc:	b9 f4       	brne	.+46     	; 0x360c <Timer1_init+0x80>
	{
		TIMSK&=~(1<<TOIE1);/* disable normal mode interrupt*/
    35de:	a9 e5       	ldi	r26, 0x59	; 89
    35e0:	b0 e0       	ldi	r27, 0x00	; 0
    35e2:	e9 e5       	ldi	r30, 0x59	; 89
    35e4:	f0 e0       	ldi	r31, 0x00	; 0
    35e6:	80 81       	ld	r24, Z
    35e8:	8b 7f       	andi	r24, 0xFB	; 251
    35ea:	8c 93       	st	X, r24
		OCR1A = Config_Ptr->compare_value;     /* Set the Compare value  */
    35ec:	aa e4       	ldi	r26, 0x4A	; 74
    35ee:	b0 e0       	ldi	r27, 0x00	; 0
    35f0:	e9 81       	ldd	r30, Y+1	; 0x01
    35f2:	fa 81       	ldd	r31, Y+2	; 0x02
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	11 96       	adiw	r26, 0x01	; 1
    35fa:	9c 93       	st	X, r25
    35fc:	8e 93       	st	-X, r24

		TIMSK |= (1<<OCIE1A); /* Enable Timer1 Compare A Interrupt */
    35fe:	a9 e5       	ldi	r26, 0x59	; 89
    3600:	b0 e0       	ldi	r27, 0x00	; 0
    3602:	e9 e5       	ldi	r30, 0x59	; 89
    3604:	f0 e0       	ldi	r31, 0x00	; 0
    3606:	80 81       	ld	r24, Z
    3608:	80 61       	ori	r24, 0x10	; 16
    360a:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=1
	 * 3. CTC & normal Modes WGM10=0 WGM11=0 (Modes Number 0&4)
	 */
	TCCR1A = (1<<FOC1A)|(1<<FOC1B);
    360c:	ef e4       	ldi	r30, 0x4F	; 79
    360e:	f0 e0       	ldi	r31, 0x00	; 0
    3610:	8c e0       	ldi	r24, 0x0C	; 12
    3612:	80 83       	st	Z, r24

	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0
	 * 2. Prescaler = Config_Ptr->prescaler
	 */
	TCCR1B = (Config_Ptr->mode) | (Config_Ptr->prescaler);
    3614:	ae e4       	ldi	r26, 0x4E	; 78
    3616:	b0 e0       	ldi	r27, 0x00	; 0
    3618:	e9 81       	ldd	r30, Y+1	; 0x01
    361a:	fa 81       	ldd	r31, Y+2	; 0x02
    361c:	95 81       	ldd	r25, Z+5	; 0x05
    361e:	e9 81       	ldd	r30, Y+1	; 0x01
    3620:	fa 81       	ldd	r31, Y+2	; 0x02
    3622:	84 81       	ldd	r24, Z+4	; 0x04
    3624:	89 2b       	or	r24, r25
    3626:	8c 93       	st	X, r24
}
    3628:	0f 90       	pop	r0
    362a:	0f 90       	pop	r0
    362c:	cf 91       	pop	r28
    362e:	df 91       	pop	r29
    3630:	08 95       	ret

00003632 <Timer1_deInit>:

/* Description:
 * Function to disable the Timer1. */
void Timer1_deInit(void)
{
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
	TIMSK=0;
    363a:	e9 e5       	ldi	r30, 0x59	; 89
    363c:	f0 e0       	ldi	r31, 0x00	; 0
    363e:	10 82       	st	Z, r1
	TCCR1A=0;
    3640:	ef e4       	ldi	r30, 0x4F	; 79
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	10 82       	st	Z, r1
	TCCR1B=0;
    3646:	ee e4       	ldi	r30, 0x4E	; 78
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	10 82       	st	Z, r1
	OCR1A=0;
    364c:	ea e4       	ldi	r30, 0x4A	; 74
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	11 82       	std	Z+1, r1	; 0x01
    3652:	10 82       	st	Z, r1
	TCNT1=0;
    3654:	ec e4       	ldi	r30, 0x4C	; 76
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	11 82       	std	Z+1, r1	; 0x01
    365a:	10 82       	st	Z, r1

}
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <Timer1_setCallBack>:

/* Description:
 * Function to set the Call Back function address. */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <Timer1_setCallBack+0x6>
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	9a 83       	std	Y+2, r25	; 0x02
    366e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	90 93 0c 01 	sts	0x010C, r25
    3678:	80 93 0b 01 	sts	0x010B, r24
}
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configuration *config_ptr)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	00 d0       	rcall	.+0      	; 0x368c <UART_init+0x6>
    368c:	00 d0       	rcall	.+0      	; 0x368e <UART_init+0x8>
    368e:	cd b7       	in	r28, 0x3d	; 61
    3690:	de b7       	in	r29, 0x3e	; 62
    3692:	9c 83       	std	Y+4, r25	; 0x04
    3694:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3696:	1a 82       	std	Y+2, r1	; 0x02
    3698:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    369a:	eb e2       	ldi	r30, 0x2B	; 43
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	82 e0       	ldi	r24, 0x02	; 2
    36a0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN)|((config_ptr->data_size &0x04)<<1) ;
    36a2:	aa e2       	ldi	r26, 0x2A	; 42
    36a4:	b0 e0       	ldi	r27, 0x00	; 0
    36a6:	eb 81       	ldd	r30, Y+3	; 0x03
    36a8:	fc 81       	ldd	r31, Y+4	; 0x04
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	88 2f       	mov	r24, r24
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	84 70       	andi	r24, 0x04	; 4
    36b2:	90 70       	andi	r25, 0x00	; 0
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	88 61       	ori	r24, 0x18	; 24
    36ba:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (config_ptr->parity)|((config_ptr->data_size &0x03)<<1);
    36bc:	a0 e4       	ldi	r26, 0x40	; 64
    36be:	b0 e0       	ldi	r27, 0x00	; 0
    36c0:	eb 81       	ldd	r30, Y+3	; 0x03
    36c2:	fc 81       	ldd	r31, Y+4	; 0x04
    36c4:	80 81       	ld	r24, Z
    36c6:	28 2f       	mov	r18, r24
    36c8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ca:	fc 81       	ldd	r31, Y+4	; 0x04
    36cc:	82 81       	ldd	r24, Z+2	; 0x02
    36ce:	88 2f       	mov	r24, r24
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	83 70       	andi	r24, 0x03	; 3
    36d4:	90 70       	andi	r25, 0x00	; 0
    36d6:	88 0f       	add	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	82 2b       	or	r24, r18
    36dc:	8c 93       	st	X, r24

	UCSRC |= (1<<URSEL) |((config_ptr->stop_bit)<<USBS);
    36de:	a0 e4       	ldi	r26, 0x40	; 64
    36e0:	b0 e0       	ldi	r27, 0x00	; 0
    36e2:	e0 e4       	ldi	r30, 0x40	; 64
    36e4:	f0 e0       	ldi	r31, 0x00	; 0
    36e6:	80 81       	ld	r24, Z
    36e8:	28 2f       	mov	r18, r24
    36ea:	eb 81       	ldd	r30, Y+3	; 0x03
    36ec:	fc 81       	ldd	r31, Y+4	; 0x04
    36ee:	81 81       	ldd	r24, Z+1	; 0x01
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	88 0f       	add	r24, r24
    36f6:	99 1f       	adc	r25, r25
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	88 0f       	add	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	80 68       	ori	r24, 0x80	; 128
    3702:	82 2b       	or	r24, r18
    3704:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->baud_rate * 8UL))) - 1);
    3706:	eb 81       	ldd	r30, Y+3	; 0x03
    3708:	fc 81       	ldd	r31, Y+4	; 0x04
    370a:	83 81       	ldd	r24, Z+3	; 0x03
    370c:	94 81       	ldd	r25, Z+4	; 0x04
    370e:	a5 81       	ldd	r26, Z+5	; 0x05
    3710:	b6 81       	ldd	r27, Z+6	; 0x06
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	aa 1f       	adc	r26, r26
    3718:	bb 1f       	adc	r27, r27
    371a:	88 0f       	add	r24, r24
    371c:	99 1f       	adc	r25, r25
    371e:	aa 1f       	adc	r26, r26
    3720:	bb 1f       	adc	r27, r27
    3722:	88 0f       	add	r24, r24
    3724:	99 1f       	adc	r25, r25
    3726:	aa 1f       	adc	r26, r26
    3728:	bb 1f       	adc	r27, r27
    372a:	9c 01       	movw	r18, r24
    372c:	ad 01       	movw	r20, r26
    372e:	80 e4       	ldi	r24, 0x40	; 64
    3730:	92 e4       	ldi	r25, 0x42	; 66
    3732:	af e0       	ldi	r26, 0x0F	; 15
    3734:	b0 e0       	ldi	r27, 0x00	; 0
    3736:	bc 01       	movw	r22, r24
    3738:	cd 01       	movw	r24, r26
    373a:	0e 94 48 1c 	call	0x3890	; 0x3890 <__udivmodsi4>
    373e:	da 01       	movw	r26, r20
    3740:	c9 01       	movw	r24, r18
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	9a 83       	std	Y+2, r25	; 0x02
    3746:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3748:	e0 e4       	ldi	r30, 0x40	; 64
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	9a 81       	ldd	r25, Y+2	; 0x02
    3750:	89 2f       	mov	r24, r25
    3752:	99 27       	eor	r25, r25
    3754:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3756:	e9 e2       	ldi	r30, 0x29	; 41
    3758:	f0 e0       	ldi	r31, 0x00	; 0
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	80 83       	st	Z, r24
}
    375e:	0f 90       	pop	r0
    3760:	0f 90       	pop	r0
    3762:	0f 90       	pop	r0
    3764:	0f 90       	pop	r0
    3766:	cf 91       	pop	r28
    3768:	df 91       	pop	r29
    376a:	08 95       	ret

0000376c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	0f 92       	push	r0
    3772:	cd b7       	in	r28, 0x3d	; 61
    3774:	de b7       	in	r29, 0x3e	; 62
    3776:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3778:	eb e2       	ldi	r30, 0x2B	; 43
    377a:	f0 e0       	ldi	r31, 0x00	; 0
    377c:	80 81       	ld	r24, Z
    377e:	88 2f       	mov	r24, r24
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	80 72       	andi	r24, 0x20	; 32
    3784:	90 70       	andi	r25, 0x00	; 0
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	b9 f3       	breq	.-18     	; 0x3778 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    378a:	ec e2       	ldi	r30, 0x2C	; 44
    378c:	f0 e0       	ldi	r31, 0x00	; 0
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3792:	0f 90       	pop	r0
    3794:	cf 91       	pop	r28
    3796:	df 91       	pop	r29
    3798:	08 95       	ret

0000379a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    379a:	df 93       	push	r29
    379c:	cf 93       	push	r28
    379e:	cd b7       	in	r28, 0x3d	; 61
    37a0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    37a2:	eb e2       	ldi	r30, 0x2B	; 43
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	80 81       	ld	r24, Z
    37a8:	88 23       	and	r24, r24
    37aa:	dc f7       	brge	.-10     	; 0x37a2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    37ac:	ec e2       	ldi	r30, 0x2C	; 44
    37ae:	f0 e0       	ldi	r31, 0x00	; 0
    37b0:	80 81       	ld	r24, Z
}
    37b2:	cf 91       	pop	r28
    37b4:	df 91       	pop	r29
    37b6:	08 95       	ret

000037b8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    37b8:	df 93       	push	r29
    37ba:	cf 93       	push	r28
    37bc:	00 d0       	rcall	.+0      	; 0x37be <UART_sendString+0x6>
    37be:	0f 92       	push	r0
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	9b 83       	std	Y+3, r25	; 0x03
    37c6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37c8:	19 82       	std	Y+1, r1	; 0x01
    37ca:	0e c0       	rjmp	.+28     	; 0x37e8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	28 2f       	mov	r18, r24
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	fc 01       	movw	r30, r24
    37d8:	e2 0f       	add	r30, r18
    37da:	f3 1f       	adc	r31, r19
    37dc:	80 81       	ld	r24, Z
    37de:	0e 94 b6 1b 	call	0x376c	; 0x376c <UART_sendByte>
		i++;
    37e2:	89 81       	ldd	r24, Y+1	; 0x01
    37e4:	8f 5f       	subi	r24, 0xFF	; 255
    37e6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	28 2f       	mov	r18, r24
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	8a 81       	ldd	r24, Y+2	; 0x02
    37f0:	9b 81       	ldd	r25, Y+3	; 0x03
    37f2:	fc 01       	movw	r30, r24
    37f4:	e2 0f       	add	r30, r18
    37f6:	f3 1f       	adc	r31, r19
    37f8:	80 81       	ld	r24, Z
    37fa:	88 23       	and	r24, r24
    37fc:	39 f7       	brne	.-50     	; 0x37cc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	0f 90       	pop	r0
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	00 d0       	rcall	.+0      	; 0x3814 <UART_receiveString+0xa>
    3814:	0f 92       	push	r0
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	9b 83       	std	Y+3, r25	; 0x03
    381c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    381e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	28 2f       	mov	r18, r24
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	8a 81       	ldd	r24, Y+2	; 0x02
    3828:	9b 81       	ldd	r25, Y+3	; 0x03
    382a:	8c 01       	movw	r16, r24
    382c:	02 0f       	add	r16, r18
    382e:	13 1f       	adc	r17, r19
    3830:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    3834:	f8 01       	movw	r30, r16
    3836:	80 83       	st	Z, r24
    3838:	0f c0       	rjmp	.+30     	; 0x3858 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    383a:	89 81       	ldd	r24, Y+1	; 0x01
    383c:	8f 5f       	subi	r24, 0xFF	; 255
    383e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3840:	89 81       	ldd	r24, Y+1	; 0x01
    3842:	28 2f       	mov	r18, r24
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	9b 81       	ldd	r25, Y+3	; 0x03
    384a:	8c 01       	movw	r16, r24
    384c:	02 0f       	add	r16, r18
    384e:	13 1f       	adc	r17, r19
    3850:	0e 94 cd 1b 	call	0x379a	; 0x379a <UART_recieveByte>
    3854:	f8 01       	movw	r30, r16
    3856:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	28 2f       	mov	r18, r24
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	8a 81       	ldd	r24, Y+2	; 0x02
    3860:	9b 81       	ldd	r25, Y+3	; 0x03
    3862:	fc 01       	movw	r30, r24
    3864:	e2 0f       	add	r30, r18
    3866:	f3 1f       	adc	r31, r19
    3868:	80 81       	ld	r24, Z
    386a:	83 32       	cpi	r24, 0x23	; 35
    386c:	31 f7       	brne	.-52     	; 0x383a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	28 2f       	mov	r18, r24
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	8a 81       	ldd	r24, Y+2	; 0x02
    3876:	9b 81       	ldd	r25, Y+3	; 0x03
    3878:	fc 01       	movw	r30, r24
    387a:	e2 0f       	add	r30, r18
    387c:	f3 1f       	adc	r31, r19
    387e:	10 82       	st	Z, r1
}
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	08 95       	ret

00003890 <__udivmodsi4>:
    3890:	a1 e2       	ldi	r26, 0x21	; 33
    3892:	1a 2e       	mov	r1, r26
    3894:	aa 1b       	sub	r26, r26
    3896:	bb 1b       	sub	r27, r27
    3898:	fd 01       	movw	r30, r26
    389a:	0d c0       	rjmp	.+26     	; 0x38b6 <__udivmodsi4_ep>

0000389c <__udivmodsi4_loop>:
    389c:	aa 1f       	adc	r26, r26
    389e:	bb 1f       	adc	r27, r27
    38a0:	ee 1f       	adc	r30, r30
    38a2:	ff 1f       	adc	r31, r31
    38a4:	a2 17       	cp	r26, r18
    38a6:	b3 07       	cpc	r27, r19
    38a8:	e4 07       	cpc	r30, r20
    38aa:	f5 07       	cpc	r31, r21
    38ac:	20 f0       	brcs	.+8      	; 0x38b6 <__udivmodsi4_ep>
    38ae:	a2 1b       	sub	r26, r18
    38b0:	b3 0b       	sbc	r27, r19
    38b2:	e4 0b       	sbc	r30, r20
    38b4:	f5 0b       	sbc	r31, r21

000038b6 <__udivmodsi4_ep>:
    38b6:	66 1f       	adc	r22, r22
    38b8:	77 1f       	adc	r23, r23
    38ba:	88 1f       	adc	r24, r24
    38bc:	99 1f       	adc	r25, r25
    38be:	1a 94       	dec	r1
    38c0:	69 f7       	brne	.-38     	; 0x389c <__udivmodsi4_loop>
    38c2:	60 95       	com	r22
    38c4:	70 95       	com	r23
    38c6:	80 95       	com	r24
    38c8:	90 95       	com	r25
    38ca:	9b 01       	movw	r18, r22
    38cc:	ac 01       	movw	r20, r24
    38ce:	bd 01       	movw	r22, r26
    38d0:	cf 01       	movw	r24, r30
    38d2:	08 95       	ret

000038d4 <__prologue_saves__>:
    38d4:	2f 92       	push	r2
    38d6:	3f 92       	push	r3
    38d8:	4f 92       	push	r4
    38da:	5f 92       	push	r5
    38dc:	6f 92       	push	r6
    38de:	7f 92       	push	r7
    38e0:	8f 92       	push	r8
    38e2:	9f 92       	push	r9
    38e4:	af 92       	push	r10
    38e6:	bf 92       	push	r11
    38e8:	cf 92       	push	r12
    38ea:	df 92       	push	r13
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
    38fc:	ca 1b       	sub	r28, r26
    38fe:	db 0b       	sbc	r29, r27
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
    390a:	09 94       	ijmp

0000390c <__epilogue_restores__>:
    390c:	2a 88       	ldd	r2, Y+18	; 0x12
    390e:	39 88       	ldd	r3, Y+17	; 0x11
    3910:	48 88       	ldd	r4, Y+16	; 0x10
    3912:	5f 84       	ldd	r5, Y+15	; 0x0f
    3914:	6e 84       	ldd	r6, Y+14	; 0x0e
    3916:	7d 84       	ldd	r7, Y+13	; 0x0d
    3918:	8c 84       	ldd	r8, Y+12	; 0x0c
    391a:	9b 84       	ldd	r9, Y+11	; 0x0b
    391c:	aa 84       	ldd	r10, Y+10	; 0x0a
    391e:	b9 84       	ldd	r11, Y+9	; 0x09
    3920:	c8 84       	ldd	r12, Y+8	; 0x08
    3922:	df 80       	ldd	r13, Y+7	; 0x07
    3924:	ee 80       	ldd	r14, Y+6	; 0x06
    3926:	fd 80       	ldd	r15, Y+5	; 0x05
    3928:	0c 81       	ldd	r16, Y+4	; 0x04
    392a:	1b 81       	ldd	r17, Y+3	; 0x03
    392c:	aa 81       	ldd	r26, Y+2	; 0x02
    392e:	b9 81       	ldd	r27, Y+1	; 0x01
    3930:	ce 0f       	add	r28, r30
    3932:	d1 1d       	adc	r29, r1
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	ed 01       	movw	r28, r26
    3940:	08 95       	ret

00003942 <itoa>:
    3942:	fb 01       	movw	r30, r22
    3944:	9f 01       	movw	r18, r30
    3946:	e8 94       	clt
    3948:	42 30       	cpi	r20, 0x02	; 2
    394a:	c4 f0       	brlt	.+48     	; 0x397c <itoa+0x3a>
    394c:	45 32       	cpi	r20, 0x25	; 37
    394e:	b4 f4       	brge	.+44     	; 0x397c <itoa+0x3a>
    3950:	4a 30       	cpi	r20, 0x0A	; 10
    3952:	29 f4       	brne	.+10     	; 0x395e <itoa+0x1c>
    3954:	97 fb       	bst	r25, 7
    3956:	1e f4       	brtc	.+6      	; 0x395e <itoa+0x1c>
    3958:	90 95       	com	r25
    395a:	81 95       	neg	r24
    395c:	9f 4f       	sbci	r25, 0xFF	; 255
    395e:	64 2f       	mov	r22, r20
    3960:	77 27       	eor	r23, r23
    3962:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <__udivmodhi4>
    3966:	80 5d       	subi	r24, 0xD0	; 208
    3968:	8a 33       	cpi	r24, 0x3A	; 58
    396a:	0c f0       	brlt	.+2      	; 0x396e <itoa+0x2c>
    396c:	89 5d       	subi	r24, 0xD9	; 217
    396e:	81 93       	st	Z+, r24
    3970:	cb 01       	movw	r24, r22
    3972:	00 97       	sbiw	r24, 0x00	; 0
    3974:	a1 f7       	brne	.-24     	; 0x395e <itoa+0x1c>
    3976:	16 f4       	brtc	.+4      	; 0x397c <itoa+0x3a>
    3978:	5d e2       	ldi	r21, 0x2D	; 45
    397a:	51 93       	st	Z+, r21
    397c:	10 82       	st	Z, r1
    397e:	c9 01       	movw	r24, r18
    3980:	0c 94 c2 1c 	jmp	0x3984	; 0x3984 <strrev>

00003984 <strrev>:
    3984:	dc 01       	movw	r26, r24
    3986:	fc 01       	movw	r30, r24
    3988:	67 2f       	mov	r22, r23
    398a:	71 91       	ld	r23, Z+
    398c:	77 23       	and	r23, r23
    398e:	e1 f7       	brne	.-8      	; 0x3988 <strrev+0x4>
    3990:	32 97       	sbiw	r30, 0x02	; 2
    3992:	04 c0       	rjmp	.+8      	; 0x399c <strrev+0x18>
    3994:	7c 91       	ld	r23, X
    3996:	6d 93       	st	X+, r22
    3998:	70 83       	st	Z, r23
    399a:	62 91       	ld	r22, -Z
    399c:	ae 17       	cp	r26, r30
    399e:	bf 07       	cpc	r27, r31
    39a0:	c8 f3       	brcs	.-14     	; 0x3994 <strrev+0x10>
    39a2:	08 95       	ret

000039a4 <__udivmodhi4>:
    39a4:	aa 1b       	sub	r26, r26
    39a6:	bb 1b       	sub	r27, r27
    39a8:	51 e1       	ldi	r21, 0x11	; 17
    39aa:	07 c0       	rjmp	.+14     	; 0x39ba <__udivmodhi4_ep>

000039ac <__udivmodhi4_loop>:
    39ac:	aa 1f       	adc	r26, r26
    39ae:	bb 1f       	adc	r27, r27
    39b0:	a6 17       	cp	r26, r22
    39b2:	b7 07       	cpc	r27, r23
    39b4:	10 f0       	brcs	.+4      	; 0x39ba <__udivmodhi4_ep>
    39b6:	a6 1b       	sub	r26, r22
    39b8:	b7 0b       	sbc	r27, r23

000039ba <__udivmodhi4_ep>:
    39ba:	88 1f       	adc	r24, r24
    39bc:	99 1f       	adc	r25, r25
    39be:	5a 95       	dec	r21
    39c0:	a9 f7       	brne	.-22     	; 0x39ac <__udivmodhi4_loop>
    39c2:	80 95       	com	r24
    39c4:	90 95       	com	r25
    39c6:	bc 01       	movw	r22, r24
    39c8:	cd 01       	movw	r24, r26
    39ca:	08 95       	ret

000039cc <_exit>:
    39cc:	f8 94       	cli

000039ce <__stop_program>:
    39ce:	ff cf       	rjmp	.-2      	; 0x39ce <__stop_program>
